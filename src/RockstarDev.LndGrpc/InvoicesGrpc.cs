// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: invoices.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Invoicesrpc {
  /// <summary>
  /// Invoices is a service that can be used to create, accept, settle and cancel
  /// invoices.
  /// </summary>
  public static partial class Invoices
  {
    static readonly string __ServiceName = "invoicesrpc.Invoices";

    static readonly grpc::Marshaller<global::Invoicesrpc.SubscribeSingleInvoiceRequest> __Marshaller_invoicesrpc_SubscribeSingleInvoiceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Invoicesrpc.SubscribeSingleInvoiceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Lnrpc.Invoice> __Marshaller_lnrpc_Invoice = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Lnrpc.Invoice.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Invoicesrpc.CancelInvoiceMsg> __Marshaller_invoicesrpc_CancelInvoiceMsg = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Invoicesrpc.CancelInvoiceMsg.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Invoicesrpc.CancelInvoiceResp> __Marshaller_invoicesrpc_CancelInvoiceResp = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Invoicesrpc.CancelInvoiceResp.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Invoicesrpc.AddHoldInvoiceRequest> __Marshaller_invoicesrpc_AddHoldInvoiceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Invoicesrpc.AddHoldInvoiceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Invoicesrpc.AddHoldInvoiceResp> __Marshaller_invoicesrpc_AddHoldInvoiceResp = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Invoicesrpc.AddHoldInvoiceResp.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Invoicesrpc.SettleInvoiceMsg> __Marshaller_invoicesrpc_SettleInvoiceMsg = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Invoicesrpc.SettleInvoiceMsg.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Invoicesrpc.SettleInvoiceResp> __Marshaller_invoicesrpc_SettleInvoiceResp = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Invoicesrpc.SettleInvoiceResp.Parser.ParseFrom);

    static readonly grpc::Method<global::Invoicesrpc.SubscribeSingleInvoiceRequest, global::Lnrpc.Invoice> __Method_SubscribeSingleInvoice = new grpc::Method<global::Invoicesrpc.SubscribeSingleInvoiceRequest, global::Lnrpc.Invoice>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SubscribeSingleInvoice",
        __Marshaller_invoicesrpc_SubscribeSingleInvoiceRequest,
        __Marshaller_lnrpc_Invoice);

    static readonly grpc::Method<global::Invoicesrpc.CancelInvoiceMsg, global::Invoicesrpc.CancelInvoiceResp> __Method_CancelInvoice = new grpc::Method<global::Invoicesrpc.CancelInvoiceMsg, global::Invoicesrpc.CancelInvoiceResp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CancelInvoice",
        __Marshaller_invoicesrpc_CancelInvoiceMsg,
        __Marshaller_invoicesrpc_CancelInvoiceResp);

    static readonly grpc::Method<global::Invoicesrpc.AddHoldInvoiceRequest, global::Invoicesrpc.AddHoldInvoiceResp> __Method_AddHoldInvoice = new grpc::Method<global::Invoicesrpc.AddHoldInvoiceRequest, global::Invoicesrpc.AddHoldInvoiceResp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddHoldInvoice",
        __Marshaller_invoicesrpc_AddHoldInvoiceRequest,
        __Marshaller_invoicesrpc_AddHoldInvoiceResp);

    static readonly grpc::Method<global::Invoicesrpc.SettleInvoiceMsg, global::Invoicesrpc.SettleInvoiceResp> __Method_SettleInvoice = new grpc::Method<global::Invoicesrpc.SettleInvoiceMsg, global::Invoicesrpc.SettleInvoiceResp>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SettleInvoice",
        __Marshaller_invoicesrpc_SettleInvoiceMsg,
        __Marshaller_invoicesrpc_SettleInvoiceResp);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Invoicesrpc.InvoicesReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Invoices</summary>
    [grpc::BindServiceMethod(typeof(Invoices), "BindService")]
    public abstract partial class InvoicesBase
    {
      /// <summary>
      ///*
      ///SubscribeSingleInvoice returns a uni-directional stream (server -> client)
      ///to notify the client of state transitions of the specified invoice.
      ///Initially the current invoice state is always sent out.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task SubscribeSingleInvoice(global::Invoicesrpc.SubscribeSingleInvoiceRequest request, grpc::IServerStreamWriter<global::Lnrpc.Invoice> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      ///CancelInvoice cancels a currently open invoice. If the invoice is already 
      ///canceled, this call will succeed. If the invoice is already settled, it will
      ///fail.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Invoicesrpc.CancelInvoiceResp> CancelInvoice(global::Invoicesrpc.CancelInvoiceMsg request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      ///AddHoldInvoice creates a hold invoice. It ties the invoice to the hash
      ///supplied in the request.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Invoicesrpc.AddHoldInvoiceResp> AddHoldInvoice(global::Invoicesrpc.AddHoldInvoiceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///*
      ///SettleInvoice settles an accepted invoice. If the invoice is already
      ///settled, this call will succeed.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Invoicesrpc.SettleInvoiceResp> SettleInvoice(global::Invoicesrpc.SettleInvoiceMsg request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Invoices</summary>
    public partial class InvoicesClient : grpc::ClientBase<InvoicesClient>
    {
      /// <summary>Creates a new client for Invoices</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public InvoicesClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Invoices that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public InvoicesClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected InvoicesClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected InvoicesClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///*
      ///SubscribeSingleInvoice returns a uni-directional stream (server -> client)
      ///to notify the client of state transitions of the specified invoice.
      ///Initially the current invoice state is always sent out.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Lnrpc.Invoice> SubscribeSingleInvoice(global::Invoicesrpc.SubscribeSingleInvoiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribeSingleInvoice(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      ///SubscribeSingleInvoice returns a uni-directional stream (server -> client)
      ///to notify the client of state transitions of the specified invoice.
      ///Initially the current invoice state is always sent out.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::Lnrpc.Invoice> SubscribeSingleInvoice(global::Invoicesrpc.SubscribeSingleInvoiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_SubscribeSingleInvoice, null, options, request);
      }
      /// <summary>
      ///*
      ///CancelInvoice cancels a currently open invoice. If the invoice is already 
      ///canceled, this call will succeed. If the invoice is already settled, it will
      ///fail.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Invoicesrpc.CancelInvoiceResp CancelInvoice(global::Invoicesrpc.CancelInvoiceMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CancelInvoice(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      ///CancelInvoice cancels a currently open invoice. If the invoice is already 
      ///canceled, this call will succeed. If the invoice is already settled, it will
      ///fail.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Invoicesrpc.CancelInvoiceResp CancelInvoice(global::Invoicesrpc.CancelInvoiceMsg request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CancelInvoice, null, options, request);
      }
      /// <summary>
      ///*
      ///CancelInvoice cancels a currently open invoice. If the invoice is already 
      ///canceled, this call will succeed. If the invoice is already settled, it will
      ///fail.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Invoicesrpc.CancelInvoiceResp> CancelInvoiceAsync(global::Invoicesrpc.CancelInvoiceMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CancelInvoiceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      ///CancelInvoice cancels a currently open invoice. If the invoice is already 
      ///canceled, this call will succeed. If the invoice is already settled, it will
      ///fail.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Invoicesrpc.CancelInvoiceResp> CancelInvoiceAsync(global::Invoicesrpc.CancelInvoiceMsg request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CancelInvoice, null, options, request);
      }
      /// <summary>
      ///*
      ///AddHoldInvoice creates a hold invoice. It ties the invoice to the hash
      ///supplied in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Invoicesrpc.AddHoldInvoiceResp AddHoldInvoice(global::Invoicesrpc.AddHoldInvoiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddHoldInvoice(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      ///AddHoldInvoice creates a hold invoice. It ties the invoice to the hash
      ///supplied in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Invoicesrpc.AddHoldInvoiceResp AddHoldInvoice(global::Invoicesrpc.AddHoldInvoiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddHoldInvoice, null, options, request);
      }
      /// <summary>
      ///*
      ///AddHoldInvoice creates a hold invoice. It ties the invoice to the hash
      ///supplied in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Invoicesrpc.AddHoldInvoiceResp> AddHoldInvoiceAsync(global::Invoicesrpc.AddHoldInvoiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddHoldInvoiceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      ///AddHoldInvoice creates a hold invoice. It ties the invoice to the hash
      ///supplied in the request.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Invoicesrpc.AddHoldInvoiceResp> AddHoldInvoiceAsync(global::Invoicesrpc.AddHoldInvoiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddHoldInvoice, null, options, request);
      }
      /// <summary>
      ///*
      ///SettleInvoice settles an accepted invoice. If the invoice is already
      ///settled, this call will succeed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Invoicesrpc.SettleInvoiceResp SettleInvoice(global::Invoicesrpc.SettleInvoiceMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SettleInvoice(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      ///SettleInvoice settles an accepted invoice. If the invoice is already
      ///settled, this call will succeed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Invoicesrpc.SettleInvoiceResp SettleInvoice(global::Invoicesrpc.SettleInvoiceMsg request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SettleInvoice, null, options, request);
      }
      /// <summary>
      ///*
      ///SettleInvoice settles an accepted invoice. If the invoice is already
      ///settled, this call will succeed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Invoicesrpc.SettleInvoiceResp> SettleInvoiceAsync(global::Invoicesrpc.SettleInvoiceMsg request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SettleInvoiceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///*
      ///SettleInvoice settles an accepted invoice. If the invoice is already
      ///settled, this call will succeed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Invoicesrpc.SettleInvoiceResp> SettleInvoiceAsync(global::Invoicesrpc.SettleInvoiceMsg request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SettleInvoice, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override InvoicesClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new InvoicesClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(InvoicesBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SubscribeSingleInvoice, serviceImpl.SubscribeSingleInvoice)
          .AddMethod(__Method_CancelInvoice, serviceImpl.CancelInvoice)
          .AddMethod(__Method_AddHoldInvoice, serviceImpl.AddHoldInvoice)
          .AddMethod(__Method_SettleInvoice, serviceImpl.SettleInvoice).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, InvoicesBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_SubscribeSingleInvoice, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Invoicesrpc.SubscribeSingleInvoiceRequest, global::Lnrpc.Invoice>(serviceImpl.SubscribeSingleInvoice));
      serviceBinder.AddMethod(__Method_CancelInvoice, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Invoicesrpc.CancelInvoiceMsg, global::Invoicesrpc.CancelInvoiceResp>(serviceImpl.CancelInvoice));
      serviceBinder.AddMethod(__Method_AddHoldInvoice, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Invoicesrpc.AddHoldInvoiceRequest, global::Invoicesrpc.AddHoldInvoiceResp>(serviceImpl.AddHoldInvoice));
      serviceBinder.AddMethod(__Method_SettleInvoice, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Invoicesrpc.SettleInvoiceMsg, global::Invoicesrpc.SettleInvoiceResp>(serviceImpl.SettleInvoice));
    }

  }
}
#endregion

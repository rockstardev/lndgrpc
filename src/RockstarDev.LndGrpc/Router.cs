// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: router.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Routerrpc {

  /// <summary>Holder for reflection information generated from router.proto</summary>
  public static partial class RouterReflection {

    #region Descriptor
    /// <summary>File descriptor for router.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RouterReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgxyb3V0ZXIucHJvdG8SCXJvdXRlcnJwYxoJcnBjLnByb3RvIqQEChJTZW5k",
            "UGF5bWVudFJlcXVlc3QSDAoEZGVzdBgBIAEoDBILCgNhbXQYAiABKAMSEAoI",
            "YW10X21zYXQYDCABKAMSFAoMcGF5bWVudF9oYXNoGAMgASgMEhgKEGZpbmFs",
            "X2NsdHZfZGVsdGEYBCABKAUSFwoPcGF5bWVudF9yZXF1ZXN0GAUgASgJEhcK",
            "D3RpbWVvdXRfc2Vjb25kcxgGIAEoBRIVCg1mZWVfbGltaXRfc2F0GAcgASgD",
            "EhYKDmZlZV9saW1pdF9tc2F0GA0gASgDEhwKEG91dGdvaW5nX2NoYW5faWQY",
            "CCABKARCAjABEhcKD2xhc3RfaG9wX3B1YmtleRgOIAEoDBISCgpjbHR2X2xp",
            "bWl0GAkgASgFEjIKC3JvdXRlX2hpbnRzGAogAygLMhAubG5ycGMuUm91dGVI",
            "aW50Ugtyb3V0ZV9oaW50cxJRChNkZXN0X2N1c3RvbV9yZWNvcmRzGAsgAygL",
            "MjQucm91dGVycnBjLlNlbmRQYXltZW50UmVxdWVzdC5EZXN0Q3VzdG9tUmVj",
            "b3Jkc0VudHJ5EhoKEmFsbG93X3NlbGZfcGF5bWVudBgPIAEoCBIoCg1kZXN0",
            "X2ZlYXR1cmVzGBAgAygOMhEubG5ycGMuRmVhdHVyZUJpdBo4ChZEZXN0Q3Vz",
            "dG9tUmVjb3Jkc0VudHJ5EgsKA2tleRgBIAEoBBINCgV2YWx1ZRgCIAEoDDoC",
            "OAEiKwoTVHJhY2tQYXltZW50UmVxdWVzdBIUCgxwYXltZW50X2hhc2gYASAB",
            "KAwiiQEKDVBheW1lbnRTdGF0dXMSJgoFc3RhdGUYASABKA4yFy5yb3V0ZXJy",
            "cGMuUGF5bWVudFN0YXRlEhAKCHByZWltYWdlGAIgASgMEhsKBXJvdXRlGAMg",
            "ASgLMgwubG5ycGMuUm91dGUSIQoFaHRsY3MYBCADKAsyEi5sbnJwYy5IVExD",
            "QXR0ZW1wdCIwCg9Sb3V0ZUZlZVJlcXVlc3QSDAoEZGVzdBgBIAEoDBIPCgdh",
            "bXRfc2F0GAIgASgDIkUKEFJvdXRlRmVlUmVzcG9uc2USGAoQcm91dGluZ19m",
            "ZWVfbXNhdBgBIAEoAxIXCg90aW1lX2xvY2tfZGVsYXkYAiABKAMiRwoSU2Vu",
            "ZFRvUm91dGVSZXF1ZXN0EhQKDHBheW1lbnRfaGFzaBgBIAEoDBIbCgVyb3V0",
            "ZRgCIAEoCzIMLmxucnBjLlJvdXRlIkwKE1NlbmRUb1JvdXRlUmVzcG9uc2US",
            "EAoIcHJlaW1hZ2UYASABKAwSIwoHZmFpbHVyZRgCIAEoCzISLnJvdXRlcnJw",
            "Yy5GYWlsdXJlIqsHCgdGYWlsdXJlEiwKBGNvZGUYASABKA4yHi5yb3V0ZXJy",
            "cGMuRmFpbHVyZS5GYWlsdXJlQ29kZRIwCg5jaGFubmVsX3VwZGF0ZRgDIAEo",
            "CzIYLnJvdXRlcnJwYy5DaGFubmVsVXBkYXRlEhEKCWh0bGNfbXNhdBgEIAEo",
            "BBIVCg1vbmlvbl9zaGFfMjU2GAUgASgMEhMKC2NsdHZfZXhwaXJ5GAYgASgN",
            "Eg0KBWZsYWdzGAcgASgNEhwKFGZhaWx1cmVfc291cmNlX2luZGV4GAggASgN",
            "Eg4KBmhlaWdodBgJIAEoDSK9BQoLRmFpbHVyZUNvZGUSDAoIUkVTRVJWRUQQ",
            "ABIoCiRJTkNPUlJFQ1RfT1JfVU5LTk9XTl9QQVlNRU5UX0RFVEFJTFMQARIc",
            "ChhJTkNPUlJFQ1RfUEFZTUVOVF9BTU9VTlQQAhIfChtGSU5BTF9JTkNPUlJF",
            "Q1RfQ0xUVl9FWFBJUlkQAxIfChtGSU5BTF9JTkNPUlJFQ1RfSFRMQ19BTU9V",
            "TlQQBBIZChVGSU5BTF9FWFBJUllfVE9PX1NPT04QBRIRCg1JTlZBTElEX1JF",
            "QUxNEAYSEwoPRVhQSVJZX1RPT19TT09OEAcSGQoVSU5WQUxJRF9PTklPTl9W",
            "RVJTSU9OEAgSFgoSSU5WQUxJRF9PTklPTl9ITUFDEAkSFQoRSU5WQUxJRF9P",
            "TklPTl9LRVkQChIYChRBTU9VTlRfQkVMT1dfTUlOSU1VTRALEhQKEEZFRV9J",
            "TlNVRkZJQ0lFTlQQDBIZChVJTkNPUlJFQ1RfQ0xUVl9FWFBJUlkQDRIUChBD",
            "SEFOTkVMX0RJU0FCTEVEEA4SHQoZVEVNUE9SQVJZX0NIQU5ORUxfRkFJTFVS",
            "RRAPEiEKHVJFUVVJUkVEX05PREVfRkVBVFVSRV9NSVNTSU5HEBASJAogUkVR",
            "VUlSRURfQ0hBTk5FTF9GRUFUVVJFX01JU1NJTkcQERIVChFVTktOT1dOX05F",
            "WFRfUEVFUhASEhoKFlRFTVBPUkFSWV9OT0RFX0ZBSUxVUkUQExIaChZQRVJN",
            "QU5FTlRfTk9ERV9GQUlMVVJFEBQSHQoZUEVSTUFORU5UX0NIQU5ORUxfRkFJ",
            "TFVSRRAVEhIKDkVYUElSWV9UT09fRkFSEBYSDwoLTVBQX1RJTUVPVVQQFxIU",
            "Cg9VTktOT1dOX0ZBSUxVUkUQ5gcSFwoSVU5SRUFEQUJMRV9GQUlMVVJFEOcH",
            "SgQIAhADIpoCCg1DaGFubmVsVXBkYXRlEhEKCXNpZ25hdHVyZRgBIAEoDBIS",
            "CgpjaGFpbl9oYXNoGAIgASgMEhMKB2NoYW5faWQYAyABKARCAjABEhEKCXRp",
            "bWVzdGFtcBgEIAEoDRIVCg1tZXNzYWdlX2ZsYWdzGAogASgNEhUKDWNoYW5u",
            "ZWxfZmxhZ3MYBSABKA0SFwoPdGltZV9sb2NrX2RlbHRhGAYgASgNEhkKEWh0",
            "bGNfbWluaW11bV9tc2F0GAcgASgEEhAKCGJhc2VfZmVlGAggASgNEhAKCGZl",
            "ZV9yYXRlGAkgASgNEhkKEWh0bGNfbWF4aW11bV9tc2F0GAsgASgEEhkKEWV4",
            "dHJhX29wYXF1ZV9kYXRhGAwgASgMIhwKGlJlc2V0TWlzc2lvbkNvbnRyb2xS",
            "ZXF1ZXN0Ih0KG1Jlc2V0TWlzc2lvbkNvbnRyb2xSZXNwb25zZSIcChpRdWVy",
            "eU1pc3Npb25Db250cm9sUmVxdWVzdCJRChtRdWVyeU1pc3Npb25Db250cm9s",
            "UmVzcG9uc2USLAoFcGFpcnMYAiADKAsyFi5yb3V0ZXJycGMuUGFpckhpc3Rv",
            "cnlSBXBhaXJzSgQIARACIowBCgtQYWlySGlzdG9yeRIcCglub2RlX2Zyb20Y",
            "ASABKAxSCW5vZGVfZnJvbRIYCgdub2RlX3RvGAIgASgMUgdub2RlX3RvEi0K",
            "B2hpc3RvcnkYByABKAsyEy5yb3V0ZXJycGMuUGFpckRhdGFSB2hpc3RvcnlK",
            "BAgDEARKBAgEEAVKBAgFEAZKBAgGEAci8gEKCFBhaXJEYXRhEhwKCWZhaWxf",
            "dGltZRgBIAEoA1IJZmFpbF90aW1lEiIKDGZhaWxfYW10X3NhdBgCIAEoA1IM",
            "ZmFpbF9hbXRfc2F0EiQKDWZhaWxfYW10X21zYXQYBCABKANSDWZhaWxfYW10",
            "X21zYXQSIgoMc3VjY2Vzc190aW1lGAUgASgDUgxzdWNjZXNzX3RpbWUSKAoP",
            "c3VjY2Vzc19hbXRfc2F0GAYgASgDUg9zdWNjZXNzX2FtdF9zYXQSKgoQc3Vj",
            "Y2Vzc19hbXRfbXNhdBgHIAEoA1IQc3VjY2Vzc19hbXRfbXNhdEoECAMQBCJt",
            "ChdRdWVyeVByb2JhYmlsaXR5UmVxdWVzdBIcCglmcm9tX25vZGUYASABKAxS",
            "CWZyb21fbm9kZRIYCgd0b19ub2RlGAIgASgMUgd0b19ub2RlEhoKCGFtdF9t",
            "c2F0GAMgASgDUghhbXRfbXNhdCJrChhRdWVyeVByb2JhYmlsaXR5UmVzcG9u",
            "c2USIAoLcHJvYmFiaWxpdHkYASABKAFSC3Byb2JhYmlsaXR5Ei0KB2hpc3Rv",
            "cnkYAiABKAsyEy5yb3V0ZXJycGMuUGFpckRhdGFSB2hpc3RvcnkicgoRQnVp",
            "bGRSb3V0ZVJlcXVlc3QSEAoIYW10X21zYXQYASABKAMSGAoQZmluYWxfY2x0",
            "dl9kZWx0YRgCIAEoBRIcChBvdXRnb2luZ19jaGFuX2lkGAMgASgEQgIwARIT",
            "Cgtob3BfcHVia2V5cxgEIAMoDCIxChJCdWlsZFJvdXRlUmVzcG9uc2USGwoF",
            "cm91dGUYASABKAsyDC5sbnJwYy5Sb3V0ZSquAQoMUGF5bWVudFN0YXRlEg0K",
            "CUlOX0ZMSUdIVBAAEg0KCVNVQ0NFRURFRBABEhIKDkZBSUxFRF9USU1FT1VU",
            "EAISEwoPRkFJTEVEX05PX1JPVVRFEAMSEAoMRkFJTEVEX0VSUk9SEAQSJAog",
            "RkFJTEVEX0lOQ09SUkVDVF9QQVlNRU5UX0RFVEFJTFMQBRIfChtGQUlMRURf",
            "SU5TVUZGSUNJRU5UX0JBTEFOQ0UQBjKtBQoGUm91dGVyEkgKC1NlbmRQYXlt",
            "ZW50Eh0ucm91dGVycnBjLlNlbmRQYXltZW50UmVxdWVzdBoYLnJvdXRlcnJw",
            "Yy5QYXltZW50U3RhdHVzMAESSgoMVHJhY2tQYXltZW50Eh4ucm91dGVycnBj",
            "LlRyYWNrUGF5bWVudFJlcXVlc3QaGC5yb3V0ZXJycGMuUGF5bWVudFN0YXR1",
            "czABEksKEEVzdGltYXRlUm91dGVGZWUSGi5yb3V0ZXJycGMuUm91dGVGZWVS",
            "ZXF1ZXN0Ghsucm91dGVycnBjLlJvdXRlRmVlUmVzcG9uc2USTAoLU2VuZFRv",
            "Um91dGUSHS5yb3V0ZXJycGMuU2VuZFRvUm91dGVSZXF1ZXN0Gh4ucm91dGVy",
            "cnBjLlNlbmRUb1JvdXRlUmVzcG9uc2USZAoTUmVzZXRNaXNzaW9uQ29udHJv",
            "bBIlLnJvdXRlcnJwYy5SZXNldE1pc3Npb25Db250cm9sUmVxdWVzdBomLnJv",
            "dXRlcnJwYy5SZXNldE1pc3Npb25Db250cm9sUmVzcG9uc2USZAoTUXVlcnlN",
            "aXNzaW9uQ29udHJvbBIlLnJvdXRlcnJwYy5RdWVyeU1pc3Npb25Db250cm9s",
            "UmVxdWVzdBomLnJvdXRlcnJwYy5RdWVyeU1pc3Npb25Db250cm9sUmVzcG9u",
            "c2USWwoQUXVlcnlQcm9iYWJpbGl0eRIiLnJvdXRlcnJwYy5RdWVyeVByb2Jh",
            "YmlsaXR5UmVxdWVzdBojLnJvdXRlcnJwYy5RdWVyeVByb2JhYmlsaXR5UmVz",
            "cG9uc2USSQoKQnVpbGRSb3V0ZRIcLnJvdXRlcnJwYy5CdWlsZFJvdXRlUmVx",
            "dWVzdBodLnJvdXRlcnJwYy5CdWlsZFJvdXRlUmVzcG9uc2VCMVovZ2l0aHVi",
            "LmNvbS9saWdodG5pbmduZXR3b3JrL2xuZC9sbnJwYy9yb3V0ZXJycGNiBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Lnrpc.RpcReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Routerrpc.PaymentState), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Routerrpc.SendPaymentRequest), global::Routerrpc.SendPaymentRequest.Parser, new[]{ "Dest", "Amt", "AmtMsat", "PaymentHash", "FinalCltvDelta", "PaymentRequest", "TimeoutSeconds", "FeeLimitSat", "FeeLimitMsat", "OutgoingChanId", "LastHopPubkey", "CltvLimit", "RouteHints", "DestCustomRecords", "AllowSelfPayment", "DestFeatures" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Routerrpc.TrackPaymentRequest), global::Routerrpc.TrackPaymentRequest.Parser, new[]{ "PaymentHash" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Routerrpc.PaymentStatus), global::Routerrpc.PaymentStatus.Parser, new[]{ "State", "Preimage", "Route", "Htlcs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Routerrpc.RouteFeeRequest), global::Routerrpc.RouteFeeRequest.Parser, new[]{ "Dest", "AmtSat" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Routerrpc.RouteFeeResponse), global::Routerrpc.RouteFeeResponse.Parser, new[]{ "RoutingFeeMsat", "TimeLockDelay" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Routerrpc.SendToRouteRequest), global::Routerrpc.SendToRouteRequest.Parser, new[]{ "PaymentHash", "Route" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Routerrpc.SendToRouteResponse), global::Routerrpc.SendToRouteResponse.Parser, new[]{ "Preimage", "Failure" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Routerrpc.Failure), global::Routerrpc.Failure.Parser, new[]{ "Code", "ChannelUpdate", "HtlcMsat", "OnionSha256", "CltvExpiry", "Flags", "FailureSourceIndex", "Height" }, null, new[]{ typeof(global::Routerrpc.Failure.Types.FailureCode) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Routerrpc.ChannelUpdate), global::Routerrpc.ChannelUpdate.Parser, new[]{ "Signature", "ChainHash", "ChanId", "Timestamp", "MessageFlags", "ChannelFlags", "TimeLockDelta", "HtlcMinimumMsat", "BaseFee", "FeeRate", "HtlcMaximumMsat", "ExtraOpaqueData" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Routerrpc.ResetMissionControlRequest), global::Routerrpc.ResetMissionControlRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Routerrpc.ResetMissionControlResponse), global::Routerrpc.ResetMissionControlResponse.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Routerrpc.QueryMissionControlRequest), global::Routerrpc.QueryMissionControlRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Routerrpc.QueryMissionControlResponse), global::Routerrpc.QueryMissionControlResponse.Parser, new[]{ "Pairs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Routerrpc.PairHistory), global::Routerrpc.PairHistory.Parser, new[]{ "NodeFrom", "NodeTo", "History" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Routerrpc.PairData), global::Routerrpc.PairData.Parser, new[]{ "FailTime", "FailAmtSat", "FailAmtMsat", "SuccessTime", "SuccessAmtSat", "SuccessAmtMsat" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Routerrpc.QueryProbabilityRequest), global::Routerrpc.QueryProbabilityRequest.Parser, new[]{ "FromNode", "ToNode", "AmtMsat" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Routerrpc.QueryProbabilityResponse), global::Routerrpc.QueryProbabilityResponse.Parser, new[]{ "Probability", "History" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Routerrpc.BuildRouteRequest), global::Routerrpc.BuildRouteRequest.Parser, new[]{ "AmtMsat", "FinalCltvDelta", "OutgoingChanId", "HopPubkeys" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Routerrpc.BuildRouteResponse), global::Routerrpc.BuildRouteResponse.Parser, new[]{ "Route" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum PaymentState {
    /// <summary>
    ///*
    ///Payment is still in flight.
    /// </summary>
    [pbr::OriginalName("IN_FLIGHT")] InFlight = 0,
    /// <summary>
    ///*
    ///Payment completed successfully.
    /// </summary>
    [pbr::OriginalName("SUCCEEDED")] Succeeded = 1,
    /// <summary>
    ///*
    ///There are more routes to try, but the payment timeout was exceeded.
    /// </summary>
    [pbr::OriginalName("FAILED_TIMEOUT")] FailedTimeout = 2,
    /// <summary>
    ///*
    ///All possible routes were tried and failed permanently. Or were no
    ///routes to the destination at all.
    /// </summary>
    [pbr::OriginalName("FAILED_NO_ROUTE")] FailedNoRoute = 3,
    /// <summary>
    ///*
    ///A non-recoverable error has occured.
    /// </summary>
    [pbr::OriginalName("FAILED_ERROR")] FailedError = 4,
    /// <summary>
    ///*
    ///Payment details incorrect (unknown hash, invalid amt or
    ///invalid final cltv delta)
    /// </summary>
    [pbr::OriginalName("FAILED_INCORRECT_PAYMENT_DETAILS")] FailedIncorrectPaymentDetails = 5,
    /// <summary>
    ///*
    ///Insufficient local balance.
    /// </summary>
    [pbr::OriginalName("FAILED_INSUFFICIENT_BALANCE")] FailedInsufficientBalance = 6,
  }

  #endregion

  #region Messages
  public sealed partial class SendPaymentRequest : pb::IMessage<SendPaymentRequest> {
    private static readonly pb::MessageParser<SendPaymentRequest> _parser = new pb::MessageParser<SendPaymentRequest>(() => new SendPaymentRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendPaymentRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Routerrpc.RouterReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendPaymentRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendPaymentRequest(SendPaymentRequest other) : this() {
      dest_ = other.dest_;
      amt_ = other.amt_;
      amtMsat_ = other.amtMsat_;
      paymentHash_ = other.paymentHash_;
      finalCltvDelta_ = other.finalCltvDelta_;
      paymentRequest_ = other.paymentRequest_;
      timeoutSeconds_ = other.timeoutSeconds_;
      feeLimitSat_ = other.feeLimitSat_;
      feeLimitMsat_ = other.feeLimitMsat_;
      outgoingChanId_ = other.outgoingChanId_;
      lastHopPubkey_ = other.lastHopPubkey_;
      cltvLimit_ = other.cltvLimit_;
      routeHints_ = other.routeHints_.Clone();
      destCustomRecords_ = other.destCustomRecords_.Clone();
      allowSelfPayment_ = other.allowSelfPayment_;
      destFeatures_ = other.destFeatures_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendPaymentRequest Clone() {
      return new SendPaymentRequest(this);
    }

    /// <summary>Field number for the "dest" field.</summary>
    public const int DestFieldNumber = 1;
    private pb::ByteString dest_ = pb::ByteString.Empty;
    /// <summary>
    //// The identity pubkey of the payment recipient
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Dest {
      get { return dest_; }
      set {
        dest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amt" field.</summary>
    public const int AmtFieldNumber = 2;
    private long amt_;
    /// <summary>
    ///*
    ///Number of satoshis to send.
    ///
    ///The fields amt and amt_msat are mutually exclusive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amt {
      get { return amt_; }
      set {
        amt_ = value;
      }
    }

    /// <summary>Field number for the "amt_msat" field.</summary>
    public const int AmtMsatFieldNumber = 12;
    private long amtMsat_;
    /// <summary>
    ///*
    ///Number of millisatoshis to send.
    ///
    ///The fields amt and amt_msat are mutually exclusive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmtMsat {
      get { return amtMsat_; }
      set {
        amtMsat_ = value;
      }
    }

    /// <summary>Field number for the "payment_hash" field.</summary>
    public const int PaymentHashFieldNumber = 3;
    private pb::ByteString paymentHash_ = pb::ByteString.Empty;
    /// <summary>
    //// The hash to use within the payment's HTLC
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PaymentHash {
      get { return paymentHash_; }
      set {
        paymentHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "final_cltv_delta" field.</summary>
    public const int FinalCltvDeltaFieldNumber = 4;
    private int finalCltvDelta_;
    /// <summary>
    ///*
    ///The CLTV delta from the current height that should be used to set the
    ///timelock for the final hop.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FinalCltvDelta {
      get { return finalCltvDelta_; }
      set {
        finalCltvDelta_ = value;
      }
    }

    /// <summary>Field number for the "payment_request" field.</summary>
    public const int PaymentRequestFieldNumber = 5;
    private string paymentRequest_ = "";
    /// <summary>
    ///*
    ///A bare-bones invoice for a payment within the Lightning Network.  With the
    ///details of the invoice, the sender has all the data necessary to send a
    ///payment to the recipient. The amount in the payment request may be zero. In
    ///that case it is required to set the amt field as well. If no payment request
    ///is specified, the following fields are required: dest, amt and payment_hash.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PaymentRequest {
      get { return paymentRequest_; }
      set {
        paymentRequest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timeout_seconds" field.</summary>
    public const int TimeoutSecondsFieldNumber = 6;
    private int timeoutSeconds_;
    /// <summary>
    ///*
    ///An upper limit on the amount of time we should spend when attempting to
    ///fulfill the payment. This is expressed in seconds. If we cannot make a
    ///successful payment within this time frame, an error will be returned.
    ///This field must be non-zero.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TimeoutSeconds {
      get { return timeoutSeconds_; }
      set {
        timeoutSeconds_ = value;
      }
    }

    /// <summary>Field number for the "fee_limit_sat" field.</summary>
    public const int FeeLimitSatFieldNumber = 7;
    private long feeLimitSat_;
    /// <summary>
    ///*
    ///The maximum number of satoshis that will be paid as a fee of the payment.
    ///If this field is left to the default value of 0, only zero-fee routes will
    ///be considered. This usually means single hop routes connecting directly to
    ///the destination. To send the payment without a fee limit, use max int here.
    ///
    ///The fields fee_limit_sat and fee_limit_msat are mutually exclusive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FeeLimitSat {
      get { return feeLimitSat_; }
      set {
        feeLimitSat_ = value;
      }
    }

    /// <summary>Field number for the "fee_limit_msat" field.</summary>
    public const int FeeLimitMsatFieldNumber = 13;
    private long feeLimitMsat_;
    /// <summary>
    ///*
    ///The maximum number of millisatoshis that will be paid as a fee of the
    ///payment. If this field is left to the default value of 0, only zero-fee
    ///routes will be considered. This usually means single hop routes connecting
    ///directly to the destination. To send the payment without a fee limit, use
    ///max int here.
    ///
    ///The fields fee_limit_sat and fee_limit_msat are mutually exclusive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FeeLimitMsat {
      get { return feeLimitMsat_; }
      set {
        feeLimitMsat_ = value;
      }
    }

    /// <summary>Field number for the "outgoing_chan_id" field.</summary>
    public const int OutgoingChanIdFieldNumber = 8;
    private ulong outgoingChanId_;
    /// <summary>
    ///*
    ///The channel id of the channel that must be taken to the first hop. If zero,
    ///any channel may be used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong OutgoingChanId {
      get { return outgoingChanId_; }
      set {
        outgoingChanId_ = value;
      }
    }

    /// <summary>Field number for the "last_hop_pubkey" field.</summary>
    public const int LastHopPubkeyFieldNumber = 14;
    private pb::ByteString lastHopPubkey_ = pb::ByteString.Empty;
    /// <summary>
    ///*
    ///The pubkey of the last hop of the route. If empty, any hop may be used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString LastHopPubkey {
      get { return lastHopPubkey_; }
      set {
        lastHopPubkey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cltv_limit" field.</summary>
    public const int CltvLimitFieldNumber = 9;
    private int cltvLimit_;
    /// <summary>
    ///* 
    ///An optional maximum total time lock for the route. This should not exceed
    ///lnd's `--max-cltv-expiry` setting. If zero, then the value of
    ///`--max-cltv-expiry` is enforced.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CltvLimit {
      get { return cltvLimit_; }
      set {
        cltvLimit_ = value;
      }
    }

    /// <summary>Field number for the "route_hints" field.</summary>
    public const int RouteHintsFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Lnrpc.RouteHint> _repeated_routeHints_codec
        = pb::FieldCodec.ForMessage(82, global::Lnrpc.RouteHint.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.RouteHint> routeHints_ = new pbc::RepeatedField<global::Lnrpc.RouteHint>();
    /// <summary>
    ///*
    ///Optional route hints to reach the destination through private channels.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.RouteHint> RouteHints {
      get { return routeHints_; }
    }

    /// <summary>Field number for the "dest_custom_records" field.</summary>
    public const int DestCustomRecordsFieldNumber = 11;
    private static readonly pbc::MapField<ulong, pb::ByteString>.Codec _map_destCustomRecords_codec
        = new pbc::MapField<ulong, pb::ByteString>.Codec(pb::FieldCodec.ForUInt64(8, 0UL), pb::FieldCodec.ForBytes(18, pb::ByteString.Empty), 90);
    private readonly pbc::MapField<ulong, pb::ByteString> destCustomRecords_ = new pbc::MapField<ulong, pb::ByteString>();
    /// <summary>
    ///* 
    ///An optional field that can be used to pass an arbitrary set of TLV records
    ///to a peer which understands the new records. This can be used to pass
    ///application specific data during the payment attempt. Record types are
    ///required to be in the custom range >= 65536. When using REST, the values
    ///must be encoded as base64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<ulong, pb::ByteString> DestCustomRecords {
      get { return destCustomRecords_; }
    }

    /// <summary>Field number for the "allow_self_payment" field.</summary>
    public const int AllowSelfPaymentFieldNumber = 15;
    private bool allowSelfPayment_;
    /// <summary>
    //// If set, circular payments to self are permitted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AllowSelfPayment {
      get { return allowSelfPayment_; }
      set {
        allowSelfPayment_ = value;
      }
    }

    /// <summary>Field number for the "dest_features" field.</summary>
    public const int DestFeaturesFieldNumber = 16;
    private static readonly pb::FieldCodec<global::Lnrpc.FeatureBit> _repeated_destFeatures_codec
        = pb::FieldCodec.ForEnum(130, x => (int) x, x => (global::Lnrpc.FeatureBit) x);
    private readonly pbc::RepeatedField<global::Lnrpc.FeatureBit> destFeatures_ = new pbc::RepeatedField<global::Lnrpc.FeatureBit>();
    /// <summary>
    ///*
    ///Features assumed to be supported by the final node. All transitive feature
    ///depdencies must also be set properly. For a given feature bit pair, either
    ///optional or remote may be set, but not both. If this field is nil or empty,
    ///the router will try to load destination features from the graph as a
    ///fallback.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.FeatureBit> DestFeatures {
      get { return destFeatures_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendPaymentRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendPaymentRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Dest != other.Dest) return false;
      if (Amt != other.Amt) return false;
      if (AmtMsat != other.AmtMsat) return false;
      if (PaymentHash != other.PaymentHash) return false;
      if (FinalCltvDelta != other.FinalCltvDelta) return false;
      if (PaymentRequest != other.PaymentRequest) return false;
      if (TimeoutSeconds != other.TimeoutSeconds) return false;
      if (FeeLimitSat != other.FeeLimitSat) return false;
      if (FeeLimitMsat != other.FeeLimitMsat) return false;
      if (OutgoingChanId != other.OutgoingChanId) return false;
      if (LastHopPubkey != other.LastHopPubkey) return false;
      if (CltvLimit != other.CltvLimit) return false;
      if(!routeHints_.Equals(other.routeHints_)) return false;
      if (!DestCustomRecords.Equals(other.DestCustomRecords)) return false;
      if (AllowSelfPayment != other.AllowSelfPayment) return false;
      if(!destFeatures_.Equals(other.destFeatures_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Dest.Length != 0) hash ^= Dest.GetHashCode();
      if (Amt != 0L) hash ^= Amt.GetHashCode();
      if (AmtMsat != 0L) hash ^= AmtMsat.GetHashCode();
      if (PaymentHash.Length != 0) hash ^= PaymentHash.GetHashCode();
      if (FinalCltvDelta != 0) hash ^= FinalCltvDelta.GetHashCode();
      if (PaymentRequest.Length != 0) hash ^= PaymentRequest.GetHashCode();
      if (TimeoutSeconds != 0) hash ^= TimeoutSeconds.GetHashCode();
      if (FeeLimitSat != 0L) hash ^= FeeLimitSat.GetHashCode();
      if (FeeLimitMsat != 0L) hash ^= FeeLimitMsat.GetHashCode();
      if (OutgoingChanId != 0UL) hash ^= OutgoingChanId.GetHashCode();
      if (LastHopPubkey.Length != 0) hash ^= LastHopPubkey.GetHashCode();
      if (CltvLimit != 0) hash ^= CltvLimit.GetHashCode();
      hash ^= routeHints_.GetHashCode();
      hash ^= DestCustomRecords.GetHashCode();
      if (AllowSelfPayment != false) hash ^= AllowSelfPayment.GetHashCode();
      hash ^= destFeatures_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Dest.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Dest);
      }
      if (Amt != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Amt);
      }
      if (PaymentHash.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(PaymentHash);
      }
      if (FinalCltvDelta != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FinalCltvDelta);
      }
      if (PaymentRequest.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(PaymentRequest);
      }
      if (TimeoutSeconds != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(TimeoutSeconds);
      }
      if (FeeLimitSat != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(FeeLimitSat);
      }
      if (OutgoingChanId != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(OutgoingChanId);
      }
      if (CltvLimit != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CltvLimit);
      }
      routeHints_.WriteTo(output, _repeated_routeHints_codec);
      destCustomRecords_.WriteTo(output, _map_destCustomRecords_codec);
      if (AmtMsat != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(AmtMsat);
      }
      if (FeeLimitMsat != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(FeeLimitMsat);
      }
      if (LastHopPubkey.Length != 0) {
        output.WriteRawTag(114);
        output.WriteBytes(LastHopPubkey);
      }
      if (AllowSelfPayment != false) {
        output.WriteRawTag(120);
        output.WriteBool(AllowSelfPayment);
      }
      destFeatures_.WriteTo(output, _repeated_destFeatures_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Dest.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Dest);
      }
      if (Amt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amt);
      }
      if (AmtMsat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AmtMsat);
      }
      if (PaymentHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PaymentHash);
      }
      if (FinalCltvDelta != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FinalCltvDelta);
      }
      if (PaymentRequest.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PaymentRequest);
      }
      if (TimeoutSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeoutSeconds);
      }
      if (FeeLimitSat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FeeLimitSat);
      }
      if (FeeLimitMsat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FeeLimitMsat);
      }
      if (OutgoingChanId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(OutgoingChanId);
      }
      if (LastHopPubkey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(LastHopPubkey);
      }
      if (CltvLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CltvLimit);
      }
      size += routeHints_.CalculateSize(_repeated_routeHints_codec);
      size += destCustomRecords_.CalculateSize(_map_destCustomRecords_codec);
      if (AllowSelfPayment != false) {
        size += 1 + 1;
      }
      size += destFeatures_.CalculateSize(_repeated_destFeatures_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendPaymentRequest other) {
      if (other == null) {
        return;
      }
      if (other.Dest.Length != 0) {
        Dest = other.Dest;
      }
      if (other.Amt != 0L) {
        Amt = other.Amt;
      }
      if (other.AmtMsat != 0L) {
        AmtMsat = other.AmtMsat;
      }
      if (other.PaymentHash.Length != 0) {
        PaymentHash = other.PaymentHash;
      }
      if (other.FinalCltvDelta != 0) {
        FinalCltvDelta = other.FinalCltvDelta;
      }
      if (other.PaymentRequest.Length != 0) {
        PaymentRequest = other.PaymentRequest;
      }
      if (other.TimeoutSeconds != 0) {
        TimeoutSeconds = other.TimeoutSeconds;
      }
      if (other.FeeLimitSat != 0L) {
        FeeLimitSat = other.FeeLimitSat;
      }
      if (other.FeeLimitMsat != 0L) {
        FeeLimitMsat = other.FeeLimitMsat;
      }
      if (other.OutgoingChanId != 0UL) {
        OutgoingChanId = other.OutgoingChanId;
      }
      if (other.LastHopPubkey.Length != 0) {
        LastHopPubkey = other.LastHopPubkey;
      }
      if (other.CltvLimit != 0) {
        CltvLimit = other.CltvLimit;
      }
      routeHints_.Add(other.routeHints_);
      destCustomRecords_.Add(other.destCustomRecords_);
      if (other.AllowSelfPayment != false) {
        AllowSelfPayment = other.AllowSelfPayment;
      }
      destFeatures_.Add(other.destFeatures_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Dest = input.ReadBytes();
            break;
          }
          case 16: {
            Amt = input.ReadInt64();
            break;
          }
          case 26: {
            PaymentHash = input.ReadBytes();
            break;
          }
          case 32: {
            FinalCltvDelta = input.ReadInt32();
            break;
          }
          case 42: {
            PaymentRequest = input.ReadString();
            break;
          }
          case 48: {
            TimeoutSeconds = input.ReadInt32();
            break;
          }
          case 56: {
            FeeLimitSat = input.ReadInt64();
            break;
          }
          case 64: {
            OutgoingChanId = input.ReadUInt64();
            break;
          }
          case 72: {
            CltvLimit = input.ReadInt32();
            break;
          }
          case 82: {
            routeHints_.AddEntriesFrom(input, _repeated_routeHints_codec);
            break;
          }
          case 90: {
            destCustomRecords_.AddEntriesFrom(input, _map_destCustomRecords_codec);
            break;
          }
          case 96: {
            AmtMsat = input.ReadInt64();
            break;
          }
          case 104: {
            FeeLimitMsat = input.ReadInt64();
            break;
          }
          case 114: {
            LastHopPubkey = input.ReadBytes();
            break;
          }
          case 120: {
            AllowSelfPayment = input.ReadBool();
            break;
          }
          case 130:
          case 128: {
            destFeatures_.AddEntriesFrom(input, _repeated_destFeatures_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TrackPaymentRequest : pb::IMessage<TrackPaymentRequest> {
    private static readonly pb::MessageParser<TrackPaymentRequest> _parser = new pb::MessageParser<TrackPaymentRequest>(() => new TrackPaymentRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TrackPaymentRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Routerrpc.RouterReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackPaymentRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackPaymentRequest(TrackPaymentRequest other) : this() {
      paymentHash_ = other.paymentHash_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TrackPaymentRequest Clone() {
      return new TrackPaymentRequest(this);
    }

    /// <summary>Field number for the "payment_hash" field.</summary>
    public const int PaymentHashFieldNumber = 1;
    private pb::ByteString paymentHash_ = pb::ByteString.Empty;
    /// <summary>
    //// The hash of the payment to look up.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PaymentHash {
      get { return paymentHash_; }
      set {
        paymentHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TrackPaymentRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TrackPaymentRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PaymentHash != other.PaymentHash) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PaymentHash.Length != 0) hash ^= PaymentHash.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PaymentHash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(PaymentHash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PaymentHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PaymentHash);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TrackPaymentRequest other) {
      if (other == null) {
        return;
      }
      if (other.PaymentHash.Length != 0) {
        PaymentHash = other.PaymentHash;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PaymentHash = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PaymentStatus : pb::IMessage<PaymentStatus> {
    private static readonly pb::MessageParser<PaymentStatus> _parser = new pb::MessageParser<PaymentStatus>(() => new PaymentStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PaymentStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Routerrpc.RouterReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaymentStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaymentStatus(PaymentStatus other) : this() {
      state_ = other.state_;
      preimage_ = other.preimage_;
      route_ = other.route_ != null ? other.route_.Clone() : null;
      htlcs_ = other.htlcs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaymentStatus Clone() {
      return new PaymentStatus(this);
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private global::Routerrpc.PaymentState state_ = global::Routerrpc.PaymentState.InFlight;
    /// <summary>
    //// Current state the payment is in.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Routerrpc.PaymentState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "preimage" field.</summary>
    public const int PreimageFieldNumber = 2;
    private pb::ByteString preimage_ = pb::ByteString.Empty;
    /// <summary>
    ///*
    ///The pre-image of the payment when state is SUCCEEDED.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Preimage {
      get { return preimage_; }
      set {
        preimage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "route" field.</summary>
    public const int RouteFieldNumber = 3;
    private global::Lnrpc.Route route_;
    /// <summary>
    ///*
    ///The taken route when state is SUCCEEDED.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.Route Route {
      get { return route_; }
      set {
        route_ = value;
      }
    }

    /// <summary>Field number for the "htlcs" field.</summary>
    public const int HtlcsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Lnrpc.HTLCAttempt> _repeated_htlcs_codec
        = pb::FieldCodec.ForMessage(34, global::Lnrpc.HTLCAttempt.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.HTLCAttempt> htlcs_ = new pbc::RepeatedField<global::Lnrpc.HTLCAttempt>();
    /// <summary>
    ///*
    ///The HTLCs made in attempt to settle the payment [EXPERIMENTAL].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.HTLCAttempt> Htlcs {
      get { return htlcs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PaymentStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PaymentStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (State != other.State) return false;
      if (Preimage != other.Preimage) return false;
      if (!object.Equals(Route, other.Route)) return false;
      if(!htlcs_.Equals(other.htlcs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (State != global::Routerrpc.PaymentState.InFlight) hash ^= State.GetHashCode();
      if (Preimage.Length != 0) hash ^= Preimage.GetHashCode();
      if (route_ != null) hash ^= Route.GetHashCode();
      hash ^= htlcs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (State != global::Routerrpc.PaymentState.InFlight) {
        output.WriteRawTag(8);
        output.WriteEnum((int) State);
      }
      if (Preimage.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Preimage);
      }
      if (route_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Route);
      }
      htlcs_.WriteTo(output, _repeated_htlcs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (State != global::Routerrpc.PaymentState.InFlight) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (Preimage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Preimage);
      }
      if (route_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Route);
      }
      size += htlcs_.CalculateSize(_repeated_htlcs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PaymentStatus other) {
      if (other == null) {
        return;
      }
      if (other.State != global::Routerrpc.PaymentState.InFlight) {
        State = other.State;
      }
      if (other.Preimage.Length != 0) {
        Preimage = other.Preimage;
      }
      if (other.route_ != null) {
        if (route_ == null) {
          Route = new global::Lnrpc.Route();
        }
        Route.MergeFrom(other.Route);
      }
      htlcs_.Add(other.htlcs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            State = (global::Routerrpc.PaymentState) input.ReadEnum();
            break;
          }
          case 18: {
            Preimage = input.ReadBytes();
            break;
          }
          case 26: {
            if (route_ == null) {
              Route = new global::Lnrpc.Route();
            }
            input.ReadMessage(Route);
            break;
          }
          case 34: {
            htlcs_.AddEntriesFrom(input, _repeated_htlcs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RouteFeeRequest : pb::IMessage<RouteFeeRequest> {
    private static readonly pb::MessageParser<RouteFeeRequest> _parser = new pb::MessageParser<RouteFeeRequest>(() => new RouteFeeRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RouteFeeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Routerrpc.RouterReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RouteFeeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RouteFeeRequest(RouteFeeRequest other) : this() {
      dest_ = other.dest_;
      amtSat_ = other.amtSat_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RouteFeeRequest Clone() {
      return new RouteFeeRequest(this);
    }

    /// <summary>Field number for the "dest" field.</summary>
    public const int DestFieldNumber = 1;
    private pb::ByteString dest_ = pb::ByteString.Empty;
    /// <summary>
    ///*
    ///The destination once wishes to obtain a routing fee quote to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Dest {
      get { return dest_; }
      set {
        dest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amt_sat" field.</summary>
    public const int AmtSatFieldNumber = 2;
    private long amtSat_;
    /// <summary>
    ///*
    ///The amount one wishes to send to the target destination.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmtSat {
      get { return amtSat_; }
      set {
        amtSat_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RouteFeeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RouteFeeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Dest != other.Dest) return false;
      if (AmtSat != other.AmtSat) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Dest.Length != 0) hash ^= Dest.GetHashCode();
      if (AmtSat != 0L) hash ^= AmtSat.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Dest.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Dest);
      }
      if (AmtSat != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(AmtSat);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Dest.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Dest);
      }
      if (AmtSat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AmtSat);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RouteFeeRequest other) {
      if (other == null) {
        return;
      }
      if (other.Dest.Length != 0) {
        Dest = other.Dest;
      }
      if (other.AmtSat != 0L) {
        AmtSat = other.AmtSat;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Dest = input.ReadBytes();
            break;
          }
          case 16: {
            AmtSat = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RouteFeeResponse : pb::IMessage<RouteFeeResponse> {
    private static readonly pb::MessageParser<RouteFeeResponse> _parser = new pb::MessageParser<RouteFeeResponse>(() => new RouteFeeResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RouteFeeResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Routerrpc.RouterReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RouteFeeResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RouteFeeResponse(RouteFeeResponse other) : this() {
      routingFeeMsat_ = other.routingFeeMsat_;
      timeLockDelay_ = other.timeLockDelay_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RouteFeeResponse Clone() {
      return new RouteFeeResponse(this);
    }

    /// <summary>Field number for the "routing_fee_msat" field.</summary>
    public const int RoutingFeeMsatFieldNumber = 1;
    private long routingFeeMsat_;
    /// <summary>
    ///*
    ///A lower bound of the estimated fee to the target destination within the
    ///network, expressed in milli-satoshis.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoutingFeeMsat {
      get { return routingFeeMsat_; }
      set {
        routingFeeMsat_ = value;
      }
    }

    /// <summary>Field number for the "time_lock_delay" field.</summary>
    public const int TimeLockDelayFieldNumber = 2;
    private long timeLockDelay_;
    /// <summary>
    ///*
    ///An estimate of the worst case time delay that can occur. Note that callers
    ///will still need to factor in the final CLTV delta of the last hop into this
    ///value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimeLockDelay {
      get { return timeLockDelay_; }
      set {
        timeLockDelay_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RouteFeeResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RouteFeeResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoutingFeeMsat != other.RoutingFeeMsat) return false;
      if (TimeLockDelay != other.TimeLockDelay) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoutingFeeMsat != 0L) hash ^= RoutingFeeMsat.GetHashCode();
      if (TimeLockDelay != 0L) hash ^= TimeLockDelay.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoutingFeeMsat != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoutingFeeMsat);
      }
      if (TimeLockDelay != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TimeLockDelay);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoutingFeeMsat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoutingFeeMsat);
      }
      if (TimeLockDelay != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeLockDelay);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RouteFeeResponse other) {
      if (other == null) {
        return;
      }
      if (other.RoutingFeeMsat != 0L) {
        RoutingFeeMsat = other.RoutingFeeMsat;
      }
      if (other.TimeLockDelay != 0L) {
        TimeLockDelay = other.TimeLockDelay;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoutingFeeMsat = input.ReadInt64();
            break;
          }
          case 16: {
            TimeLockDelay = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SendToRouteRequest : pb::IMessage<SendToRouteRequest> {
    private static readonly pb::MessageParser<SendToRouteRequest> _parser = new pb::MessageParser<SendToRouteRequest>(() => new SendToRouteRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendToRouteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Routerrpc.RouterReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToRouteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToRouteRequest(SendToRouteRequest other) : this() {
      paymentHash_ = other.paymentHash_;
      route_ = other.route_ != null ? other.route_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToRouteRequest Clone() {
      return new SendToRouteRequest(this);
    }

    /// <summary>Field number for the "payment_hash" field.</summary>
    public const int PaymentHashFieldNumber = 1;
    private pb::ByteString paymentHash_ = pb::ByteString.Empty;
    /// <summary>
    //// The payment hash to use for the HTLC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PaymentHash {
      get { return paymentHash_; }
      set {
        paymentHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "route" field.</summary>
    public const int RouteFieldNumber = 2;
    private global::Lnrpc.Route route_;
    /// <summary>
    //// Route that should be used to attempt to complete the payment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.Route Route {
      get { return route_; }
      set {
        route_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendToRouteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendToRouteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PaymentHash != other.PaymentHash) return false;
      if (!object.Equals(Route, other.Route)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PaymentHash.Length != 0) hash ^= PaymentHash.GetHashCode();
      if (route_ != null) hash ^= Route.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PaymentHash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(PaymentHash);
      }
      if (route_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Route);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PaymentHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PaymentHash);
      }
      if (route_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Route);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendToRouteRequest other) {
      if (other == null) {
        return;
      }
      if (other.PaymentHash.Length != 0) {
        PaymentHash = other.PaymentHash;
      }
      if (other.route_ != null) {
        if (route_ == null) {
          Route = new global::Lnrpc.Route();
        }
        Route.MergeFrom(other.Route);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PaymentHash = input.ReadBytes();
            break;
          }
          case 18: {
            if (route_ == null) {
              Route = new global::Lnrpc.Route();
            }
            input.ReadMessage(Route);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SendToRouteResponse : pb::IMessage<SendToRouteResponse> {
    private static readonly pb::MessageParser<SendToRouteResponse> _parser = new pb::MessageParser<SendToRouteResponse>(() => new SendToRouteResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendToRouteResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Routerrpc.RouterReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToRouteResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToRouteResponse(SendToRouteResponse other) : this() {
      preimage_ = other.preimage_;
      failure_ = other.failure_ != null ? other.failure_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToRouteResponse Clone() {
      return new SendToRouteResponse(this);
    }

    /// <summary>Field number for the "preimage" field.</summary>
    public const int PreimageFieldNumber = 1;
    private pb::ByteString preimage_ = pb::ByteString.Empty;
    /// <summary>
    //// The preimage obtained by making the payment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Preimage {
      get { return preimage_; }
      set {
        preimage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "failure" field.</summary>
    public const int FailureFieldNumber = 2;
    private global::Routerrpc.Failure failure_;
    /// <summary>
    //// The failure message in case the payment failed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Routerrpc.Failure Failure {
      get { return failure_; }
      set {
        failure_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendToRouteResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendToRouteResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Preimage != other.Preimage) return false;
      if (!object.Equals(Failure, other.Failure)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Preimage.Length != 0) hash ^= Preimage.GetHashCode();
      if (failure_ != null) hash ^= Failure.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Preimage.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Preimage);
      }
      if (failure_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Failure);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Preimage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Preimage);
      }
      if (failure_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Failure);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendToRouteResponse other) {
      if (other == null) {
        return;
      }
      if (other.Preimage.Length != 0) {
        Preimage = other.Preimage;
      }
      if (other.failure_ != null) {
        if (failure_ == null) {
          Failure = new global::Routerrpc.Failure();
        }
        Failure.MergeFrom(other.Failure);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Preimage = input.ReadBytes();
            break;
          }
          case 18: {
            if (failure_ == null) {
              Failure = new global::Routerrpc.Failure();
            }
            input.ReadMessage(Failure);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Failure : pb::IMessage<Failure> {
    private static readonly pb::MessageParser<Failure> _parser = new pb::MessageParser<Failure>(() => new Failure());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Failure> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Routerrpc.RouterReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Failure() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Failure(Failure other) : this() {
      code_ = other.code_;
      channelUpdate_ = other.channelUpdate_ != null ? other.channelUpdate_.Clone() : null;
      htlcMsat_ = other.htlcMsat_;
      onionSha256_ = other.onionSha256_;
      cltvExpiry_ = other.cltvExpiry_;
      flags_ = other.flags_;
      failureSourceIndex_ = other.failureSourceIndex_;
      height_ = other.height_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Failure Clone() {
      return new Failure(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Routerrpc.Failure.Types.FailureCode code_ = global::Routerrpc.Failure.Types.FailureCode.Reserved;
    /// <summary>
    //// Failure code as defined in the Lightning spec
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Routerrpc.Failure.Types.FailureCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "channel_update" field.</summary>
    public const int ChannelUpdateFieldNumber = 3;
    private global::Routerrpc.ChannelUpdate channelUpdate_;
    /// <summary>
    //// An optional channel update message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Routerrpc.ChannelUpdate ChannelUpdate {
      get { return channelUpdate_; }
      set {
        channelUpdate_ = value;
      }
    }

    /// <summary>Field number for the "htlc_msat" field.</summary>
    public const int HtlcMsatFieldNumber = 4;
    private ulong htlcMsat_;
    /// <summary>
    //// A failure type-dependent htlc value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong HtlcMsat {
      get { return htlcMsat_; }
      set {
        htlcMsat_ = value;
      }
    }

    /// <summary>Field number for the "onion_sha_256" field.</summary>
    public const int OnionSha256FieldNumber = 5;
    private pb::ByteString onionSha256_ = pb::ByteString.Empty;
    /// <summary>
    //// The sha256 sum of the onion payload.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OnionSha256 {
      get { return onionSha256_; }
      set {
        onionSha256_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cltv_expiry" field.</summary>
    public const int CltvExpiryFieldNumber = 6;
    private uint cltvExpiry_;
    /// <summary>
    //// A failure type-dependent cltv expiry value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CltvExpiry {
      get { return cltvExpiry_; }
      set {
        cltvExpiry_ = value;
      }
    }

    /// <summary>Field number for the "flags" field.</summary>
    public const int FlagsFieldNumber = 7;
    private uint flags_;
    /// <summary>
    //// A failure type-dependent flags value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Flags {
      get { return flags_; }
      set {
        flags_ = value;
      }
    }

    /// <summary>Field number for the "failure_source_index" field.</summary>
    public const int FailureSourceIndexFieldNumber = 8;
    private uint failureSourceIndex_;
    /// <summary>
    ///*
    ///The position in the path of the intermediate or final node that generated
    ///the failure message. Position zero is the sender node.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FailureSourceIndex {
      get { return failureSourceIndex_; }
      set {
        failureSourceIndex_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 9;
    private uint height_;
    /// <summary>
    //// A failure type-dependent block height.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Failure);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Failure other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (!object.Equals(ChannelUpdate, other.ChannelUpdate)) return false;
      if (HtlcMsat != other.HtlcMsat) return false;
      if (OnionSha256 != other.OnionSha256) return false;
      if (CltvExpiry != other.CltvExpiry) return false;
      if (Flags != other.Flags) return false;
      if (FailureSourceIndex != other.FailureSourceIndex) return false;
      if (Height != other.Height) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != global::Routerrpc.Failure.Types.FailureCode.Reserved) hash ^= Code.GetHashCode();
      if (channelUpdate_ != null) hash ^= ChannelUpdate.GetHashCode();
      if (HtlcMsat != 0UL) hash ^= HtlcMsat.GetHashCode();
      if (OnionSha256.Length != 0) hash ^= OnionSha256.GetHashCode();
      if (CltvExpiry != 0) hash ^= CltvExpiry.GetHashCode();
      if (Flags != 0) hash ^= Flags.GetHashCode();
      if (FailureSourceIndex != 0) hash ^= FailureSourceIndex.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != global::Routerrpc.Failure.Types.FailureCode.Reserved) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (channelUpdate_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ChannelUpdate);
      }
      if (HtlcMsat != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(HtlcMsat);
      }
      if (OnionSha256.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(OnionSha256);
      }
      if (CltvExpiry != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(CltvExpiry);
      }
      if (Flags != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Flags);
      }
      if (FailureSourceIndex != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(FailureSourceIndex);
      }
      if (Height != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Height);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != global::Routerrpc.Failure.Types.FailureCode.Reserved) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (channelUpdate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChannelUpdate);
      }
      if (HtlcMsat != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(HtlcMsat);
      }
      if (OnionSha256.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(OnionSha256);
      }
      if (CltvExpiry != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CltvExpiry);
      }
      if (Flags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Flags);
      }
      if (FailureSourceIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FailureSourceIndex);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Height);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Failure other) {
      if (other == null) {
        return;
      }
      if (other.Code != global::Routerrpc.Failure.Types.FailureCode.Reserved) {
        Code = other.Code;
      }
      if (other.channelUpdate_ != null) {
        if (channelUpdate_ == null) {
          ChannelUpdate = new global::Routerrpc.ChannelUpdate();
        }
        ChannelUpdate.MergeFrom(other.ChannelUpdate);
      }
      if (other.HtlcMsat != 0UL) {
        HtlcMsat = other.HtlcMsat;
      }
      if (other.OnionSha256.Length != 0) {
        OnionSha256 = other.OnionSha256;
      }
      if (other.CltvExpiry != 0) {
        CltvExpiry = other.CltvExpiry;
      }
      if (other.Flags != 0) {
        Flags = other.Flags;
      }
      if (other.FailureSourceIndex != 0) {
        FailureSourceIndex = other.FailureSourceIndex;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = (global::Routerrpc.Failure.Types.FailureCode) input.ReadEnum();
            break;
          }
          case 26: {
            if (channelUpdate_ == null) {
              ChannelUpdate = new global::Routerrpc.ChannelUpdate();
            }
            input.ReadMessage(ChannelUpdate);
            break;
          }
          case 32: {
            HtlcMsat = input.ReadUInt64();
            break;
          }
          case 42: {
            OnionSha256 = input.ReadBytes();
            break;
          }
          case 48: {
            CltvExpiry = input.ReadUInt32();
            break;
          }
          case 56: {
            Flags = input.ReadUInt32();
            break;
          }
          case 64: {
            FailureSourceIndex = input.ReadUInt32();
            break;
          }
          case 72: {
            Height = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Failure message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum FailureCode {
        /// <summary>
        ///*
        ///The numbers assigned in this enumeration match the failure codes as
        ///defined in BOLT #4. Because protobuf 3 requires enums to start with 0,
        ///a RESERVED value is added.
        /// </summary>
        [pbr::OriginalName("RESERVED")] Reserved = 0,
        [pbr::OriginalName("INCORRECT_OR_UNKNOWN_PAYMENT_DETAILS")] IncorrectOrUnknownPaymentDetails = 1,
        [pbr::OriginalName("INCORRECT_PAYMENT_AMOUNT")] IncorrectPaymentAmount = 2,
        [pbr::OriginalName("FINAL_INCORRECT_CLTV_EXPIRY")] FinalIncorrectCltvExpiry = 3,
        [pbr::OriginalName("FINAL_INCORRECT_HTLC_AMOUNT")] FinalIncorrectHtlcAmount = 4,
        [pbr::OriginalName("FINAL_EXPIRY_TOO_SOON")] FinalExpiryTooSoon = 5,
        [pbr::OriginalName("INVALID_REALM")] InvalidRealm = 6,
        [pbr::OriginalName("EXPIRY_TOO_SOON")] ExpiryTooSoon = 7,
        [pbr::OriginalName("INVALID_ONION_VERSION")] InvalidOnionVersion = 8,
        [pbr::OriginalName("INVALID_ONION_HMAC")] InvalidOnionHmac = 9,
        [pbr::OriginalName("INVALID_ONION_KEY")] InvalidOnionKey = 10,
        [pbr::OriginalName("AMOUNT_BELOW_MINIMUM")] AmountBelowMinimum = 11,
        [pbr::OriginalName("FEE_INSUFFICIENT")] FeeInsufficient = 12,
        [pbr::OriginalName("INCORRECT_CLTV_EXPIRY")] IncorrectCltvExpiry = 13,
        [pbr::OriginalName("CHANNEL_DISABLED")] ChannelDisabled = 14,
        [pbr::OriginalName("TEMPORARY_CHANNEL_FAILURE")] TemporaryChannelFailure = 15,
        [pbr::OriginalName("REQUIRED_NODE_FEATURE_MISSING")] RequiredNodeFeatureMissing = 16,
        [pbr::OriginalName("REQUIRED_CHANNEL_FEATURE_MISSING")] RequiredChannelFeatureMissing = 17,
        [pbr::OriginalName("UNKNOWN_NEXT_PEER")] UnknownNextPeer = 18,
        [pbr::OriginalName("TEMPORARY_NODE_FAILURE")] TemporaryNodeFailure = 19,
        [pbr::OriginalName("PERMANENT_NODE_FAILURE")] PermanentNodeFailure = 20,
        [pbr::OriginalName("PERMANENT_CHANNEL_FAILURE")] PermanentChannelFailure = 21,
        [pbr::OriginalName("EXPIRY_TOO_FAR")] ExpiryTooFar = 22,
        [pbr::OriginalName("MPP_TIMEOUT")] MppTimeout = 23,
        /// <summary>
        ///*
        ///The error source is known, but the failure itself couldn't be decoded.
        /// </summary>
        [pbr::OriginalName("UNKNOWN_FAILURE")] UnknownFailure = 998,
        /// <summary>
        ///*
        ///An unreadable failure result is returned if the received failure message
        ///cannot be decrypted. In that case the error source is unknown.
        /// </summary>
        [pbr::OriginalName("UNREADABLE_FAILURE")] UnreadableFailure = 999,
      }

    }
    #endregion

  }

  public sealed partial class ChannelUpdate : pb::IMessage<ChannelUpdate> {
    private static readonly pb::MessageParser<ChannelUpdate> _parser = new pb::MessageParser<ChannelUpdate>(() => new ChannelUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Routerrpc.RouterReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelUpdate(ChannelUpdate other) : this() {
      signature_ = other.signature_;
      chainHash_ = other.chainHash_;
      chanId_ = other.chanId_;
      timestamp_ = other.timestamp_;
      messageFlags_ = other.messageFlags_;
      channelFlags_ = other.channelFlags_;
      timeLockDelta_ = other.timeLockDelta_;
      htlcMinimumMsat_ = other.htlcMinimumMsat_;
      baseFee_ = other.baseFee_;
      feeRate_ = other.feeRate_;
      htlcMaximumMsat_ = other.htlcMaximumMsat_;
      extraOpaqueData_ = other.extraOpaqueData_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelUpdate Clone() {
      return new ChannelUpdate(this);
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 1;
    private pb::ByteString signature_ = pb::ByteString.Empty;
    /// <summary>
    ///*
    ///The signature that validates the announced data and proves the ownership
    ///of node id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Signature {
      get { return signature_; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "chain_hash" field.</summary>
    public const int ChainHashFieldNumber = 2;
    private pb::ByteString chainHash_ = pb::ByteString.Empty;
    /// <summary>
    ///*
    ///The target chain that this channel was opened within. This value
    ///should be the genesis hash of the target chain. Along with the short
    ///channel ID, this uniquely identifies the channel globally in a
    ///blockchain.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ChainHash {
      get { return chainHash_; }
      set {
        chainHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "chan_id" field.</summary>
    public const int ChanIdFieldNumber = 3;
    private ulong chanId_;
    /// <summary>
    ///*
    ///The unique description of the funding transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ChanId {
      get { return chanId_; }
      set {
        chanId_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 4;
    private uint timestamp_;
    /// <summary>
    ///*
    ///A timestamp that allows ordering in the case of multiple announcements.
    ///We should ignore the message if timestamp is not greater than the
    ///last-received.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "message_flags" field.</summary>
    public const int MessageFlagsFieldNumber = 10;
    private uint messageFlags_;
    /// <summary>
    ///*
    ///The bitfield that describes whether optional fields are present in this
    ///update. Currently, the least-significant bit must be set to 1 if the
    ///optional field MaxHtlc is present.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MessageFlags {
      get { return messageFlags_; }
      set {
        messageFlags_ = value;
      }
    }

    /// <summary>Field number for the "channel_flags" field.</summary>
    public const int ChannelFlagsFieldNumber = 5;
    private uint channelFlags_;
    /// <summary>
    ///*
    ///The bitfield that describes additional meta-data concerning how the
    ///update is to be interpreted. Currently, the least-significant bit must be
    ///set to 0 if the creating node corresponds to the first node in the
    ///previously sent channel announcement and 1 otherwise. If the second bit
    ///is set, then the channel is set to be disabled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChannelFlags {
      get { return channelFlags_; }
      set {
        channelFlags_ = value;
      }
    }

    /// <summary>Field number for the "time_lock_delta" field.</summary>
    public const int TimeLockDeltaFieldNumber = 6;
    private uint timeLockDelta_;
    /// <summary>
    ///*
    ///The minimum number of blocks this node requires to be added to the expiry
    ///of HTLCs. This is a security parameter determined by the node operator.
    ///This value represents the required gap between the time locks of the
    ///incoming and outgoing HTLC's set to this node.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeLockDelta {
      get { return timeLockDelta_; }
      set {
        timeLockDelta_ = value;
      }
    }

    /// <summary>Field number for the "htlc_minimum_msat" field.</summary>
    public const int HtlcMinimumMsatFieldNumber = 7;
    private ulong htlcMinimumMsat_;
    /// <summary>
    ///*
    ///The minimum HTLC value which will be accepted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong HtlcMinimumMsat {
      get { return htlcMinimumMsat_; }
      set {
        htlcMinimumMsat_ = value;
      }
    }

    /// <summary>Field number for the "base_fee" field.</summary>
    public const int BaseFeeFieldNumber = 8;
    private uint baseFee_;
    /// <summary>
    ///*
    ///The base fee that must be used for incoming HTLC's to this particular
    ///channel. This value will be tacked onto the required for a payment
    ///independent of the size of the payment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BaseFee {
      get { return baseFee_; }
      set {
        baseFee_ = value;
      }
    }

    /// <summary>Field number for the "fee_rate" field.</summary>
    public const int FeeRateFieldNumber = 9;
    private uint feeRate_;
    /// <summary>
    ///*
    ///The fee rate that will be charged per millionth of a satoshi.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FeeRate {
      get { return feeRate_; }
      set {
        feeRate_ = value;
      }
    }

    /// <summary>Field number for the "htlc_maximum_msat" field.</summary>
    public const int HtlcMaximumMsatFieldNumber = 11;
    private ulong htlcMaximumMsat_;
    /// <summary>
    ///*
    ///The maximum HTLC value which will be accepted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong HtlcMaximumMsat {
      get { return htlcMaximumMsat_; }
      set {
        htlcMaximumMsat_ = value;
      }
    }

    /// <summary>Field number for the "extra_opaque_data" field.</summary>
    public const int ExtraOpaqueDataFieldNumber = 12;
    private pb::ByteString extraOpaqueData_ = pb::ByteString.Empty;
    /// <summary>
    ///*
    ///The set of data that was appended to this message, some of which we may
    ///not actually know how to iterate or parse. By holding onto this data, we
    ///ensure that we're able to properly validate the set of signatures that
    ///cover these new fields, and ensure we're able to make upgrades to the
    ///network in a forwards compatible manner.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ExtraOpaqueData {
      get { return extraOpaqueData_; }
      set {
        extraOpaqueData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Signature != other.Signature) return false;
      if (ChainHash != other.ChainHash) return false;
      if (ChanId != other.ChanId) return false;
      if (Timestamp != other.Timestamp) return false;
      if (MessageFlags != other.MessageFlags) return false;
      if (ChannelFlags != other.ChannelFlags) return false;
      if (TimeLockDelta != other.TimeLockDelta) return false;
      if (HtlcMinimumMsat != other.HtlcMinimumMsat) return false;
      if (BaseFee != other.BaseFee) return false;
      if (FeeRate != other.FeeRate) return false;
      if (HtlcMaximumMsat != other.HtlcMaximumMsat) return false;
      if (ExtraOpaqueData != other.ExtraOpaqueData) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Signature.Length != 0) hash ^= Signature.GetHashCode();
      if (ChainHash.Length != 0) hash ^= ChainHash.GetHashCode();
      if (ChanId != 0UL) hash ^= ChanId.GetHashCode();
      if (Timestamp != 0) hash ^= Timestamp.GetHashCode();
      if (MessageFlags != 0) hash ^= MessageFlags.GetHashCode();
      if (ChannelFlags != 0) hash ^= ChannelFlags.GetHashCode();
      if (TimeLockDelta != 0) hash ^= TimeLockDelta.GetHashCode();
      if (HtlcMinimumMsat != 0UL) hash ^= HtlcMinimumMsat.GetHashCode();
      if (BaseFee != 0) hash ^= BaseFee.GetHashCode();
      if (FeeRate != 0) hash ^= FeeRate.GetHashCode();
      if (HtlcMaximumMsat != 0UL) hash ^= HtlcMaximumMsat.GetHashCode();
      if (ExtraOpaqueData.Length != 0) hash ^= ExtraOpaqueData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Signature.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Signature);
      }
      if (ChainHash.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(ChainHash);
      }
      if (ChanId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(ChanId);
      }
      if (Timestamp != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Timestamp);
      }
      if (ChannelFlags != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(ChannelFlags);
      }
      if (TimeLockDelta != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(TimeLockDelta);
      }
      if (HtlcMinimumMsat != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(HtlcMinimumMsat);
      }
      if (BaseFee != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(BaseFee);
      }
      if (FeeRate != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(FeeRate);
      }
      if (MessageFlags != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(MessageFlags);
      }
      if (HtlcMaximumMsat != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(HtlcMaximumMsat);
      }
      if (ExtraOpaqueData.Length != 0) {
        output.WriteRawTag(98);
        output.WriteBytes(ExtraOpaqueData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Signature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Signature);
      }
      if (ChainHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ChainHash);
      }
      if (ChanId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ChanId);
      }
      if (Timestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timestamp);
      }
      if (MessageFlags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MessageFlags);
      }
      if (ChannelFlags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChannelFlags);
      }
      if (TimeLockDelta != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeLockDelta);
      }
      if (HtlcMinimumMsat != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(HtlcMinimumMsat);
      }
      if (BaseFee != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BaseFee);
      }
      if (FeeRate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FeeRate);
      }
      if (HtlcMaximumMsat != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(HtlcMaximumMsat);
      }
      if (ExtraOpaqueData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ExtraOpaqueData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelUpdate other) {
      if (other == null) {
        return;
      }
      if (other.Signature.Length != 0) {
        Signature = other.Signature;
      }
      if (other.ChainHash.Length != 0) {
        ChainHash = other.ChainHash;
      }
      if (other.ChanId != 0UL) {
        ChanId = other.ChanId;
      }
      if (other.Timestamp != 0) {
        Timestamp = other.Timestamp;
      }
      if (other.MessageFlags != 0) {
        MessageFlags = other.MessageFlags;
      }
      if (other.ChannelFlags != 0) {
        ChannelFlags = other.ChannelFlags;
      }
      if (other.TimeLockDelta != 0) {
        TimeLockDelta = other.TimeLockDelta;
      }
      if (other.HtlcMinimumMsat != 0UL) {
        HtlcMinimumMsat = other.HtlcMinimumMsat;
      }
      if (other.BaseFee != 0) {
        BaseFee = other.BaseFee;
      }
      if (other.FeeRate != 0) {
        FeeRate = other.FeeRate;
      }
      if (other.HtlcMaximumMsat != 0UL) {
        HtlcMaximumMsat = other.HtlcMaximumMsat;
      }
      if (other.ExtraOpaqueData.Length != 0) {
        ExtraOpaqueData = other.ExtraOpaqueData;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Signature = input.ReadBytes();
            break;
          }
          case 18: {
            ChainHash = input.ReadBytes();
            break;
          }
          case 24: {
            ChanId = input.ReadUInt64();
            break;
          }
          case 32: {
            Timestamp = input.ReadUInt32();
            break;
          }
          case 40: {
            ChannelFlags = input.ReadUInt32();
            break;
          }
          case 48: {
            TimeLockDelta = input.ReadUInt32();
            break;
          }
          case 56: {
            HtlcMinimumMsat = input.ReadUInt64();
            break;
          }
          case 64: {
            BaseFee = input.ReadUInt32();
            break;
          }
          case 72: {
            FeeRate = input.ReadUInt32();
            break;
          }
          case 80: {
            MessageFlags = input.ReadUInt32();
            break;
          }
          case 88: {
            HtlcMaximumMsat = input.ReadUInt64();
            break;
          }
          case 98: {
            ExtraOpaqueData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ResetMissionControlRequest : pb::IMessage<ResetMissionControlRequest> {
    private static readonly pb::MessageParser<ResetMissionControlRequest> _parser = new pb::MessageParser<ResetMissionControlRequest>(() => new ResetMissionControlRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResetMissionControlRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Routerrpc.RouterReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResetMissionControlRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResetMissionControlRequest(ResetMissionControlRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResetMissionControlRequest Clone() {
      return new ResetMissionControlRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResetMissionControlRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResetMissionControlRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResetMissionControlRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class ResetMissionControlResponse : pb::IMessage<ResetMissionControlResponse> {
    private static readonly pb::MessageParser<ResetMissionControlResponse> _parser = new pb::MessageParser<ResetMissionControlResponse>(() => new ResetMissionControlResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ResetMissionControlResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Routerrpc.RouterReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResetMissionControlResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResetMissionControlResponse(ResetMissionControlResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResetMissionControlResponse Clone() {
      return new ResetMissionControlResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ResetMissionControlResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ResetMissionControlResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ResetMissionControlResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class QueryMissionControlRequest : pb::IMessage<QueryMissionControlRequest> {
    private static readonly pb::MessageParser<QueryMissionControlRequest> _parser = new pb::MessageParser<QueryMissionControlRequest>(() => new QueryMissionControlRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryMissionControlRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Routerrpc.RouterReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryMissionControlRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryMissionControlRequest(QueryMissionControlRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryMissionControlRequest Clone() {
      return new QueryMissionControlRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryMissionControlRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryMissionControlRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryMissionControlRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  //// QueryMissionControlResponse contains mission control state.
  /// </summary>
  public sealed partial class QueryMissionControlResponse : pb::IMessage<QueryMissionControlResponse> {
    private static readonly pb::MessageParser<QueryMissionControlResponse> _parser = new pb::MessageParser<QueryMissionControlResponse>(() => new QueryMissionControlResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryMissionControlResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Routerrpc.RouterReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryMissionControlResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryMissionControlResponse(QueryMissionControlResponse other) : this() {
      pairs_ = other.pairs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryMissionControlResponse Clone() {
      return new QueryMissionControlResponse(this);
    }

    /// <summary>Field number for the "pairs" field.</summary>
    public const int PairsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Routerrpc.PairHistory> _repeated_pairs_codec
        = pb::FieldCodec.ForMessage(18, global::Routerrpc.PairHistory.Parser);
    private readonly pbc::RepeatedField<global::Routerrpc.PairHistory> pairs_ = new pbc::RepeatedField<global::Routerrpc.PairHistory>();
    /// <summary>
    //// Node pair-level mission control state.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Routerrpc.PairHistory> Pairs {
      get { return pairs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryMissionControlResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryMissionControlResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!pairs_.Equals(other.pairs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= pairs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      pairs_.WriteTo(output, _repeated_pairs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += pairs_.CalculateSize(_repeated_pairs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryMissionControlResponse other) {
      if (other == null) {
        return;
      }
      pairs_.Add(other.pairs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            pairs_.AddEntriesFrom(input, _repeated_pairs_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// PairHistory contains the mission control state for a particular node pair.
  /// </summary>
  public sealed partial class PairHistory : pb::IMessage<PairHistory> {
    private static readonly pb::MessageParser<PairHistory> _parser = new pb::MessageParser<PairHistory>(() => new PairHistory());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PairHistory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Routerrpc.RouterReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PairHistory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PairHistory(PairHistory other) : this() {
      nodeFrom_ = other.nodeFrom_;
      nodeTo_ = other.nodeTo_;
      history_ = other.history_ != null ? other.history_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PairHistory Clone() {
      return new PairHistory(this);
    }

    /// <summary>Field number for the "node_from" field.</summary>
    public const int NodeFromFieldNumber = 1;
    private pb::ByteString nodeFrom_ = pb::ByteString.Empty;
    /// <summary>
    //// The source node pubkey of the pair.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString NodeFrom {
      get { return nodeFrom_; }
      set {
        nodeFrom_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "node_to" field.</summary>
    public const int NodeToFieldNumber = 2;
    private pb::ByteString nodeTo_ = pb::ByteString.Empty;
    /// <summary>
    //// The destination node pubkey of the pair.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString NodeTo {
      get { return nodeTo_; }
      set {
        nodeTo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "history" field.</summary>
    public const int HistoryFieldNumber = 7;
    private global::Routerrpc.PairData history_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Routerrpc.PairData History {
      get { return history_; }
      set {
        history_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PairHistory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PairHistory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodeFrom != other.NodeFrom) return false;
      if (NodeTo != other.NodeTo) return false;
      if (!object.Equals(History, other.History)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NodeFrom.Length != 0) hash ^= NodeFrom.GetHashCode();
      if (NodeTo.Length != 0) hash ^= NodeTo.GetHashCode();
      if (history_ != null) hash ^= History.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NodeFrom.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(NodeFrom);
      }
      if (NodeTo.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(NodeTo);
      }
      if (history_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(History);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NodeFrom.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(NodeFrom);
      }
      if (NodeTo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(NodeTo);
      }
      if (history_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(History);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PairHistory other) {
      if (other == null) {
        return;
      }
      if (other.NodeFrom.Length != 0) {
        NodeFrom = other.NodeFrom;
      }
      if (other.NodeTo.Length != 0) {
        NodeTo = other.NodeTo;
      }
      if (other.history_ != null) {
        if (history_ == null) {
          History = new global::Routerrpc.PairData();
        }
        History.MergeFrom(other.History);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            NodeFrom = input.ReadBytes();
            break;
          }
          case 18: {
            NodeTo = input.ReadBytes();
            break;
          }
          case 58: {
            if (history_ == null) {
              History = new global::Routerrpc.PairData();
            }
            input.ReadMessage(History);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PairData : pb::IMessage<PairData> {
    private static readonly pb::MessageParser<PairData> _parser = new pb::MessageParser<PairData>(() => new PairData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PairData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Routerrpc.RouterReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PairData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PairData(PairData other) : this() {
      failTime_ = other.failTime_;
      failAmtSat_ = other.failAmtSat_;
      failAmtMsat_ = other.failAmtMsat_;
      successTime_ = other.successTime_;
      successAmtSat_ = other.successAmtSat_;
      successAmtMsat_ = other.successAmtMsat_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PairData Clone() {
      return new PairData(this);
    }

    /// <summary>Field number for the "fail_time" field.</summary>
    public const int FailTimeFieldNumber = 1;
    private long failTime_;
    /// <summary>
    //// Time of last failure.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FailTime {
      get { return failTime_; }
      set {
        failTime_ = value;
      }
    }

    /// <summary>Field number for the "fail_amt_sat" field.</summary>
    public const int FailAmtSatFieldNumber = 2;
    private long failAmtSat_;
    /// <summary>
    ///*
    ///Lowest amount that failed to forward rounded to whole sats. This may be
    ///set to zero if the failure is independent of amount.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FailAmtSat {
      get { return failAmtSat_; }
      set {
        failAmtSat_ = value;
      }
    }

    /// <summary>Field number for the "fail_amt_msat" field.</summary>
    public const int FailAmtMsatFieldNumber = 4;
    private long failAmtMsat_;
    /// <summary>
    ///*
    ///Lowest amount that failed to forward in millisats. This may be
    ///set to zero if the failure is independent of amount.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FailAmtMsat {
      get { return failAmtMsat_; }
      set {
        failAmtMsat_ = value;
      }
    }

    /// <summary>Field number for the "success_time" field.</summary>
    public const int SuccessTimeFieldNumber = 5;
    private long successTime_;
    /// <summary>
    //// Time of last success.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SuccessTime {
      get { return successTime_; }
      set {
        successTime_ = value;
      }
    }

    /// <summary>Field number for the "success_amt_sat" field.</summary>
    public const int SuccessAmtSatFieldNumber = 6;
    private long successAmtSat_;
    /// <summary>
    //// Highest amount that we could successfully forward rounded to whole sats.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SuccessAmtSat {
      get { return successAmtSat_; }
      set {
        successAmtSat_ = value;
      }
    }

    /// <summary>Field number for the "success_amt_msat" field.</summary>
    public const int SuccessAmtMsatFieldNumber = 7;
    private long successAmtMsat_;
    /// <summary>
    //// Highest amount that we could successfully forward in millisats.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SuccessAmtMsat {
      get { return successAmtMsat_; }
      set {
        successAmtMsat_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PairData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PairData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FailTime != other.FailTime) return false;
      if (FailAmtSat != other.FailAmtSat) return false;
      if (FailAmtMsat != other.FailAmtMsat) return false;
      if (SuccessTime != other.SuccessTime) return false;
      if (SuccessAmtSat != other.SuccessAmtSat) return false;
      if (SuccessAmtMsat != other.SuccessAmtMsat) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FailTime != 0L) hash ^= FailTime.GetHashCode();
      if (FailAmtSat != 0L) hash ^= FailAmtSat.GetHashCode();
      if (FailAmtMsat != 0L) hash ^= FailAmtMsat.GetHashCode();
      if (SuccessTime != 0L) hash ^= SuccessTime.GetHashCode();
      if (SuccessAmtSat != 0L) hash ^= SuccessAmtSat.GetHashCode();
      if (SuccessAmtMsat != 0L) hash ^= SuccessAmtMsat.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FailTime != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(FailTime);
      }
      if (FailAmtSat != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(FailAmtSat);
      }
      if (FailAmtMsat != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(FailAmtMsat);
      }
      if (SuccessTime != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(SuccessTime);
      }
      if (SuccessAmtSat != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(SuccessAmtSat);
      }
      if (SuccessAmtMsat != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(SuccessAmtMsat);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FailTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FailTime);
      }
      if (FailAmtSat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FailAmtSat);
      }
      if (FailAmtMsat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FailAmtMsat);
      }
      if (SuccessTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SuccessTime);
      }
      if (SuccessAmtSat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SuccessAmtSat);
      }
      if (SuccessAmtMsat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SuccessAmtMsat);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PairData other) {
      if (other == null) {
        return;
      }
      if (other.FailTime != 0L) {
        FailTime = other.FailTime;
      }
      if (other.FailAmtSat != 0L) {
        FailAmtSat = other.FailAmtSat;
      }
      if (other.FailAmtMsat != 0L) {
        FailAmtMsat = other.FailAmtMsat;
      }
      if (other.SuccessTime != 0L) {
        SuccessTime = other.SuccessTime;
      }
      if (other.SuccessAmtSat != 0L) {
        SuccessAmtSat = other.SuccessAmtSat;
      }
      if (other.SuccessAmtMsat != 0L) {
        SuccessAmtMsat = other.SuccessAmtMsat;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FailTime = input.ReadInt64();
            break;
          }
          case 16: {
            FailAmtSat = input.ReadInt64();
            break;
          }
          case 32: {
            FailAmtMsat = input.ReadInt64();
            break;
          }
          case 40: {
            SuccessTime = input.ReadInt64();
            break;
          }
          case 48: {
            SuccessAmtSat = input.ReadInt64();
            break;
          }
          case 56: {
            SuccessAmtMsat = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class QueryProbabilityRequest : pb::IMessage<QueryProbabilityRequest> {
    private static readonly pb::MessageParser<QueryProbabilityRequest> _parser = new pb::MessageParser<QueryProbabilityRequest>(() => new QueryProbabilityRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryProbabilityRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Routerrpc.RouterReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryProbabilityRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryProbabilityRequest(QueryProbabilityRequest other) : this() {
      fromNode_ = other.fromNode_;
      toNode_ = other.toNode_;
      amtMsat_ = other.amtMsat_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryProbabilityRequest Clone() {
      return new QueryProbabilityRequest(this);
    }

    /// <summary>Field number for the "from_node" field.</summary>
    public const int FromNodeFieldNumber = 1;
    private pb::ByteString fromNode_ = pb::ByteString.Empty;
    /// <summary>
    //// The source node pubkey of the pair.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString FromNode {
      get { return fromNode_; }
      set {
        fromNode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "to_node" field.</summary>
    public const int ToNodeFieldNumber = 2;
    private pb::ByteString toNode_ = pb::ByteString.Empty;
    /// <summary>
    //// The destination node pubkey of the pair.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ToNode {
      get { return toNode_; }
      set {
        toNode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amt_msat" field.</summary>
    public const int AmtMsatFieldNumber = 3;
    private long amtMsat_;
    /// <summary>
    //// The amount for which to calculate a probability.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmtMsat {
      get { return amtMsat_; }
      set {
        amtMsat_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryProbabilityRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryProbabilityRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FromNode != other.FromNode) return false;
      if (ToNode != other.ToNode) return false;
      if (AmtMsat != other.AmtMsat) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FromNode.Length != 0) hash ^= FromNode.GetHashCode();
      if (ToNode.Length != 0) hash ^= ToNode.GetHashCode();
      if (AmtMsat != 0L) hash ^= AmtMsat.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FromNode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(FromNode);
      }
      if (ToNode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(ToNode);
      }
      if (AmtMsat != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(AmtMsat);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FromNode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(FromNode);
      }
      if (ToNode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ToNode);
      }
      if (AmtMsat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AmtMsat);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryProbabilityRequest other) {
      if (other == null) {
        return;
      }
      if (other.FromNode.Length != 0) {
        FromNode = other.FromNode;
      }
      if (other.ToNode.Length != 0) {
        ToNode = other.ToNode;
      }
      if (other.AmtMsat != 0L) {
        AmtMsat = other.AmtMsat;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FromNode = input.ReadBytes();
            break;
          }
          case 18: {
            ToNode = input.ReadBytes();
            break;
          }
          case 24: {
            AmtMsat = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class QueryProbabilityResponse : pb::IMessage<QueryProbabilityResponse> {
    private static readonly pb::MessageParser<QueryProbabilityResponse> _parser = new pb::MessageParser<QueryProbabilityResponse>(() => new QueryProbabilityResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryProbabilityResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Routerrpc.RouterReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryProbabilityResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryProbabilityResponse(QueryProbabilityResponse other) : this() {
      probability_ = other.probability_;
      history_ = other.history_ != null ? other.history_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryProbabilityResponse Clone() {
      return new QueryProbabilityResponse(this);
    }

    /// <summary>Field number for the "probability" field.</summary>
    public const int ProbabilityFieldNumber = 1;
    private double probability_;
    /// <summary>
    //// The success probability for the requested pair.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Probability {
      get { return probability_; }
      set {
        probability_ = value;
      }
    }

    /// <summary>Field number for the "history" field.</summary>
    public const int HistoryFieldNumber = 2;
    private global::Routerrpc.PairData history_;
    /// <summary>
    //// The historical data for the requested pair.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Routerrpc.PairData History {
      get { return history_; }
      set {
        history_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryProbabilityResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryProbabilityResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Probability, other.Probability)) return false;
      if (!object.Equals(History, other.History)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Probability != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Probability);
      if (history_ != null) hash ^= History.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Probability != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Probability);
      }
      if (history_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(History);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Probability != 0D) {
        size += 1 + 8;
      }
      if (history_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(History);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryProbabilityResponse other) {
      if (other == null) {
        return;
      }
      if (other.Probability != 0D) {
        Probability = other.Probability;
      }
      if (other.history_ != null) {
        if (history_ == null) {
          History = new global::Routerrpc.PairData();
        }
        History.MergeFrom(other.History);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Probability = input.ReadDouble();
            break;
          }
          case 18: {
            if (history_ == null) {
              History = new global::Routerrpc.PairData();
            }
            input.ReadMessage(History);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BuildRouteRequest : pb::IMessage<BuildRouteRequest> {
    private static readonly pb::MessageParser<BuildRouteRequest> _parser = new pb::MessageParser<BuildRouteRequest>(() => new BuildRouteRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuildRouteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Routerrpc.RouterReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildRouteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildRouteRequest(BuildRouteRequest other) : this() {
      amtMsat_ = other.amtMsat_;
      finalCltvDelta_ = other.finalCltvDelta_;
      outgoingChanId_ = other.outgoingChanId_;
      hopPubkeys_ = other.hopPubkeys_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildRouteRequest Clone() {
      return new BuildRouteRequest(this);
    }

    /// <summary>Field number for the "amt_msat" field.</summary>
    public const int AmtMsatFieldNumber = 1;
    private long amtMsat_;
    /// <summary>
    ///*
    ///The amount to send expressed in msat. If set to zero, the minimum routable
    ///amount is used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmtMsat {
      get { return amtMsat_; }
      set {
        amtMsat_ = value;
      }
    }

    /// <summary>Field number for the "final_cltv_delta" field.</summary>
    public const int FinalCltvDeltaFieldNumber = 2;
    private int finalCltvDelta_;
    /// <summary>
    ///*
    ///CLTV delta from the current height that should be used for the timelock
    ///of the final hop
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FinalCltvDelta {
      get { return finalCltvDelta_; }
      set {
        finalCltvDelta_ = value;
      }
    }

    /// <summary>Field number for the "outgoing_chan_id" field.</summary>
    public const int OutgoingChanIdFieldNumber = 3;
    private ulong outgoingChanId_;
    /// <summary>
    ///*
    ///The channel id of the channel that must be taken to the first hop. If zero,
    ///any channel may be used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong OutgoingChanId {
      get { return outgoingChanId_; }
      set {
        outgoingChanId_ = value;
      }
    }

    /// <summary>Field number for the "hop_pubkeys" field.</summary>
    public const int HopPubkeysFieldNumber = 4;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_hopPubkeys_codec
        = pb::FieldCodec.ForBytes(34);
    private readonly pbc::RepeatedField<pb::ByteString> hopPubkeys_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    ///*
    ///A list of hops that defines the route. This does not include the source hop
    ///pubkey.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> HopPubkeys {
      get { return hopPubkeys_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuildRouteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuildRouteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AmtMsat != other.AmtMsat) return false;
      if (FinalCltvDelta != other.FinalCltvDelta) return false;
      if (OutgoingChanId != other.OutgoingChanId) return false;
      if(!hopPubkeys_.Equals(other.hopPubkeys_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AmtMsat != 0L) hash ^= AmtMsat.GetHashCode();
      if (FinalCltvDelta != 0) hash ^= FinalCltvDelta.GetHashCode();
      if (OutgoingChanId != 0UL) hash ^= OutgoingChanId.GetHashCode();
      hash ^= hopPubkeys_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AmtMsat != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AmtMsat);
      }
      if (FinalCltvDelta != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FinalCltvDelta);
      }
      if (OutgoingChanId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(OutgoingChanId);
      }
      hopPubkeys_.WriteTo(output, _repeated_hopPubkeys_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AmtMsat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AmtMsat);
      }
      if (FinalCltvDelta != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FinalCltvDelta);
      }
      if (OutgoingChanId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(OutgoingChanId);
      }
      size += hopPubkeys_.CalculateSize(_repeated_hopPubkeys_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuildRouteRequest other) {
      if (other == null) {
        return;
      }
      if (other.AmtMsat != 0L) {
        AmtMsat = other.AmtMsat;
      }
      if (other.FinalCltvDelta != 0) {
        FinalCltvDelta = other.FinalCltvDelta;
      }
      if (other.OutgoingChanId != 0UL) {
        OutgoingChanId = other.OutgoingChanId;
      }
      hopPubkeys_.Add(other.hopPubkeys_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AmtMsat = input.ReadInt64();
            break;
          }
          case 16: {
            FinalCltvDelta = input.ReadInt32();
            break;
          }
          case 24: {
            OutgoingChanId = input.ReadUInt64();
            break;
          }
          case 34: {
            hopPubkeys_.AddEntriesFrom(input, _repeated_hopPubkeys_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BuildRouteResponse : pb::IMessage<BuildRouteResponse> {
    private static readonly pb::MessageParser<BuildRouteResponse> _parser = new pb::MessageParser<BuildRouteResponse>(() => new BuildRouteResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuildRouteResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Routerrpc.RouterReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildRouteResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildRouteResponse(BuildRouteResponse other) : this() {
      route_ = other.route_ != null ? other.route_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuildRouteResponse Clone() {
      return new BuildRouteResponse(this);
    }

    /// <summary>Field number for the "route" field.</summary>
    public const int RouteFieldNumber = 1;
    private global::Lnrpc.Route route_;
    /// <summary>
    ///*
    ///Fully specified route that can be used to execute the payment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.Route Route {
      get { return route_; }
      set {
        route_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuildRouteResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuildRouteResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Route, other.Route)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (route_ != null) hash ^= Route.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (route_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Route);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (route_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Route);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuildRouteResponse other) {
      if (other == null) {
        return;
      }
      if (other.route_ != null) {
        if (route_ == null) {
          Route = new global::Lnrpc.Route();
        }
        Route.MergeFrom(other.Route);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (route_ == null) {
              Route = new global::Lnrpc.Route();
            }
            input.ReadMessage(Route);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code

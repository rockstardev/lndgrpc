// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: rpc.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Lnrpc {

  /// <summary>Holder for reflection information generated from rpc.proto</summary>
  public static partial class RpcReflection {

    #region Descriptor
    /// <summary>File descriptor for rpc.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RpcReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CglycGMucHJvdG8SBWxucnBjGhxnb29nbGUvYXBpL2Fubm90YXRpb25zLnBy",
            "b3RvIkEKDkdlblNlZWRSZXF1ZXN0EhkKEWFlemVlZF9wYXNzcGhyYXNlGAEg",
            "ASgMEhQKDHNlZWRfZW50cm9weRgCIAEoDCJICg9HZW5TZWVkUmVzcG9uc2US",
            "HAoUY2lwaGVyX3NlZWRfbW5lbW9uaWMYASADKAkSFwoPZW5jaXBoZXJlZF9z",
            "ZWVkGAIgASgMIrIBChFJbml0V2FsbGV0UmVxdWVzdBIXCg93YWxsZXRfcGFz",
            "c3dvcmQYASABKAwSHAoUY2lwaGVyX3NlZWRfbW5lbW9uaWMYAiADKAkSGQoR",
            "YWV6ZWVkX3Bhc3NwaHJhc2UYAyABKAwSFwoPcmVjb3Zlcnlfd2luZG93GAQg",
            "ASgFEjIKD2NoYW5uZWxfYmFja3VwcxgFIAEoCzIZLmxucnBjLkNoYW5CYWNr",
            "dXBTbmFwc2hvdCIUChJJbml0V2FsbGV0UmVzcG9uc2UiewoTVW5sb2NrV2Fs",
            "bGV0UmVxdWVzdBIXCg93YWxsZXRfcGFzc3dvcmQYASABKAwSFwoPcmVjb3Zl",
            "cnlfd2luZG93GAIgASgFEjIKD2NoYW5uZWxfYmFja3VwcxgDIAEoCzIZLmxu",
            "cnBjLkNoYW5CYWNrdXBTbmFwc2hvdCIWChRVbmxvY2tXYWxsZXRSZXNwb25z",
            "ZSJHChVDaGFuZ2VQYXNzd29yZFJlcXVlc3QSGAoQY3VycmVudF9wYXNzd29y",
            "ZBgBIAEoDBIUCgxuZXdfcGFzc3dvcmQYAiABKAwiGAoWQ2hhbmdlUGFzc3dv",
            "cmRSZXNwb25zZSLhAQoEVXR4bxIuCgR0eXBlGAEgASgOMhIubG5ycGMuQWRk",
            "cmVzc1R5cGVSDGFkZHJlc3NfdHlwZRIYCgdhZGRyZXNzGAIgASgJUgdhZGRy",
            "ZXNzEh4KCmFtb3VudF9zYXQYAyABKANSCmFtb3VudF9zYXQSHAoJcGtfc2Ny",
            "aXB0GAQgASgJUglwa19zY3JpcHQSKwoIb3V0cG9pbnQYBSABKAsyDy5sbnJw",
            "Yy5PdXRQb2ludFIIb3V0cG9pbnQSJAoNY29uZmlybWF0aW9ucxgGIAEoA1IN",
            "Y29uZmlybWF0aW9ucyK5AgoLVHJhbnNhY3Rpb24SGAoHdHhfaGFzaBgBIAEo",
            "CVIHdHhfaGFzaBIWCgZhbW91bnQYAiABKANSBmFtb3VudBIsChFudW1fY29u",
            "ZmlybWF0aW9ucxgDIAEoBVIRbnVtX2NvbmZpcm1hdGlvbnMSHgoKYmxvY2tf",
            "aGFzaBgEIAEoCVIKYmxvY2tfaGFzaBIiCgxibG9ja19oZWlnaHQYBSABKAVS",
            "DGJsb2NrX2hlaWdodBIeCgp0aW1lX3N0YW1wGAYgASgDUgp0aW1lX3N0YW1w",
            "Eh4KCnRvdGFsX2ZlZXMYByABKANSCnRvdGFsX2ZlZXMSJgoOZGVzdF9hZGRy",
            "ZXNzZXMYCCADKAlSDmRlc3RfYWRkcmVzc2VzEh4KCnJhd190eF9oZXgYCSAB",
            "KAlSCnJhd190eF9oZXgiGAoWR2V0VHJhbnNhY3Rpb25zUmVxdWVzdCJMChJU",
            "cmFuc2FjdGlvbkRldGFpbHMSNgoMdHJhbnNhY3Rpb25zGAEgAygLMhIubG5y",
            "cGMuVHJhbnNhY3Rpb25SDHRyYW5zYWN0aW9ucyJNCghGZWVMaW1pdBIPCgVm",
            "aXhlZBgBIAEoA0gAEhQKCmZpeGVkX21zYXQYAyABKANIABIRCgdwZXJjZW50",
            "GAIgASgDSABCBwoFbGltaXQi9AMKC1NlbmRSZXF1ZXN0EgwKBGRlc3QYASAB",
            "KAwSFwoLZGVzdF9zdHJpbmcYAiABKAlCAhgBEgsKA2FtdBgDIAEoAxIQCghh",
            "bXRfbXNhdBgMIAEoAxIUCgxwYXltZW50X2hhc2gYBCABKAwSHwoTcGF5bWVu",
            "dF9oYXNoX3N0cmluZxgFIAEoCUICGAESFwoPcGF5bWVudF9yZXF1ZXN0GAYg",
            "ASgJEhgKEGZpbmFsX2NsdHZfZGVsdGEYByABKAUSIgoJZmVlX2xpbWl0GAgg",
            "ASgLMg8ubG5ycGMuRmVlTGltaXQSHAoQb3V0Z29pbmdfY2hhbl9pZBgJIAEo",
            "BEICMAESFwoPbGFzdF9ob3BfcHVia2V5GA0gASgMEhIKCmNsdHZfbGltaXQY",
            "CiABKA0SRgoTZGVzdF9jdXN0b21fcmVjb3JkcxgLIAMoCzIpLmxucnBjLlNl",
            "bmRSZXF1ZXN0LkRlc3RDdXN0b21SZWNvcmRzRW50cnkSGgoSYWxsb3dfc2Vs",
            "Zl9wYXltZW50GA4gASgIEigKDWRlc3RfZmVhdHVyZXMYDyADKA4yES5sbnJw",
            "Yy5GZWF0dXJlQml0GjgKFkRlc3RDdXN0b21SZWNvcmRzRW50cnkSCwoDa2V5",
            "GAEgASgEEg0KBXZhbHVlGAIgASgMOgI4ASK4AQoMU2VuZFJlc3BvbnNlEiQK",
            "DXBheW1lbnRfZXJyb3IYASABKAlSDXBheW1lbnRfZXJyb3ISKgoQcGF5bWVu",
            "dF9wcmVpbWFnZRgCIAEoDFIQcGF5bWVudF9wcmVpbWFnZRIyCg1wYXltZW50",
            "X3JvdXRlGAMgASgLMgwubG5ycGMuUm91dGVSDXBheW1lbnRfcm91dGUSIgoM",
            "cGF5bWVudF9oYXNoGAQgASgMUgxwYXltZW50X2hhc2gibgoSU2VuZFRvUm91",
            "dGVSZXF1ZXN0EhQKDHBheW1lbnRfaGFzaBgBIAEoDBIfChNwYXltZW50X2hh",
            "c2hfc3RyaW5nGAIgASgJQgIYARIbCgVyb3V0ZRgEIAEoCzIMLmxucnBjLlJv",
            "dXRlSgQIAxAEIrUCChRDaGFubmVsQWNjZXB0UmVxdWVzdBITCgtub2RlX3B1",
            "YmtleRgBIAEoDBISCgpjaGFpbl9oYXNoGAIgASgMEhcKD3BlbmRpbmdfY2hh",
            "bl9pZBgDIAEoDBITCgtmdW5kaW5nX2FtdBgEIAEoBBIQCghwdXNoX2FtdBgF",
            "IAEoBBISCgpkdXN0X2xpbWl0GAYgASgEEhsKE21heF92YWx1ZV9pbl9mbGln",
            "aHQYByABKAQSFwoPY2hhbm5lbF9yZXNlcnZlGAggASgEEhAKCG1pbl9odGxj",
            "GAkgASgEEhIKCmZlZV9wZXJfa3cYCiABKAQSEQoJY3N2X2RlbGF5GAsgASgN",
            "EhoKEm1heF9hY2NlcHRlZF9odGxjcxgMIAEoDRIVCg1jaGFubmVsX2ZsYWdz",
            "GA0gASgNIkAKFUNoYW5uZWxBY2NlcHRSZXNwb25zZRIOCgZhY2NlcHQYASAB",
            "KAgSFwoPcGVuZGluZ19jaGFuX2lkGAIgASgMIqIBCgxDaGFubmVsUG9pbnQS",
            "MAoSZnVuZGluZ190eGlkX2J5dGVzGAEgASgMSABSEmZ1bmRpbmdfdHhpZF9i",
            "eXRlcxIsChBmdW5kaW5nX3R4aWRfc3RyGAIgASgJSABSEGZ1bmRpbmdfdHhp",
            "ZF9zdHISIgoMb3V0cHV0X2luZGV4GAMgASgNUgxvdXRwdXRfaW5kZXhCDgoM",
            "ZnVuZGluZ190eGlkImoKCE91dFBvaW50Eh4KCnR4aWRfYnl0ZXMYASABKAxS",
            "CnR4aWRfYnl0ZXMSGgoIdHhpZF9zdHIYAiABKAlSCHR4aWRfc3RyEiIKDG91",
            "dHB1dF9pbmRleBgDIAEoDVIMb3V0cHV0X2luZGV4Ij4KEExpZ2h0bmluZ0Fk",
            "ZHJlc3MSFgoGcHVia2V5GAEgASgJUgZwdWJrZXkSEgoEaG9zdBgCIAEoCVIE",
            "aG9zdCKhAQoSRXN0aW1hdGVGZWVSZXF1ZXN0EkEKDEFkZHJUb0Ftb3VudBgB",
            "IAMoCzIrLmxucnBjLkVzdGltYXRlRmVlUmVxdWVzdC5BZGRyVG9BbW91bnRF",
            "bnRyeRITCgt0YXJnZXRfY29uZhgCIAEoBRozChFBZGRyVG9BbW91bnRFbnRy",
            "eRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAM6AjgBImMKE0VzdGltYXRl",
            "RmVlUmVzcG9uc2USGAoHZmVlX3NhdBgBIAEoA1IHZmVlX3NhdBIyChRmZWVy",
            "YXRlX3NhdF9wZXJfYnl0ZRgCIAEoA1IUZmVlcmF0ZV9zYXRfcGVyX2J5dGUi",
            "sQEKD1NlbmRNYW55UmVxdWVzdBI+CgxBZGRyVG9BbW91bnQYASADKAsyKC5s",
            "bnJwYy5TZW5kTWFueVJlcXVlc3QuQWRkclRvQW1vdW50RW50cnkSEwoLdGFy",
            "Z2V0X2NvbmYYAyABKAUSFAoMc2F0X3Blcl9ieXRlGAUgASgDGjMKEUFkZHJU",
            "b0Ftb3VudEVudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoAzoCOAEi",
            "JgoQU2VuZE1hbnlSZXNwb25zZRISCgR0eGlkGAEgASgJUgR0eGlkIm0KEFNl",
            "bmRDb2luc1JlcXVlc3QSDAoEYWRkchgBIAEoCRIOCgZhbW91bnQYAiABKAMS",
            "EwoLdGFyZ2V0X2NvbmYYAyABKAUSFAoMc2F0X3Blcl9ieXRlGAUgASgDEhAK",
            "CHNlbmRfYWxsGAYgASgIIicKEVNlbmRDb2luc1Jlc3BvbnNlEhIKBHR4aWQY",
            "ASABKAlSBHR4aWQiOgoSTGlzdFVuc3BlbnRSZXF1ZXN0EhEKCW1pbl9jb25m",
            "cxgBIAEoBRIRCgltYXhfY29uZnMYAiABKAUiOAoTTGlzdFVuc3BlbnRSZXNw",
            "b25zZRIhCgV1dHhvcxgBIAMoCzILLmxucnBjLlV0eG9SBXV0eG9zIjUKEU5l",
            "d0FkZHJlc3NSZXF1ZXN0EiAKBHR5cGUYASABKA4yEi5sbnJwYy5BZGRyZXNz",
            "VHlwZSIuChJOZXdBZGRyZXNzUmVzcG9uc2USGAoHYWRkcmVzcxgBIAEoCVIH",
            "YWRkcmVzcyImChJTaWduTWVzc2FnZVJlcXVlc3QSEAoDbXNnGAEgASgMUgNt",
            "c2ciMwoTU2lnbk1lc3NhZ2VSZXNwb25zZRIcCglzaWduYXR1cmUYASABKAlS",
            "CXNpZ25hdHVyZSJGChRWZXJpZnlNZXNzYWdlUmVxdWVzdBIQCgNtc2cYASAB",
            "KAxSA21zZxIcCglzaWduYXR1cmUYAiABKAlSCXNpZ25hdHVyZSJFChVWZXJp",
            "ZnlNZXNzYWdlUmVzcG9uc2USFAoFdmFsaWQYASABKAhSBXZhbGlkEhYKBnB1",
            "YmtleRgCIAEoCVIGcHVia2V5IkkKEkNvbm5lY3RQZWVyUmVxdWVzdBIlCgRh",
            "ZGRyGAEgASgLMhcubG5ycGMuTGlnaHRuaW5nQWRkcmVzcxIMCgRwZXJtGAIg",
            "ASgIIhUKE0Nvbm5lY3RQZWVyUmVzcG9uc2UiMQoVRGlzY29ubmVjdFBlZXJS",
            "ZXF1ZXN0EhgKB3B1Yl9rZXkYASABKAlSB3B1Yl9rZXkiGAoWRGlzY29ubmVj",
            "dFBlZXJSZXNwb25zZSKGAQoESFRMQxIaCghpbmNvbWluZxgBIAEoCFIIaW5j",
            "b21pbmcSFgoGYW1vdW50GAIgASgDUgZhbW91bnQSHAoJaGFzaF9sb2NrGAMg",
            "ASgMUgloYXNoX2xvY2sSLAoRZXhwaXJhdGlvbl9oZWlnaHQYBCABKA1SEWV4",
            "cGlyYXRpb25faGVpZ2h0IsgHCgdDaGFubmVsEhYKBmFjdGl2ZRgBIAEoCFIG",
            "YWN0aXZlEiQKDXJlbW90ZV9wdWJrZXkYAiABKAlSDXJlbW90ZV9wdWJrZXkS",
            "JAoNY2hhbm5lbF9wb2ludBgDIAEoCVINY2hhbm5lbF9wb2ludBIcCgdjaGFu",
            "X2lkGAQgASgEQgIwAVIHY2hhbl9pZBIaCghjYXBhY2l0eRgFIAEoA1IIY2Fw",
            "YWNpdHkSJAoNbG9jYWxfYmFsYW5jZRgGIAEoA1INbG9jYWxfYmFsYW5jZRIm",
            "Cg5yZW1vdGVfYmFsYW5jZRgHIAEoA1IOcmVtb3RlX2JhbGFuY2USHgoKY29t",
            "bWl0X2ZlZRgIIAEoA1IKY29tbWl0X2ZlZRIkCg1jb21taXRfd2VpZ2h0GAkg",
            "ASgDUg1jb21taXRfd2VpZ2h0Eh4KCmZlZV9wZXJfa3cYCiABKANSCmZlZV9w",
            "ZXJfa3cSLAoRdW5zZXR0bGVkX2JhbGFuY2UYCyABKANSEXVuc2V0dGxlZF9i",
            "YWxhbmNlEjAKE3RvdGFsX3NhdG9zaGlzX3NlbnQYDCABKANSE3RvdGFsX3Nh",
            "dG9zaGlzX3NlbnQSOAoXdG90YWxfc2F0b3NoaXNfcmVjZWl2ZWQYDSABKANS",
            "F3RvdGFsX3NhdG9zaGlzX3JlY2VpdmVkEiAKC251bV91cGRhdGVzGA4gASgE",
            "UgtudW1fdXBkYXRlcxIxCg1wZW5kaW5nX2h0bGNzGA8gAygLMgsubG5ycGMu",
            "SFRMQ1INcGVuZGluZ19odGxjcxIcCgljc3ZfZGVsYXkYECABKA1SCWNzdl9k",
            "ZWxheRIYCgdwcml2YXRlGBEgASgIUgdwcml2YXRlEhwKCWluaXRpYXRvchgS",
            "IAEoCFIJaW5pdGlhdG9yEiwKEWNoYW5fc3RhdHVzX2ZsYWdzGBMgASgJUhFj",
            "aGFuX3N0YXR1c19mbGFncxI2ChZsb2NhbF9jaGFuX3Jlc2VydmVfc2F0GBQg",
            "ASgDUhZsb2NhbF9jaGFuX3Jlc2VydmVfc2F0EjgKF3JlbW90ZV9jaGFuX3Jl",
            "c2VydmVfc2F0GBUgASgDUhdyZW1vdGVfY2hhbl9yZXNlcnZlX3NhdBIsChFz",
            "dGF0aWNfcmVtb3RlX2tleRgWIAEoCFIRc3RhdGljX3JlbW90ZV9rZXkSGgoI",
            "bGlmZXRpbWUYFyABKANSCGxpZmV0aW1lEhYKBnVwdGltZRgYIAEoA1IGdXB0",
            "aW1lEiQKDWNsb3NlX2FkZHJlc3MYGSABKAlSDWNsb3NlX2FkZHJlc3MibAoT",
            "TGlzdENoYW5uZWxzUmVxdWVzdBITCgthY3RpdmVfb25seRgBIAEoCBIVCg1p",
            "bmFjdGl2ZV9vbmx5GAIgASgIEhMKC3B1YmxpY19vbmx5GAMgASgIEhQKDHBy",
            "aXZhdGVfb25seRgEIAEoCCJCChRMaXN0Q2hhbm5lbHNSZXNwb25zZRIqCghj",
            "aGFubmVscxgLIAMoCzIOLmxucnBjLkNoYW5uZWxSCGNoYW5uZWxzIroEChND",
            "aGFubmVsQ2xvc2VTdW1tYXJ5EiQKDWNoYW5uZWxfcG9pbnQYASABKAlSDWNo",
            "YW5uZWxfcG9pbnQSHAoHY2hhbl9pZBgCIAEoBEICMAFSB2NoYW5faWQSHgoK",
            "Y2hhaW5faGFzaBgDIAEoCVIKY2hhaW5faGFzaBIoCg9jbG9zaW5nX3R4X2hh",
            "c2gYBCABKAlSD2Nsb3NpbmdfdHhfaGFzaBIkCg1yZW1vdGVfcHVia2V5GAUg",
            "ASgJUg1yZW1vdGVfcHVia2V5EhoKCGNhcGFjaXR5GAYgASgDUghjYXBhY2l0",
            "eRIiCgxjbG9zZV9oZWlnaHQYByABKA1SDGNsb3NlX2hlaWdodBIoCg9zZXR0",
            "bGVkX2JhbGFuY2UYCCABKANSD3NldHRsZWRfYmFsYW5jZRIwChN0aW1lX2xv",
            "Y2tlZF9iYWxhbmNlGAkgASgDUhN0aW1lX2xvY2tlZF9iYWxhbmNlEkYKCmNs",
            "b3NlX3R5cGUYCiABKA4yJi5sbnJwYy5DaGFubmVsQ2xvc2VTdW1tYXJ5LkNs",
            "b3N1cmVUeXBlUgpjbG9zZV90eXBlIooBCgtDbG9zdXJlVHlwZRIVChFDT09Q",
            "RVJBVElWRV9DTE9TRRAAEhUKEUxPQ0FMX0ZPUkNFX0NMT1NFEAESFgoSUkVN",
            "T1RFX0ZPUkNFX0NMT1NFEAISEAoMQlJFQUNIX0NMT1NFEAMSFAoQRlVORElO",
            "R19DQU5DRUxFRBAEEg0KCUFCQU5ET05FRBAFIpQBChVDbG9zZWRDaGFubmVs",
            "c1JlcXVlc3QSEwoLY29vcGVyYXRpdmUYASABKAgSEwoLbG9jYWxfZm9yY2UY",
            "AiABKAgSFAoMcmVtb3RlX2ZvcmNlGAMgASgIEg4KBmJyZWFjaBgEIAEoCBIY",
            "ChBmdW5kaW5nX2NhbmNlbGVkGAUgASgIEhEKCWFiYW5kb25lZBgGIAEoCCJQ",
            "ChZDbG9zZWRDaGFubmVsc1Jlc3BvbnNlEjYKCGNoYW5uZWxzGAEgAygLMhou",
            "bG5ycGMuQ2hhbm5lbENsb3NlU3VtbWFyeVIIY2hhbm5lbHMi1wMKBFBlZXIS",
            "GAoHcHViX2tleRgBIAEoCVIHcHViX2tleRIYCgdhZGRyZXNzGAMgASgJUgdh",
            "ZGRyZXNzEh4KCmJ5dGVzX3NlbnQYBCABKARSCmJ5dGVzX3NlbnQSHgoKYnl0",
            "ZXNfcmVjdhgFIAEoBFIKYnl0ZXNfcmVjdhIaCghzYXRfc2VudBgGIAEoA1II",
            "c2F0X3NlbnQSGgoIc2F0X3JlY3YYByABKANSCHNhdF9yZWN2EhgKB2luYm91",
            "bmQYCCABKAhSB2luYm91bmQSHAoJcGluZ190aW1lGAkgASgDUglwaW5nX3Rp",
            "bWUSMgoJc3luY190eXBlGAogASgOMhQubG5ycGMuUGVlci5TeW5jVHlwZVIJ",
            "c3luY190eXBlEjUKCGZlYXR1cmVzGAsgAygLMhkubG5ycGMuUGVlci5GZWF0",
            "dXJlc0VudHJ5UghmZWF0dXJlcxo/Cg1GZWF0dXJlc0VudHJ5EgsKA2tleRgB",
            "IAEoDRIdCgV2YWx1ZRgCIAEoCzIOLmxucnBjLkZlYXR1cmU6AjgBIj8KCFN5",
            "bmNUeXBlEhAKDFVOS05PV05fU1lOQxAAEg8KC0FDVElWRV9TWU5DEAESEAoM",
            "UEFTU0lWRV9TWU5DEAIiEgoQTGlzdFBlZXJzUmVxdWVzdCI2ChFMaXN0UGVl",
            "cnNSZXNwb25zZRIhCgVwZWVycxgBIAMoCzILLmxucnBjLlBlZXJSBXBlZXJz",
            "IhcKFVBlZXJFdmVudFN1YnNjcmlwdGlvbiKFAQoJUGVlckV2ZW50EhgKB3B1",
            "Yl9rZXkYASABKAlSB3B1Yl9rZXkSLgoEdHlwZRgCIAEoDjIaLmxucnBjLlBl",
            "ZXJFdmVudC5FdmVudFR5cGVSBHR5cGUiLgoJRXZlbnRUeXBlEg8KC1BFRVJf",
            "T05MSU5FEAASEAoMUEVFUl9PRkZMSU5FEAEiEAoOR2V0SW5mb1JlcXVlc3Qi",
            "6gUKD0dldEluZm9SZXNwb25zZRIYCgd2ZXJzaW9uGA4gASgJUgd2ZXJzaW9u",
            "EigKD2lkZW50aXR5X3B1YmtleRgBIAEoCVIPaWRlbnRpdHlfcHVia2V5EhQK",
            "BWFsaWFzGAIgASgJUgVhbGlhcxIUCgVjb2xvchgRIAEoCVIFY29sb3ISMgoU",
            "bnVtX3BlbmRpbmdfY2hhbm5lbHMYAyABKA1SFG51bV9wZW5kaW5nX2NoYW5u",
            "ZWxzEjAKE251bV9hY3RpdmVfY2hhbm5lbHMYBCABKA1SE251bV9hY3RpdmVf",
            "Y2hhbm5lbHMSNAoVbnVtX2luYWN0aXZlX2NoYW5uZWxzGA8gASgNUhVudW1f",
            "aW5hY3RpdmVfY2hhbm5lbHMSHAoJbnVtX3BlZXJzGAUgASgNUgludW1fcGVl",
            "cnMSIgoMYmxvY2tfaGVpZ2h0GAYgASgNUgxibG9ja19oZWlnaHQSHgoKYmxv",
            "Y2tfaGFzaBgIIAEoCVIKYmxvY2tfaGFzaBI0ChViZXN0X2hlYWRlcl90aW1l",
            "c3RhbXAYDSABKANSFWJlc3RfaGVhZGVyX3RpbWVzdGFtcBIoCg9zeW5jZWRf",
            "dG9fY2hhaW4YCSABKAhSD3N5bmNlZF90b19jaGFpbhIoCg9zeW5jZWRfdG9f",
            "Z3JhcGgYEiABKAhSD3N5bmNlZF90b19ncmFwaBIcCgd0ZXN0bmV0GAogASgI",
            "QgIYAVIHdGVzdG5ldBIkCgZjaGFpbnMYECADKAsyDC5sbnJwYy5DaGFpblIG",
            "Y2hhaW5zEhIKBHVyaXMYDCADKAlSBHVyaXMSQAoIZmVhdHVyZXMYEyADKAsy",
            "JC5sbnJwYy5HZXRJbmZvUmVzcG9uc2UuRmVhdHVyZXNFbnRyeVIIZmVhdHVy",
            "ZXMaPwoNRmVhdHVyZXNFbnRyeRILCgNrZXkYASABKA0SHQoFdmFsdWUYAiAB",
            "KAsyDi5sbnJwYy5GZWF0dXJlOgI4AUoECAsQDCI3CgVDaGFpbhIUCgVjaGFp",
            "bhgBIAEoCVIFY2hhaW4SGAoHbmV0d29yaxgCIAEoCVIHbmV0d29yayJVChJD",
            "b25maXJtYXRpb25VcGRhdGUSEQoJYmxvY2tfc2hhGAEgASgMEhQKDGJsb2Nr",
            "X2hlaWdodBgCIAEoBRIWCg5udW1fY29uZnNfbGVmdBgDIAEoDSJOChFDaGFu",
            "bmVsT3BlblVwZGF0ZRI5Cg1jaGFubmVsX3BvaW50GAEgASgLMhMubG5ycGMu",
            "Q2hhbm5lbFBvaW50Ug1jaGFubmVsX3BvaW50IlIKEkNoYW5uZWxDbG9zZVVw",
            "ZGF0ZRIiCgxjbG9zaW5nX3R4aWQYASABKAxSDGNsb3NpbmdfdHhpZBIYCgdz",
            "dWNjZXNzGAIgASgIUgdzdWNjZXNzIqcBChNDbG9zZUNoYW5uZWxSZXF1ZXN0",
            "EioKDWNoYW5uZWxfcG9pbnQYASABKAsyEy5sbnJwYy5DaGFubmVsUG9pbnQS",
            "DQoFZm9yY2UYAiABKAgSEwoLdGFyZ2V0X2NvbmYYAyABKAUSFAoMc2F0X3Bl",
            "cl9ieXRlGAQgASgDEioKEGRlbGl2ZXJ5X2FkZHJlc3MYBSABKAlSEGRlbGl2",
            "ZXJ5X2FkZHJlc3MimAEKEUNsb3NlU3RhdHVzVXBkYXRlEjwKDWNsb3NlX3Bl",
            "bmRpbmcYASABKAsyFC5sbnJwYy5QZW5kaW5nVXBkYXRlSABSDWNsb3NlX3Bl",
            "bmRpbmcSOwoKY2hhbl9jbG9zZRgDIAEoCzIZLmxucnBjLkNoYW5uZWxDbG9z",
            "ZVVwZGF0ZUgAUgpjaGFuX2Nsb3NlQggKBnVwZGF0ZSJHCg1QZW5kaW5nVXBk",
            "YXRlEhIKBHR4aWQYASABKAxSBHR4aWQSIgoMb3V0cHV0X2luZGV4GAIgASgN",
            "UgxvdXRwdXRfaW5kZXgi+wMKEk9wZW5DaGFubmVsUmVxdWVzdBIgCgtub2Rl",
            "X3B1YmtleRgCIAEoDFILbm9kZV9wdWJrZXkSMgoSbm9kZV9wdWJrZXlfc3Ry",
            "aW5nGAMgASgJQgIYAVISbm9kZV9wdWJrZXlfc3RyaW5nEjIKFGxvY2FsX2Z1",
            "bmRpbmdfYW1vdW50GAQgASgDUhRsb2NhbF9mdW5kaW5nX2Ftb3VudBIaCghw",
            "dXNoX3NhdBgFIAEoA1IIcHVzaF9zYXQSEwoLdGFyZ2V0X2NvbmYYBiABKAUS",
            "FAoMc2F0X3Blcl9ieXRlGAcgASgDEhgKB3ByaXZhdGUYCCABKAhSB3ByaXZh",
            "dGUSJAoNbWluX2h0bGNfbXNhdBgJIAEoA1INbWluX2h0bGNfbXNhdBIqChBy",
            "ZW1vdGVfY3N2X2RlbGF5GAogASgNUhByZW1vdGVfY3N2X2RlbGF5EhwKCW1p",
            "bl9jb25mcxgLIAEoBVIJbWluX2NvbmZzEiwKEXNwZW5kX3VuY29uZmlybWVk",
            "GAwgASgIUhFzcGVuZF91bmNvbmZpcm1lZBIkCg1jbG9zZV9hZGRyZXNzGA0g",
            "ASgJUg1jbG9zZV9hZGRyZXNzEjYKDGZ1bmRpbmdfc2hpbRgOIAEoCzISLmxu",
            "cnBjLkZ1bmRpbmdTaGltUgxmdW5kaW5nX3NoaW0ivAEKEE9wZW5TdGF0dXNV",
            "cGRhdGUSOgoMY2hhbl9wZW5kaW5nGAEgASgLMhQubG5ycGMuUGVuZGluZ1Vw",
            "ZGF0ZUgAUgxjaGFuX3BlbmRpbmcSOAoJY2hhbl9vcGVuGAMgASgLMhgubG5y",
            "cGMuQ2hhbm5lbE9wZW5VcGRhdGVIAFIJY2hhbl9vcGVuEigKD3BlbmRpbmdf",
            "Y2hhbl9pZBgEIAEoDFIPcGVuZGluZ19jaGFuX2lkQggKBnVwZGF0ZSIzCgpL",
            "ZXlMb2NhdG9yEhIKCmtleV9mYW1pbHkYASABKAUSEQoJa2V5X2luZGV4GAIg",
            "ASgFIkoKDUtleURlc2NyaXB0b3ISFQoNcmF3X2tleV9ieXRlcxgBIAEoDBIi",
            "CgdrZXlfbG9jGAIgASgLMhEubG5ycGMuS2V5TG9jYXRvciKbAQoNQ2hhblBv",
            "aW50U2hpbRILCgNhbXQYASABKAMSJwoKY2hhbl9wb2ludBgCIAEoCzITLmxu",
            "cnBjLkNoYW5uZWxQb2ludBInCglsb2NhbF9rZXkYAyABKAsyFC5sbnJwYy5L",
            "ZXlEZXNjcmlwdG9yEhIKCnJlbW90ZV9rZXkYBCABKAwSFwoPcGVuZGluZ19j",
            "aGFuX2lkGAUgASgMIkYKC0Z1bmRpbmdTaGltEi8KD2NoYW5fcG9pbnRfc2hp",
            "bRgBIAEoCzIULmxucnBjLkNoYW5Qb2ludFNoaW1IAEIGCgRzaGltIiwKEUZ1",
            "bmRpbmdTaGltQ2FuY2VsEhcKD3BlbmRpbmdfY2hhbl9pZBgBIAEoDCJ/ChRG",
            "dW5kaW5nVHJhbnNpdGlvbk1zZxIrCg1zaGltX3JlZ2lzdGVyGAEgASgLMhIu",
            "bG5ycGMuRnVuZGluZ1NoaW1IABIvCgtzaGltX2NhbmNlbBgCIAEoCzIYLmxu",
            "cnBjLkZ1bmRpbmdTaGltQ2FuY2VsSABCCQoHdHJpZ2dlciIWChRGdW5kaW5n",
            "U3RhdGVTdGVwUmVzcCLPAQoLUGVuZGluZ0hUTEMSGgoIaW5jb21pbmcYASAB",
            "KAhSCGluY29taW5nEhYKBmFtb3VudBgCIAEoA1IGYW1vdW50EhoKCG91dHBv",
            "aW50GAMgASgJUghvdXRwb2ludBIoCg9tYXR1cml0eV9oZWlnaHQYBCABKA1S",
            "D21hdHVyaXR5X2hlaWdodBIwChNibG9ja3NfdGlsX21hdHVyaXR5GAUgASgF",
            "UhNibG9ja3NfdGlsX21hdHVyaXR5EhQKBXN0YWdlGAYgASgNUgVzdGFnZSIY",
            "ChZQZW5kaW5nQ2hhbm5lbHNSZXF1ZXN0IpwNChdQZW5kaW5nQ2hhbm5lbHNS",
            "ZXNwb25zZRIwChN0b3RhbF9saW1ib19iYWxhbmNlGAEgASgDUhN0b3RhbF9s",
            "aW1ib19iYWxhbmNlEmcKFXBlbmRpbmdfb3Blbl9jaGFubmVscxgCIAMoCzIx",
            "LmxucnBjLlBlbmRpbmdDaGFubmVsc1Jlc3BvbnNlLlBlbmRpbmdPcGVuQ2hh",
            "bm5lbFIVcGVuZGluZ19vcGVuX2NoYW5uZWxzEmgKGHBlbmRpbmdfY2xvc2lu",
            "Z19jaGFubmVscxgDIAMoCzIsLmxucnBjLlBlbmRpbmdDaGFubmVsc1Jlc3Bv",
            "bnNlLkNsb3NlZENoYW5uZWxSGHBlbmRpbmdfY2xvc2luZ19jaGFubmVscxJ5",
            "Ch5wZW5kaW5nX2ZvcmNlX2Nsb3NpbmdfY2hhbm5lbHMYBCADKAsyMS5sbnJw",
            "Yy5QZW5kaW5nQ2hhbm5lbHNSZXNwb25zZS5Gb3JjZUNsb3NlZENoYW5uZWxS",
            "HnBlbmRpbmdfZm9yY2VfY2xvc2luZ19jaGFubmVscxJqChZ3YWl0aW5nX2Ns",
            "b3NlX2NoYW5uZWxzGAUgAygLMjIubG5ycGMuUGVuZGluZ0NoYW5uZWxzUmVz",
            "cG9uc2UuV2FpdGluZ0Nsb3NlQ2hhbm5lbFIWd2FpdGluZ19jbG9zZV9jaGFu",
            "bmVscxq8AgoOUGVuZGluZ0NoYW5uZWwSKAoPcmVtb3RlX25vZGVfcHViGAEg",
            "ASgJUg9yZW1vdGVfbm9kZV9wdWISJAoNY2hhbm5lbF9wb2ludBgCIAEoCVIN",
            "Y2hhbm5lbF9wb2ludBIaCghjYXBhY2l0eRgDIAEoA1IIY2FwYWNpdHkSJAoN",
            "bG9jYWxfYmFsYW5jZRgEIAEoA1INbG9jYWxfYmFsYW5jZRImCg5yZW1vdGVf",
            "YmFsYW5jZRgFIAEoA1IOcmVtb3RlX2JhbGFuY2USNgoWbG9jYWxfY2hhbl9y",
            "ZXNlcnZlX3NhdBgGIAEoA1IWbG9jYWxfY2hhbl9yZXNlcnZlX3NhdBI4Chdy",
            "ZW1vdGVfY2hhbl9yZXNlcnZlX3NhdBgHIAEoA1IXcmVtb3RlX2NoYW5fcmVz",
            "ZXJ2ZV9zYXQa9QEKElBlbmRpbmdPcGVuQ2hhbm5lbBJHCgdjaGFubmVsGAEg",
            "ASgLMi0ubG5ycGMuUGVuZGluZ0NoYW5uZWxzUmVzcG9uc2UuUGVuZGluZ0No",
            "YW5uZWxSB2NoYW5uZWwSMAoTY29uZmlybWF0aW9uX2hlaWdodBgCIAEoDVIT",
            "Y29uZmlybWF0aW9uX2hlaWdodBIeCgpjb21taXRfZmVlGAQgASgDUgpjb21t",
            "aXRfZmVlEiQKDWNvbW1pdF93ZWlnaHQYBSABKANSDWNvbW1pdF93ZWlnaHQS",
            "HgoKZmVlX3Blcl9rdxgGIAEoA1IKZmVlX3Blcl9rdxp7ChNXYWl0aW5nQ2xv",
            "c2VDaGFubmVsEj4KB2NoYW5uZWwYASABKAsyLS5sbnJwYy5QZW5kaW5nQ2hh",
            "bm5lbHNSZXNwb25zZS5QZW5kaW5nQ2hhbm5lbBIkCg1saW1ib19iYWxhbmNl",
            "GAIgASgDUg1saW1ib19iYWxhbmNlGnMKDUNsb3NlZENoYW5uZWwSPgoHY2hh",
            "bm5lbBgBIAEoCzItLmxucnBjLlBlbmRpbmdDaGFubmVsc1Jlc3BvbnNlLlBl",
            "bmRpbmdDaGFubmVsEiIKDGNsb3NpbmdfdHhpZBgCIAEoCVIMY2xvc2luZ190",
            "eGlkGusCChJGb3JjZUNsb3NlZENoYW5uZWwSRwoHY2hhbm5lbBgBIAEoCzIt",
            "LmxucnBjLlBlbmRpbmdDaGFubmVsc1Jlc3BvbnNlLlBlbmRpbmdDaGFubmVs",
            "UgdjaGFubmVsEiIKDGNsb3NpbmdfdHhpZBgCIAEoCVIMY2xvc2luZ190eGlk",
            "EiQKDWxpbWJvX2JhbGFuY2UYAyABKANSDWxpbWJvX2JhbGFuY2USKAoPbWF0",
            "dXJpdHlfaGVpZ2h0GAQgASgNUg9tYXR1cml0eV9oZWlnaHQSMAoTYmxvY2tz",
            "X3RpbF9tYXR1cml0eRgFIAEoBVITYmxvY2tzX3RpbF9tYXR1cml0eRIsChFy",
            "ZWNvdmVyZWRfYmFsYW5jZRgGIAEoA1IRcmVjb3ZlcmVkX2JhbGFuY2USOAoN",
            "cGVuZGluZ19odGxjcxgIIAMoCzISLmxucnBjLlBlbmRpbmdIVExDUg1wZW5k",
            "aW5nX2h0bGNzIhoKGENoYW5uZWxFdmVudFN1YnNjcmlwdGlvbiK1AwoSQ2hh",
            "bm5lbEV2ZW50VXBkYXRlEjQKDG9wZW5fY2hhbm5lbBgBIAEoCzIOLmxucnBj",
            "LkNoYW5uZWxIAFIMb3Blbl9jaGFubmVsEkQKDmNsb3NlZF9jaGFubmVsGAIg",
            "ASgLMhoubG5ycGMuQ2hhbm5lbENsb3NlU3VtbWFyeUgAUg5jbG9zZWRfY2hh",
            "bm5lbBI9Cg5hY3RpdmVfY2hhbm5lbBgDIAEoCzITLmxucnBjLkNoYW5uZWxQ",
            "b2ludEgAUg5hY3RpdmVfY2hhbm5lbBJBChBpbmFjdGl2ZV9jaGFubmVsGAQg",
            "ASgLMhMubG5ycGMuQ2hhbm5lbFBvaW50SABSEGluYWN0aXZlX2NoYW5uZWwS",
            "OAoEdHlwZRgFIAEoDjIkLmxucnBjLkNoYW5uZWxFdmVudFVwZGF0ZS5VcGRh",
            "dGVUeXBlUgR0eXBlIlwKClVwZGF0ZVR5cGUSEAoMT1BFTl9DSEFOTkVMEAAS",
            "EgoOQ0xPU0VEX0NIQU5ORUwQARISCg5BQ1RJVkVfQ0hBTk5FTBACEhQKEElO",
            "QUNUSVZFX0NIQU5ORUwQA0IJCgdjaGFubmVsIhYKFFdhbGxldEJhbGFuY2VS",
            "ZXF1ZXN0Ip0BChVXYWxsZXRCYWxhbmNlUmVzcG9uc2USJAoNdG90YWxfYmFs",
            "YW5jZRgBIAEoA1INdG90YWxfYmFsYW5jZRIsChFjb25maXJtZWRfYmFsYW5j",
            "ZRgCIAEoA1IRY29uZmlybWVkX2JhbGFuY2USMAoTdW5jb25maXJtZWRfYmFs",
            "YW5jZRgDIAEoA1ITdW5jb25maXJtZWRfYmFsYW5jZSIXChVDaGFubmVsQmFs",
            "YW5jZVJlcXVlc3QiZgoWQ2hhbm5lbEJhbGFuY2VSZXNwb25zZRIYCgdiYWxh",
            "bmNlGAEgASgDUgdiYWxhbmNlEjIKFHBlbmRpbmdfb3Blbl9iYWxhbmNlGAIg",
            "ASgDUhRwZW5kaW5nX29wZW5fYmFsYW5jZSLQBAoSUXVlcnlSb3V0ZXNSZXF1",
            "ZXN0Eg8KB3B1Yl9rZXkYASABKAkSCwoDYW10GAIgASgDEhAKCGFtdF9tc2F0",
            "GAwgASgDEhgKEGZpbmFsX2NsdHZfZGVsdGEYBCABKAUSIgoJZmVlX2xpbWl0",
            "GAUgASgLMg8ubG5ycGMuRmVlTGltaXQSFQoNaWdub3JlZF9ub2RlcxgGIAMo",
            "DBItCg1pZ25vcmVkX2VkZ2VzGAcgAygLMhIubG5ycGMuRWRnZUxvY2F0b3JC",
            "AhgBEhYKDnNvdXJjZV9wdWJfa2V5GAggASgJEhsKE3VzZV9taXNzaW9uX2Nv",
            "bnRyb2wYCSABKAgSJgoNaWdub3JlZF9wYWlycxgKIAMoCzIPLmxucnBjLk5v",
            "ZGVQYWlyEhIKCmNsdHZfbGltaXQYCyABKA0STQoTZGVzdF9jdXN0b21fcmVj",
            "b3JkcxgNIAMoCzIwLmxucnBjLlF1ZXJ5Um91dGVzUmVxdWVzdC5EZXN0Q3Vz",
            "dG9tUmVjb3Jkc0VudHJ5EhwKEG91dGdvaW5nX2NoYW5faWQYDiABKARCAjAB",
            "EhcKD2xhc3RfaG9wX3B1YmtleRgPIAEoDBIlCgtyb3V0ZV9oaW50cxgQIAMo",
            "CzIQLmxucnBjLlJvdXRlSGludBIoCg1kZXN0X2ZlYXR1cmVzGBEgAygOMhEu",
            "bG5ycGMuRmVhdHVyZUJpdBo4ChZEZXN0Q3VzdG9tUmVjb3Jkc0VudHJ5EgsK",
            "A2tleRgBIAEoBBINCgV2YWx1ZRgCIAEoDDoCOAFKBAgDEAQiJAoITm9kZVBh",
            "aXISDAoEZnJvbRgBIAEoDBIKCgJ0bxgCIAEoDCJACgtFZGdlTG9jYXRvchIW",
            "CgpjaGFubmVsX2lkGAEgASgEQgIwARIZChFkaXJlY3Rpb25fcmV2ZXJzZRgC",
            "IAEoCCJfChNRdWVyeVJvdXRlc1Jlc3BvbnNlEiQKBnJvdXRlcxgBIAMoCzIM",
            "LmxucnBjLlJvdXRlUgZyb3V0ZXMSIgoMc3VjY2Vzc19wcm9iGAIgASgBUgxz",
            "dWNjZXNzX3Byb2Ii3AMKA0hvcBIcCgdjaGFuX2lkGAEgASgEQgIwAVIHY2hh",
            "bl9pZBIkCg1jaGFuX2NhcGFjaXR5GAIgASgDUg1jaGFuX2NhcGFjaXR5EioK",
            "DmFtdF90b19mb3J3YXJkGAMgASgDQgIYAVIOYW10X3RvX2ZvcndhcmQSFAoD",
            "ZmVlGAQgASgDQgIYAVIDZmVlEhYKBmV4cGlyeRgFIAEoDVIGZXhwaXJ5EjAK",
            "E2FtdF90b19mb3J3YXJkX21zYXQYBiABKANSE2FtdF90b19mb3J3YXJkX21z",
            "YXQSGgoIZmVlX21zYXQYByABKANSCGZlZV9tc2F0EhgKB3B1Yl9rZXkYCCAB",
            "KAlSB3B1Yl9rZXkSIAoLdGx2X3BheWxvYWQYCSABKAhSC3Rsdl9wYXlsb2Fk",
            "EjAKCm1wcF9yZWNvcmQYCiABKAsyEC5sbnJwYy5NUFBSZWNvcmRSCm1wcF9y",
            "ZWNvcmQSRQoOY3VzdG9tX3JlY29yZHMYCyADKAsyHS5sbnJwYy5Ib3AuQ3Vz",
            "dG9tUmVjb3Jkc0VudHJ5Ug5jdXN0b21fcmVjb3Jkcxo0ChJDdXN0b21SZWNv",
            "cmRzRW50cnkSCwoDa2V5GAEgASgEEg0KBXZhbHVlGAIgASgMOgI4ASJXCglN",
            "UFBSZWNvcmQSIgoMcGF5bWVudF9hZGRyGAsgASgMUgxwYXltZW50X2FkZHIS",
            "JgoOdG90YWxfYW10X21zYXQYCiABKANSDnRvdGFsX2FtdF9tc2F0IukBCgVS",
            "b3V0ZRIoCg90b3RhbF90aW1lX2xvY2sYASABKA1SD3RvdGFsX3RpbWVfbG9j",
            "axIiCgp0b3RhbF9mZWVzGAIgASgDQgIYAVIKdG90YWxfZmVlcxIgCgl0b3Rh",
            "bF9hbXQYAyABKANCAhgBUgl0b3RhbF9hbXQSHgoEaG9wcxgEIAMoCzIKLmxu",
            "cnBjLkhvcFIEaG9wcxIoCg90b3RhbF9mZWVzX21zYXQYBSABKANSD3RvdGFs",
            "X2ZlZXNfbXNhdBImCg50b3RhbF9hbXRfbXNhdBgGIAEoA1IOdG90YWxfYW10",
            "X21zYXQiPAoPTm9kZUluZm9SZXF1ZXN0Eg8KB3B1Yl9rZXkYASABKAkSGAoQ",
            "aW5jbHVkZV9jaGFubmVscxgCIAEoCCKwAQoITm9kZUluZm8SKAoEbm9kZRgB",
            "IAEoCzIULmxucnBjLkxpZ2h0bmluZ05vZGVSBG5vZGUSIgoMbnVtX2NoYW5u",
            "ZWxzGAIgASgNUgxudW1fY2hhbm5lbHMSJgoOdG90YWxfY2FwYWNpdHkYAyAB",
            "KANSDnRvdGFsX2NhcGFjaXR5Ei4KCGNoYW5uZWxzGAQgAygLMhIubG5ycGMu",
            "Q2hhbm5lbEVkZ2VSCGNoYW5uZWxzIqoCCg1MaWdodG5pbmdOb2RlEiAKC2xh",
            "c3RfdXBkYXRlGAEgASgNUgtsYXN0X3VwZGF0ZRIYCgdwdWJfa2V5GAIgASgJ",
            "UgdwdWJfa2V5EhQKBWFsaWFzGAMgASgJUgVhbGlhcxIwCglhZGRyZXNzZXMY",
            "BCADKAsyEi5sbnJwYy5Ob2RlQWRkcmVzc1IJYWRkcmVzc2VzEhQKBWNvbG9y",
            "GAUgASgJUgVjb2xvchI+CghmZWF0dXJlcxgGIAMoCzIiLmxucnBjLkxpZ2h0",
            "bmluZ05vZGUuRmVhdHVyZXNFbnRyeVIIZmVhdHVyZXMaPwoNRmVhdHVyZXNF",
            "bnRyeRILCgNrZXkYASABKA0SHQoFdmFsdWUYAiABKAsyDi5sbnJwYy5GZWF0",
            "dXJlOgI4ASI7CgtOb2RlQWRkcmVzcxIYCgduZXR3b3JrGAEgASgJUgduZXR3",
            "b3JrEhIKBGFkZHIYAiABKAlSBGFkZHIikQIKDVJvdXRpbmdQb2xpY3kSKAoP",
            "dGltZV9sb2NrX2RlbHRhGAEgASgNUg90aW1lX2xvY2tfZGVsdGESGgoIbWlu",
            "X2h0bGMYAiABKANSCG1pbl9odGxjEiQKDWZlZV9iYXNlX21zYXQYAyABKANS",
            "DWZlZV9iYXNlX21zYXQSMAoTZmVlX3JhdGVfbWlsbGlfbXNhdBgEIAEoA1IT",
            "ZmVlX3JhdGVfbWlsbGlfbXNhdBIaCghkaXNhYmxlZBgFIAEoCFIIZGlzYWJs",
            "ZWQSJAoNbWF4X2h0bGNfbXNhdBgGIAEoBFINbWF4X2h0bGNfbXNhdBIgCgts",
            "YXN0X3VwZGF0ZRgHIAEoDVILbGFzdF91cGRhdGUiwwIKC0NoYW5uZWxFZGdl",
            "EiIKCmNoYW5uZWxfaWQYASABKARCAjABUgpjaGFubmVsX2lkEh4KCmNoYW5f",
            "cG9pbnQYAiABKAlSCmNoYW5fcG9pbnQSJAoLbGFzdF91cGRhdGUYAyABKA1C",
            "AhgBUgtsYXN0X3VwZGF0ZRIcCglub2RlMV9wdWIYBCABKAlSCW5vZGUxX3B1",
            "YhIcCglub2RlMl9wdWIYBSABKAlSCW5vZGUyX3B1YhIaCghjYXBhY2l0eRgG",
            "IAEoA1IIY2FwYWNpdHkSOAoMbm9kZTFfcG9saWN5GAcgASgLMhQubG5ycGMu",
            "Um91dGluZ1BvbGljeVIMbm9kZTFfcG9saWN5EjgKDG5vZGUyX3BvbGljeRgI",
            "IAEoCzIULmxucnBjLlJvdXRpbmdQb2xpY3lSDG5vZGUyX3BvbGljeSJHChND",
            "aGFubmVsR3JhcGhSZXF1ZXN0EjAKE2luY2x1ZGVfdW5hbm5vdW5jZWQYASAB",
            "KAhSE2luY2x1ZGVfdW5hbm5vdW5jZWQiZAoMQ2hhbm5lbEdyYXBoEioKBW5v",
            "ZGVzGAEgAygLMhQubG5ycGMuTGlnaHRuaW5nTm9kZVIFbm9kZXMSKAoFZWRn",
            "ZXMYAiADKAsyEi5sbnJwYy5DaGFubmVsRWRnZVIFZWRnZXMiJgoPQ2hhbklu",
            "Zm9SZXF1ZXN0EhMKB2NoYW5faWQYASABKARCAjABIhQKEk5ldHdvcmtJbmZv",
            "UmVxdWVzdCLpAwoLTmV0d29ya0luZm8SJgoOZ3JhcGhfZGlhbWV0ZXIYASAB",
            "KA1SDmdyYXBoX2RpYW1ldGVyEiYKDmF2Z19vdXRfZGVncmVlGAIgASgBUg5h",
            "dmdfb3V0X2RlZ3JlZRImCg5tYXhfb3V0X2RlZ3JlZRgDIAEoDVIObWF4X291",
            "dF9kZWdyZWUSHAoJbnVtX25vZGVzGAQgASgNUgludW1fbm9kZXMSIgoMbnVt",
            "X2NoYW5uZWxzGAUgASgNUgxudW1fY2hhbm5lbHMSNgoWdG90YWxfbmV0d29y",
            "a19jYXBhY2l0eRgGIAEoA1IWdG90YWxfbmV0d29ya19jYXBhY2l0eRIqChBh",
            "dmdfY2hhbm5lbF9zaXplGAcgASgBUhBhdmdfY2hhbm5lbF9zaXplEioKEG1p",
            "bl9jaGFubmVsX3NpemUYCCABKANSEG1pbl9jaGFubmVsX3NpemUSKgoQbWF4",
            "X2NoYW5uZWxfc2l6ZRgJIAEoA1IQbWF4X2NoYW5uZWxfc2l6ZRI4ChdtZWRp",
            "YW5fY2hhbm5lbF9zaXplX3NhdBgKIAEoA1IXbWVkaWFuX2NoYW5uZWxfc2l6",
            "ZV9zYXQSKgoQbnVtX3pvbWJpZV9jaGFucxgLIAEoBFIQbnVtX3pvbWJpZV9j",
            "aGFucyINCgtTdG9wUmVxdWVzdCIOCgxTdG9wUmVzcG9uc2UiGwoZR3JhcGhU",
            "b3BvbG9neVN1YnNjcmlwdGlvbiKjAQoTR3JhcGhUb3BvbG9neVVwZGF0ZRIn",
            "Cgxub2RlX3VwZGF0ZXMYASADKAsyES5sbnJwYy5Ob2RlVXBkYXRlEjEKD2No",
            "YW5uZWxfdXBkYXRlcxgCIAMoCzIYLmxucnBjLkNoYW5uZWxFZGdlVXBkYXRl",
            "EjAKDGNsb3NlZF9jaGFucxgDIAMoCzIaLmxucnBjLkNsb3NlZENoYW5uZWxV",
            "cGRhdGUibAoKTm9kZVVwZGF0ZRIRCglhZGRyZXNzZXMYASADKAkSFAoMaWRl",
            "bnRpdHlfa2V5GAIgASgJEhcKD2dsb2JhbF9mZWF0dXJlcxgDIAEoDBINCgVh",
            "bGlhcxgEIAEoCRINCgVjb2xvchgFIAEoCSLEAQoRQ2hhbm5lbEVkZ2VVcGRh",
            "dGUSEwoHY2hhbl9pZBgBIAEoBEICMAESJwoKY2hhbl9wb2ludBgCIAEoCzIT",
            "LmxucnBjLkNoYW5uZWxQb2ludBIQCghjYXBhY2l0eRgDIAEoAxIsCg5yb3V0",
            "aW5nX3BvbGljeRgEIAEoCzIULmxucnBjLlJvdXRpbmdQb2xpY3kSGAoQYWR2",
            "ZXJ0aXNpbmdfbm9kZRgFIAEoCRIXCg9jb25uZWN0aW5nX25vZGUYBiABKAki",
            "fAoTQ2xvc2VkQ2hhbm5lbFVwZGF0ZRITCgdjaGFuX2lkGAEgASgEQgIwARIQ",
            "CghjYXBhY2l0eRgCIAEoAxIVCg1jbG9zZWRfaGVpZ2h0GAMgASgNEicKCmNo",
            "YW5fcG9pbnQYBCABKAsyEy5sbnJwYy5DaGFubmVsUG9pbnQi1wEKB0hvcEhp",
            "bnQSGAoHbm9kZV9pZBgBIAEoCVIHbm9kZV9pZBIcCgdjaGFuX2lkGAIgASgE",
            "QgIwAVIHY2hhbl9pZBIkCg1mZWVfYmFzZV9tc2F0GAMgASgNUg1mZWVfYmFz",
            "ZV9tc2F0EkAKG2ZlZV9wcm9wb3J0aW9uYWxfbWlsbGlvbnRocxgEIAEoDVIb",
            "ZmVlX3Byb3BvcnRpb25hbF9taWxsaW9udGhzEiwKEWNsdHZfZXhwaXJ5X2Rl",
            "bHRhGAUgASgNUhFjbHR2X2V4cGlyeV9kZWx0YSI5CglSb3V0ZUhpbnQSLAoJ",
            "aG9wX2hpbnRzGAEgAygLMg4ubG5ycGMuSG9wSGludFIJaG9wX2hpbnRzIuIH",
            "CgdJbnZvaWNlEhIKBG1lbW8YASABKAlSBG1lbW8SHgoKcl9wcmVpbWFnZRgD",
            "IAEoDFIKcl9wcmVpbWFnZRIWCgZyX2hhc2gYBCABKAxSBnJfaGFzaBIUCgV2",
            "YWx1ZRgFIAEoA1IFdmFsdWUSHgoKdmFsdWVfbXNhdBgXIAEoA1IKdmFsdWVf",
            "bXNhdBIcCgdzZXR0bGVkGAYgASgIQgIYAVIHc2V0dGxlZBIkCg1jcmVhdGlv",
            "bl9kYXRlGAcgASgDUg1jcmVhdGlvbl9kYXRlEiAKC3NldHRsZV9kYXRlGAgg",
            "ASgDUgtzZXR0bGVfZGF0ZRIoCg9wYXltZW50X3JlcXVlc3QYCSABKAlSD3Bh",
            "eW1lbnRfcmVxdWVzdBIqChBkZXNjcmlwdGlvbl9oYXNoGAogASgMUhBkZXNj",
            "cmlwdGlvbl9oYXNoEhYKBmV4cGlyeRgLIAEoA1IGZXhwaXJ5EiQKDWZhbGxi",
            "YWNrX2FkZHIYDCABKAlSDWZhbGxiYWNrX2FkZHISIAoLY2x0dl9leHBpcnkY",
            "DSABKARSC2NsdHZfZXhwaXJ5EjIKC3JvdXRlX2hpbnRzGA4gAygLMhAubG5y",
            "cGMuUm91dGVIaW50Ugtyb3V0ZV9oaW50cxIYCgdwcml2YXRlGA8gASgIUgdw",
            "cml2YXRlEhwKCWFkZF9pbmRleBgQIAEoBFIJYWRkX2luZGV4EiIKDHNldHRs",
            "ZV9pbmRleBgRIAEoBFIMc2V0dGxlX2luZGV4Eh4KCGFtdF9wYWlkGBIgASgD",
            "QgIYAVIIYW10X3BhaWQSIgoMYW10X3BhaWRfc2F0GBMgASgDUgxhbXRfcGFp",
            "ZF9zYXQSJAoNYW10X3BhaWRfbXNhdBgUIAEoA1INYW10X3BhaWRfbXNhdBIx",
            "CgVzdGF0ZRgVIAEoDjIbLmxucnBjLkludm9pY2UuSW52b2ljZVN0YXRlUgVz",
            "dGF0ZRIoCgVodGxjcxgWIAMoCzISLmxucnBjLkludm9pY2VIVExDUgVodGxj",
            "cxI4CghmZWF0dXJlcxgYIAMoCzIcLmxucnBjLkludm9pY2UuRmVhdHVyZXNF",
            "bnRyeVIIZmVhdHVyZXMSHgoKaXNfa2V5c2VuZBgZIAEoCFIKaXNfa2V5c2Vu",
            "ZBo/Cg1GZWF0dXJlc0VudHJ5EgsKA2tleRgBIAEoDRIdCgV2YWx1ZRgCIAEo",
            "CzIOLmxucnBjLkZlYXR1cmU6AjgBIkEKDEludm9pY2VTdGF0ZRIICgRPUEVO",
            "EAASCwoHU0VUVExFRBABEgwKCENBTkNFTEVEEAISDAoIQUNDRVBURUQQA0oE",
            "CAIQAyLdAwoLSW52b2ljZUhUTEMSHAoHY2hhbl9pZBgBIAEoBEICMAFSB2No",
            "YW5faWQSHgoKaHRsY19pbmRleBgCIAEoBFIKaHRsY19pbmRleBIaCghhbXRf",
            "bXNhdBgDIAEoBFIIYW10X21zYXQSJAoNYWNjZXB0X2hlaWdodBgEIAEoBVIN",
            "YWNjZXB0X2hlaWdodBIgCgthY2NlcHRfdGltZRgFIAEoA1ILYWNjZXB0X3Rp",
            "bWUSIgoMcmVzb2x2ZV90aW1lGAYgASgDUgxyZXNvbHZlX3RpbWUSJAoNZXhw",
            "aXJ5X2hlaWdodBgHIAEoBVINZXhwaXJ5X2hlaWdodBItCgVzdGF0ZRgIIAEo",
            "DjIXLmxucnBjLkludm9pY2VIVExDU3RhdGVSBXN0YXRlEk0KDmN1c3RvbV9y",
            "ZWNvcmRzGAkgAygLMiUubG5ycGMuSW52b2ljZUhUTEMuQ3VzdG9tUmVjb3Jk",
            "c0VudHJ5Ug5jdXN0b21fcmVjb3JkcxIuChJtcHBfdG90YWxfYW10X21zYXQY",
            "CiABKARSEm1wcF90b3RhbF9hbXRfbXNhdBo0ChJDdXN0b21SZWNvcmRzRW50",
            "cnkSCwoDa2V5GAEgASgEEg0KBXZhbHVlGAIgASgMOgI4ASJ0ChJBZGRJbnZv",
            "aWNlUmVzcG9uc2USFgoGcl9oYXNoGAEgASgMUgZyX2hhc2gSKAoPcGF5bWVu",
            "dF9yZXF1ZXN0GAIgASgJUg9wYXltZW50X3JlcXVlc3QSHAoJYWRkX2luZGV4",
            "GBAgASgEUglhZGRfaW5kZXgiSQoLUGF5bWVudEhhc2gSIgoKcl9oYXNoX3N0",
            "chgBIAEoCUICGAFSCnJfaGFzaF9zdHISFgoGcl9oYXNoGAIgASgMUgZyX2hh",
            "c2gipAEKEkxpc3RJbnZvaWNlUmVxdWVzdBIiCgxwZW5kaW5nX29ubHkYASAB",
            "KAhSDHBlbmRpbmdfb25seRIiCgxpbmRleF9vZmZzZXQYBCABKARSDGluZGV4",
            "X29mZnNldBIqChBudW1fbWF4X2ludm9pY2VzGAUgASgEUhBudW1fbWF4X2lu",
            "dm9pY2VzEhoKCHJldmVyc2VkGAYgASgIUghyZXZlcnNlZCKfAQoTTGlzdElu",
            "dm9pY2VSZXNwb25zZRIqCghpbnZvaWNlcxgBIAMoCzIOLmxucnBjLkludm9p",
            "Y2VSCGludm9pY2VzEiwKEWxhc3RfaW5kZXhfb2Zmc2V0GAIgASgEUhFsYXN0",
            "X2luZGV4X29mZnNldBIuChJmaXJzdF9pbmRleF9vZmZzZXQYAyABKARSEmZp",
            "cnN0X2luZGV4X29mZnNldCJXChNJbnZvaWNlU3Vic2NyaXB0aW9uEhwKCWFk",
            "ZF9pbmRleBgBIAEoBFIJYWRkX2luZGV4EiIKDHNldHRsZV9pbmRleBgCIAEo",
            "BFIMc2V0dGxlX2luZGV4Ir0ECgdQYXltZW50EiIKDHBheW1lbnRfaGFzaBgB",
            "IAEoCVIMcGF5bWVudF9oYXNoEhgKBXZhbHVlGAIgASgDQgIYAVIFdmFsdWUS",
            "KAoNY3JlYXRpb25fZGF0ZRgDIAEoA0ICGAFSDWNyZWF0aW9uX2RhdGUSFgoE",
            "cGF0aBgEIAMoCUICGAFSBHBhdGgSFAoDZmVlGAUgASgDQgIYAVIDZmVlEioK",
            "EHBheW1lbnRfcHJlaW1hZ2UYBiABKAlSEHBheW1lbnRfcHJlaW1hZ2USHAoJ",
            "dmFsdWVfc2F0GAcgASgDUgl2YWx1ZV9zYXQSHgoKdmFsdWVfbXNhdBgIIAEo",
            "A1IKdmFsdWVfbXNhdBIoCg9wYXltZW50X3JlcXVlc3QYCSABKAlSD3BheW1l",
            "bnRfcmVxdWVzdBI0CgZzdGF0dXMYCiABKA4yHC5sbnJwYy5QYXltZW50LlBh",
            "eW1lbnRTdGF0dXNSBnN0YXR1cxIYCgdmZWVfc2F0GAsgASgDUgdmZWVfc2F0",
            "EhoKCGZlZV9tc2F0GAwgASgDUghmZWVfbXNhdBIqChBjcmVhdGlvbl90aW1l",
            "X25zGA0gASgDUhBjcmVhdGlvbl90aW1lX25zEigKBWh0bGNzGA4gAygLMhIu",
            "bG5ycGMuSFRMQ0F0dGVtcHRSBWh0bGNzIkYKDVBheW1lbnRTdGF0dXMSCwoH",
            "VU5LTk9XThAAEg0KCUlOX0ZMSUdIVBABEg0KCVNVQ0NFRURFRBACEgoKBkZB",
            "SUxFRBADIvQBCgtIVExDQXR0ZW1wdBI1CgZzdGF0dXMYASABKA4yHS5sbnJw",
            "Yy5IVExDQXR0ZW1wdC5IVExDU3RhdHVzUgZzdGF0dXMSIgoFcm91dGUYAiAB",
            "KAsyDC5sbnJwYy5Sb3V0ZVIFcm91dGUSKAoPYXR0ZW1wdF90aW1lX25zGAMg",
            "ASgDUg9hdHRlbXB0X3RpbWVfbnMSKAoPcmVzb2x2ZV90aW1lX25zGAQgASgD",
            "Ug9yZXNvbHZlX3RpbWVfbnMiNgoKSFRMQ1N0YXR1cxINCglJTl9GTElHSFQQ",
            "ABINCglTVUNDRUVERUQQARIKCgZGQUlMRUQQAiIxChNMaXN0UGF5bWVudHNS",
            "ZXF1ZXN0EhoKEmluY2x1ZGVfaW5jb21wbGV0ZRgBIAEoCCJCChRMaXN0UGF5",
            "bWVudHNSZXNwb25zZRIqCghwYXltZW50cxgBIAMoCzIOLmxucnBjLlBheW1l",
            "bnRSCHBheW1lbnRzIhoKGERlbGV0ZUFsbFBheW1lbnRzUmVxdWVzdCIbChlE",
            "ZWxldGVBbGxQYXltZW50c1Jlc3BvbnNlIkMKFUFiYW5kb25DaGFubmVsUmVx",
            "dWVzdBIqCg1jaGFubmVsX3BvaW50GAEgASgLMhMubG5ycGMuQ2hhbm5lbFBv",
            "aW50IhgKFkFiYW5kb25DaGFubmVsUmVzcG9uc2UiNQoRRGVidWdMZXZlbFJl",
            "cXVlc3QSDAoEc2hvdxgBIAEoCBISCgpsZXZlbF9zcGVjGAIgASgJIjYKEkRl",
            "YnVnTGV2ZWxSZXNwb25zZRIgCgtzdWJfc3lzdGVtcxgBIAEoCVILc3ViX3N5",
            "c3RlbXMiHwoMUGF5UmVxU3RyaW5nEg8KB3BheV9yZXEYASABKAkirAQKBlBh",
            "eVJlcRIgCgtkZXN0aW5hdGlvbhgBIAEoCVILZGVzdGluYXRpb24SIgoMcGF5",
            "bWVudF9oYXNoGAIgASgJUgxwYXltZW50X2hhc2gSIgoMbnVtX3NhdG9zaGlz",
            "GAMgASgDUgxudW1fc2F0b3NoaXMSHAoJdGltZXN0YW1wGAQgASgDUgl0aW1l",
            "c3RhbXASFgoGZXhwaXJ5GAUgASgDUgZleHBpcnkSIAoLZGVzY3JpcHRpb24Y",
            "BiABKAlSC2Rlc2NyaXB0aW9uEioKEGRlc2NyaXB0aW9uX2hhc2gYByABKAlS",
            "EGRlc2NyaXB0aW9uX2hhc2gSJAoNZmFsbGJhY2tfYWRkchgIIAEoCVINZmFs",
            "bGJhY2tfYWRkchIgCgtjbHR2X2V4cGlyeRgJIAEoA1ILY2x0dl9leHBpcnkS",
            "MgoLcm91dGVfaGludHMYCiADKAsyEC5sbnJwYy5Sb3V0ZUhpbnRSC3JvdXRl",
            "X2hpbnRzEiIKDHBheW1lbnRfYWRkchgLIAEoDFIMcGF5bWVudF9hZGRyEhoK",
            "CG51bV9tc2F0GAwgASgDUghudW1fbXNhdBI3CghmZWF0dXJlcxgNIAMoCzIb",
            "LmxucnBjLlBheVJlcS5GZWF0dXJlc0VudHJ5UghmZWF0dXJlcxo/Cg1GZWF0",
            "dXJlc0VudHJ5EgsKA2tleRgBIAEoDRIdCgV2YWx1ZRgCIAEoCzIOLmxucnBj",
            "LkZlYXR1cmU6AjgBIlsKB0ZlYXR1cmUSEgoEbmFtZRgCIAEoCVIEbmFtZRIg",
            "Cgtpc19yZXF1aXJlZBgDIAEoCFILaXNfcmVxdWlyZWQSGgoIaXNfa25vd24Y",
            "BCABKAhSCGlzX2tub3duIhIKEEZlZVJlcG9ydFJlcXVlc3QimQEKEENoYW5u",
            "ZWxGZWVSZXBvcnQSIQoKY2hhbl9wb2ludBgBIAEoCVINY2hhbm5lbF9wb2lu",
            "dBIkCg1iYXNlX2ZlZV9tc2F0GAIgASgDUg1iYXNlX2ZlZV9tc2F0EiAKC2Zl",
            "ZV9wZXJfbWlsGAMgASgDUgtmZWVfcGVyX21pbBIaCghmZWVfcmF0ZRgEIAEo",
            "AVIIZmVlX3JhdGUivAEKEUZlZVJlcG9ydFJlc3BvbnNlEjsKDGNoYW5uZWxf",
            "ZmVlcxgBIAMoCzIXLmxucnBjLkNoYW5uZWxGZWVSZXBvcnRSDGNoYW5uZWxf",
            "ZmVlcxIgCgtkYXlfZmVlX3N1bRgCIAEoBFILZGF5X2ZlZV9zdW0SIgoMd2Vl",
            "a19mZWVfc3VtGAMgASgEUgx3ZWVrX2ZlZV9zdW0SJAoNbW9udGhfZmVlX3N1",
            "bRgEIAEoBFINbW9udGhfZmVlX3N1bSLbAgoTUG9saWN5VXBkYXRlUmVxdWVz",
            "dBIYCgZnbG9iYWwYASABKAhIAFIGZ2xvYmFsEjUKCmNoYW5fcG9pbnQYAiAB",
            "KAsyEy5sbnJwYy5DaGFubmVsUG9pbnRIAFIKY2hhbl9wb2ludBIkCg1iYXNl",
            "X2ZlZV9tc2F0GAMgASgDUg1iYXNlX2ZlZV9tc2F0EhoKCGZlZV9yYXRlGAQg",
            "ASgBUghmZWVfcmF0ZRIoCg90aW1lX2xvY2tfZGVsdGEYBSABKA1SD3RpbWVf",
            "bG9ja19kZWx0YRIkCg1tYXhfaHRsY19tc2F0GAYgASgEUg1tYXhfaHRsY19t",
            "c2F0EiQKDW1pbl9odGxjX21zYXQYByABKARSDW1pbl9odGxjX21zYXQSMgoX",
            "bWluX2h0bGNfbXNhdF9zcGVjaWZpZWQYCCABKAhSEXNldF9taW5faHRsY19t",
            "c2F0QgcKBXNjb3BlIhYKFFBvbGljeVVwZGF0ZVJlc3BvbnNlIqIBChhGb3J3",
            "YXJkaW5nSGlzdG9yeVJlcXVlc3QSHgoKc3RhcnRfdGltZRgBIAEoBFIKc3Rh",
            "cnRfdGltZRIaCghlbmRfdGltZRgCIAEoBFIIZW5kX3RpbWUSIgoMaW5kZXhf",
            "b2Zmc2V0GAMgASgNUgxpbmRleF9vZmZzZXQSJgoObnVtX21heF9ldmVudHMY",
            "BCABKA1SDm51bV9tYXhfZXZlbnRzIp8CCg9Gb3J3YXJkaW5nRXZlbnQSHAoJ",
            "dGltZXN0YW1wGAEgASgEUgl0aW1lc3RhbXASIgoKY2hhbl9pZF9pbhgCIAEo",
            "BEICMAFSCmNoYW5faWRfaW4SJAoLY2hhbl9pZF9vdXQYBCABKARCAjABUgtj",
            "aGFuX2lkX291dBIWCgZhbXRfaW4YBSABKARSBmFtdF9pbhIYCgdhbXRfb3V0",
            "GAYgASgEUgdhbXRfb3V0EhAKA2ZlZRgHIAEoBFIDZmVlEhoKCGZlZV9tc2F0",
            "GAggASgEUghmZWVfbXNhdBIgCgthbXRfaW5fbXNhdBgJIAEoBFILYW10X2lu",
            "X21zYXQSIgoMYW10X291dF9tc2F0GAogASgEUgxhbXRfb3V0X21zYXQijwEK",
            "GUZvcndhcmRpbmdIaXN0b3J5UmVzcG9uc2USRAoRZm9yd2FyZGluZ19ldmVu",
            "dHMYASADKAsyFi5sbnJwYy5Gb3J3YXJkaW5nRXZlbnRSEWZvcndhcmRpbmdf",
            "ZXZlbnRzEiwKEWxhc3Rfb2Zmc2V0X2luZGV4GAIgASgNUhFsYXN0X29mZnNl",
            "dF9pbmRleCJFChpFeHBvcnRDaGFubmVsQmFja3VwUmVxdWVzdBInCgpjaGFu",
            "X3BvaW50GAEgASgLMhMubG5ycGMuQ2hhbm5lbFBvaW50ImYKDUNoYW5uZWxC",
            "YWNrdXASMwoKY2hhbl9wb2ludBgBIAEoCzITLmxucnBjLkNoYW5uZWxQb2lu",
            "dFIKY2hhbl9wb2ludBIgCgtjaGFuX2JhY2t1cBgCIAEoDFILY2hhbl9iYWNr",
            "dXAidgoPTXVsdGlDaGFuQmFja3VwEjUKC2NoYW5fcG9pbnRzGAEgAygLMhMu",
            "bG5ycGMuQ2hhbm5lbFBvaW50UgtjaGFuX3BvaW50cxIsChFtdWx0aV9jaGFu",
            "X2JhY2t1cBgCIAEoDFIRbXVsdGlfY2hhbl9iYWNrdXAiGQoXQ2hhbkJhY2t1",
            "cEV4cG9ydFJlcXVlc3QiowEKEkNoYW5CYWNrdXBTbmFwc2hvdBJHChNzaW5n",
            "bGVfY2hhbl9iYWNrdXBzGAEgASgLMhUubG5ycGMuQ2hhbm5lbEJhY2t1cHNS",
            "E3NpbmdsZV9jaGFuX2JhY2t1cHMSRAoRbXVsdGlfY2hhbl9iYWNrdXAYAiAB",
            "KAsyFi5sbnJwYy5NdWx0aUNoYW5CYWNrdXBSEW11bHRpX2NoYW5fYmFja3Vw",
            "IkoKDkNoYW5uZWxCYWNrdXBzEjgKDGNoYW5fYmFja3VwcxgBIAMoCzIULmxu",
            "cnBjLkNoYW5uZWxCYWNrdXBSDGNoYW5fYmFja3VwcyKRAQoYUmVzdG9yZUNo",
            "YW5CYWNrdXBSZXF1ZXN0EjsKDGNoYW5fYmFja3VwcxgBIAEoCzIVLmxucnBj",
            "LkNoYW5uZWxCYWNrdXBzSABSDGNoYW5fYmFja3VwcxIuChFtdWx0aV9jaGFu",
            "X2JhY2t1cBgCIAEoDEgAUhFtdWx0aV9jaGFuX2JhY2t1cEIICgZiYWNrdXAi",
            "FwoVUmVzdG9yZUJhY2t1cFJlc3BvbnNlIhsKGUNoYW5uZWxCYWNrdXBTdWJz",
            "Y3JpcHRpb24iGgoYVmVyaWZ5Q2hhbkJhY2t1cFJlc3BvbnNlIkQKEk1hY2Fy",
            "b29uUGVybWlzc2lvbhIWCgZlbnRpdHkYASABKAlSBmVudGl0eRIWCgZhY3Rp",
            "b24YAiABKAlSBmFjdGlvbiJSChNCYWtlTWFjYXJvb25SZXF1ZXN0EjsKC3Bl",
            "cm1pc3Npb25zGAEgAygLMhkubG5ycGMuTWFjYXJvb25QZXJtaXNzaW9uUgtw",
            "ZXJtaXNzaW9ucyIyChRCYWtlTWFjYXJvb25SZXNwb25zZRIaCghtYWNhcm9v",
            "bhgBIAEoCVIIbWFjYXJvb24qfQoLQWRkcmVzc1R5cGUSFwoTV0lUTkVTU19Q",
            "VUJLRVlfSEFTSBAAEhYKEk5FU1RFRF9QVUJLRVlfSEFTSBABEh4KGlVOVVNF",
            "RF9XSVRORVNTX1BVQktFWV9IQVNIEAISHQoZVU5VU0VEX05FU1RFRF9QVUJL",
            "RVlfSEFTSBADKjsKEEludm9pY2VIVExDU3RhdGUSDAoIQUNDRVBURUQQABIL",
            "CgdTRVRUTEVEEAESDAoIQ0FOQ0VMRUQQAiqlAwoKRmVhdHVyZUJpdBIYChRE",
            "QVRBTE9TU19QUk9URUNUX1JFURAAEhgKFERBVEFMT1NTX1BST1RFQ1RfT1BU",
            "EAESFwoTSU5JVElBTF9ST1VJTkdfU1lOQxADEh8KG1VQRlJPTlRfU0hVVERP",
            "V05fU0NSSVBUX1JFURAEEh8KG1VQRlJPTlRfU0hVVERPV05fU0NSSVBUX09Q",
            "VBAFEhYKEkdPU1NJUF9RVUVSSUVTX1JFURAGEhYKEkdPU1NJUF9RVUVSSUVT",
            "X09QVBAHEhEKDVRMVl9PTklPTl9SRVEQCBIRCg1UTFZfT05JT05fT1BUEAkS",
            "GgoWRVhUX0dPU1NJUF9RVUVSSUVTX1JFURAKEhoKFkVYVF9HT1NTSVBfUVVF",
            "UklFU19PUFQQCxIZChVTVEFUSUNfUkVNT1RFX0tFWV9SRVEQDBIZChVTVEFU",
            "SUNfUkVNT1RFX0tFWV9PUFQQDRIUChBQQVlNRU5UX0FERFJfUkVREA4SFAoQ",
            "UEFZTUVOVF9BRERSX09QVBAPEgsKB01QUF9SRVEQEBILCgdNUFBfT1BUEBEy",
            "kQMKDldhbGxldFVubG9ja2VyEk0KB0dlblNlZWQSFS5sbnJwYy5HZW5TZWVk",
            "UmVxdWVzdBoWLmxucnBjLkdlblNlZWRSZXNwb25zZSITgtPkkwINEgsvdjEv",
            "Z2Vuc2VlZBJcCgpJbml0V2FsbGV0EhgubG5ycGMuSW5pdFdhbGxldFJlcXVl",
            "c3QaGS5sbnJwYy5Jbml0V2FsbGV0UmVzcG9uc2UiGYLT5JMCEyIOL3YxL2lu",
            "aXR3YWxsZXQ6ASoSZAoMVW5sb2NrV2FsbGV0EhoubG5ycGMuVW5sb2NrV2Fs",
            "bGV0UmVxdWVzdBobLmxucnBjLlVubG9ja1dhbGxldFJlc3BvbnNlIhuC0+ST",
            "AhUiEC92MS91bmxvY2t3YWxsZXQ6ASoSbAoOQ2hhbmdlUGFzc3dvcmQSHC5s",
            "bnJwYy5DaGFuZ2VQYXNzd29yZFJlcXVlc3QaHS5sbnJwYy5DaGFuZ2VQYXNz",
            "d29yZFJlc3BvbnNlIh2C0+STAhciEi92MS9jaGFuZ2VwYXNzd29yZDoBKjLh",
            "KAoJTGlnaHRuaW5nEmoKDVdhbGxldEJhbGFuY2USGy5sbnJwYy5XYWxsZXRC",
            "YWxhbmNlUmVxdWVzdBocLmxucnBjLldhbGxldEJhbGFuY2VSZXNwb25zZSIe",
            "gtPkkwIYEhYvdjEvYmFsYW5jZS9ibG9ja2NoYWluEmsKDkNoYW5uZWxCYWxh",
            "bmNlEhwubG5ycGMuQ2hhbm5lbEJhbGFuY2VSZXF1ZXN0Gh0ubG5ycGMuQ2hh",
            "bm5lbEJhbGFuY2VSZXNwb25zZSIcgtPkkwIWEhQvdjEvYmFsYW5jZS9jaGFu",
            "bmVscxJlCg9HZXRUcmFuc2FjdGlvbnMSHS5sbnJwYy5HZXRUcmFuc2FjdGlv",
            "bnNSZXF1ZXN0GhkubG5ycGMuVHJhbnNhY3Rpb25EZXRhaWxzIhiC0+STAhIS",
            "EC92MS90cmFuc2FjdGlvbnMSYgoLRXN0aW1hdGVGZWUSGS5sbnJwYy5Fc3Rp",
            "bWF0ZUZlZVJlcXVlc3QaGi5sbnJwYy5Fc3RpbWF0ZUZlZVJlc3BvbnNlIhyC",
            "0+STAhYSFC92MS90cmFuc2FjdGlvbnMvZmVlElsKCVNlbmRDb2lucxIXLmxu",
            "cnBjLlNlbmRDb2luc1JlcXVlc3QaGC5sbnJwYy5TZW5kQ29pbnNSZXNwb25z",
            "ZSIbgtPkkwIVIhAvdjEvdHJhbnNhY3Rpb25zOgEqElcKC0xpc3RVbnNwZW50",
            "EhkubG5ycGMuTGlzdFVuc3BlbnRSZXF1ZXN0GhoubG5ycGMuTGlzdFVuc3Bl",
            "bnRSZXNwb25zZSIRgtPkkwILEgkvdjEvdXR4b3MSTAoVU3Vic2NyaWJlVHJh",
            "bnNhY3Rpb25zEh0ubG5ycGMuR2V0VHJhbnNhY3Rpb25zUmVxdWVzdBoSLmxu",
            "cnBjLlRyYW5zYWN0aW9uMAESOwoIU2VuZE1hbnkSFi5sbnJwYy5TZW5kTWFu",
            "eVJlcXVlc3QaFy5sbnJwYy5TZW5kTWFueVJlc3BvbnNlElkKCk5ld0FkZHJl",
            "c3MSGC5sbnJwYy5OZXdBZGRyZXNzUmVxdWVzdBoZLmxucnBjLk5ld0FkZHJl",
            "c3NSZXNwb25zZSIWgtPkkwIQEg4vdjEvbmV3YWRkcmVzcxJgCgtTaWduTWVz",
            "c2FnZRIZLmxucnBjLlNpZ25NZXNzYWdlUmVxdWVzdBoaLmxucnBjLlNpZ25N",
            "ZXNzYWdlUmVzcG9uc2UiGoLT5JMCFCIPL3YxL3NpZ25tZXNzYWdlOgEqEmgK",
            "DVZlcmlmeU1lc3NhZ2USGy5sbnJwYy5WZXJpZnlNZXNzYWdlUmVxdWVzdBoc",
            "LmxucnBjLlZlcmlmeU1lc3NhZ2VSZXNwb25zZSIcgtPkkwIWIhEvdjEvdmVy",
            "aWZ5bWVzc2FnZToBKhJaCgtDb25uZWN0UGVlchIZLmxucnBjLkNvbm5lY3RQ",
            "ZWVyUmVxdWVzdBoaLmxucnBjLkNvbm5lY3RQZWVyUmVzcG9uc2UiFILT5JMC",
            "DiIJL3YxL3BlZXJzOgEqEmoKDkRpc2Nvbm5lY3RQZWVyEhwubG5ycGMuRGlz",
            "Y29ubmVjdFBlZXJSZXF1ZXN0Gh0ubG5ycGMuRGlzY29ubmVjdFBlZXJSZXNw",
            "b25zZSIbgtPkkwIVKhMvdjEvcGVlcnMve3B1Yl9rZXl9ElEKCUxpc3RQZWVy",
            "cxIXLmxucnBjLkxpc3RQZWVyc1JlcXVlc3QaGC5sbnJwYy5MaXN0UGVlcnNS",
            "ZXNwb25zZSIRgtPkkwILEgkvdjEvcGVlcnMSRwoTU3Vic2NyaWJlUGVlckV2",
            "ZW50cxIcLmxucnBjLlBlZXJFdmVudFN1YnNjcmlwdGlvbhoQLmxucnBjLlBl",
            "ZXJFdmVudDABEk0KB0dldEluZm8SFS5sbnJwYy5HZXRJbmZvUmVxdWVzdBoW",
            "LmxucnBjLkdldEluZm9SZXNwb25zZSITgtPkkwINEgsvdjEvZ2V0aW5mbxJu",
            "Cg9QZW5kaW5nQ2hhbm5lbHMSHS5sbnJwYy5QZW5kaW5nQ2hhbm5lbHNSZXF1",
            "ZXN0Gh4ubG5ycGMuUGVuZGluZ0NoYW5uZWxzUmVzcG9uc2UiHILT5JMCFhIU",
            "L3YxL2NoYW5uZWxzL3BlbmRpbmcSXQoMTGlzdENoYW5uZWxzEhoubG5ycGMu",
            "TGlzdENoYW5uZWxzUmVxdWVzdBobLmxucnBjLkxpc3RDaGFubmVsc1Jlc3Bv",
            "bnNlIhSC0+STAg4SDC92MS9jaGFubmVscxJWChZTdWJzY3JpYmVDaGFubmVs",
            "RXZlbnRzEh8ubG5ycGMuQ2hhbm5lbEV2ZW50U3Vic2NyaXB0aW9uGhkubG5y",
            "cGMuQ2hhbm5lbEV2ZW50VXBkYXRlMAESagoOQ2xvc2VkQ2hhbm5lbHMSHC5s",
            "bnJwYy5DbG9zZWRDaGFubmVsc1JlcXVlc3QaHS5sbnJwYy5DbG9zZWRDaGFu",
            "bmVsc1Jlc3BvbnNlIhuC0+STAhUSEy92MS9jaGFubmVscy9jbG9zZWQSWgoP",
            "T3BlbkNoYW5uZWxTeW5jEhkubG5ycGMuT3BlbkNoYW5uZWxSZXF1ZXN0GhMu",
            "bG5ycGMuQ2hhbm5lbFBvaW50IheC0+STAhEiDC92MS9jaGFubmVsczoBKhJD",
            "CgtPcGVuQ2hhbm5lbBIZLmxucnBjLk9wZW5DaGFubmVsUmVxdWVzdBoXLmxu",
            "cnBjLk9wZW5TdGF0dXNVcGRhdGUwARJMChBGdW5kaW5nU3RhdGVTdGVwEhsu",
            "bG5ycGMuRnVuZGluZ1RyYW5zaXRpb25Nc2caGy5sbnJwYy5GdW5kaW5nU3Rh",
            "dGVTdGVwUmVzcBJQCg9DaGFubmVsQWNjZXB0b3ISHC5sbnJwYy5DaGFubmVs",
            "QWNjZXB0UmVzcG9uc2UaGy5sbnJwYy5DaGFubmVsQWNjZXB0UmVxdWVzdCgB",
            "MAESmgEKDENsb3NlQ2hhbm5lbBIaLmxucnBjLkNsb3NlQ2hhbm5lbFJlcXVl",
            "c3QaGC5sbnJwYy5DbG9zZVN0YXR1c1VwZGF0ZSJSgtPkkwJMKkovdjEvY2hh",
            "bm5lbHMve2NoYW5uZWxfcG9pbnQuZnVuZGluZ190eGlkX3N0cn0ve2NoYW5u",
            "ZWxfcG9pbnQub3V0cHV0X2luZGV4fTABEqkBCg5BYmFuZG9uQ2hhbm5lbBIc",
            "LmxucnBjLkFiYW5kb25DaGFubmVsUmVxdWVzdBodLmxucnBjLkFiYW5kb25D",
            "aGFubmVsUmVzcG9uc2UiWoLT5JMCVCpSL3YxL2NoYW5uZWxzL2FiYW5kb24v",
            "e2NoYW5uZWxfcG9pbnQuZnVuZGluZ190eGlkX3N0cn0ve2NoYW5uZWxfcG9p",
            "bnQub3V0cHV0X2luZGV4fRI6CgtTZW5kUGF5bWVudBISLmxucnBjLlNlbmRS",
            "ZXF1ZXN0GhMubG5ycGMuU2VuZFJlc3BvbnNlKAEwARJgCg9TZW5kUGF5bWVu",
            "dFN5bmMSEi5sbnJwYy5TZW5kUmVxdWVzdBoTLmxucnBjLlNlbmRSZXNwb25z",
            "ZSIkgtPkkwIeIhkvdjEvY2hhbm5lbHMvdHJhbnNhY3Rpb25zOgEqEkEKC1Nl",
            "bmRUb1JvdXRlEhkubG5ycGMuU2VuZFRvUm91dGVSZXF1ZXN0GhMubG5ycGMu",
            "U2VuZFJlc3BvbnNlKAEwARJtCg9TZW5kVG9Sb3V0ZVN5bmMSGS5sbnJwYy5T",
            "ZW5kVG9Sb3V0ZVJlcXVlc3QaEy5sbnJwYy5TZW5kUmVzcG9uc2UiKoLT5JMC",
            "JCIfL3YxL2NoYW5uZWxzL3RyYW5zYWN0aW9ucy9yb3V0ZToBKhJQCgpBZGRJ",
            "bnZvaWNlEg4ubG5ycGMuSW52b2ljZRoZLmxucnBjLkFkZEludm9pY2VSZXNw",
            "b25zZSIXgtPkkwIRIgwvdjEvaW52b2ljZXM6ASoSWwoMTGlzdEludm9pY2Vz",
            "EhkubG5ycGMuTGlzdEludm9pY2VSZXF1ZXN0GhoubG5ycGMuTGlzdEludm9p",
            "Y2VSZXNwb25zZSIUgtPkkwIOEgwvdjEvaW52b2ljZXMSVQoNTG9va3VwSW52",
            "b2ljZRISLmxucnBjLlBheW1lbnRIYXNoGg4ubG5ycGMuSW52b2ljZSIggtPk",
            "kwIaEhgvdjEvaW52b2ljZS97cl9oYXNoX3N0cn0SYQoRU3Vic2NyaWJlSW52",
            "b2ljZXMSGi5sbnJwYy5JbnZvaWNlU3Vic2NyaXB0aW9uGg4ubG5ycGMuSW52",
            "b2ljZSIegtPkkwIYEhYvdjEvaW52b2ljZXMvc3Vic2NyaWJlMAESUAoMRGVj",
            "b2RlUGF5UmVxEhMubG5ycGMuUGF5UmVxU3RyaW5nGg0ubG5ycGMuUGF5UmVx",
            "IhyC0+STAhYSFC92MS9wYXlyZXEve3BheV9yZXF9El0KDExpc3RQYXltZW50",
            "cxIaLmxucnBjLkxpc3RQYXltZW50c1JlcXVlc3QaGy5sbnJwYy5MaXN0UGF5",
            "bWVudHNSZXNwb25zZSIUgtPkkwIOEgwvdjEvcGF5bWVudHMSbAoRRGVsZXRl",
            "QWxsUGF5bWVudHMSHy5sbnJwYy5EZWxldGVBbGxQYXltZW50c1JlcXVlc3Qa",
            "IC5sbnJwYy5EZWxldGVBbGxQYXltZW50c1Jlc3BvbnNlIhSC0+STAg4qDC92",
            "MS9wYXltZW50cxJTCg1EZXNjcmliZUdyYXBoEhoubG5ycGMuQ2hhbm5lbEdy",
            "YXBoUmVxdWVzdBoTLmxucnBjLkNoYW5uZWxHcmFwaCIRgtPkkwILEgkvdjEv",
            "Z3JhcGgSWwoLR2V0Q2hhbkluZm8SFi5sbnJwYy5DaGFuSW5mb1JlcXVlc3Qa",
            "Ei5sbnJwYy5DaGFubmVsRWRnZSIggtPkkwIaEhgvdjEvZ3JhcGgvZWRnZS97",
            "Y2hhbl9pZH0SWAoLR2V0Tm9kZUluZm8SFi5sbnJwYy5Ob2RlSW5mb1JlcXVl",
            "c3QaDy5sbnJwYy5Ob2RlSW5mbyIggtPkkwIaEhgvdjEvZ3JhcGgvbm9kZS97",
            "cHViX2tleX0SbgoLUXVlcnlSb3V0ZXMSGS5sbnJwYy5RdWVyeVJvdXRlc1Jl",
            "cXVlc3QaGi5sbnJwYy5RdWVyeVJvdXRlc1Jlc3BvbnNlIiiC0+STAiISIC92",
            "MS9ncmFwaC9yb3V0ZXMve3B1Yl9rZXl9L3thbXR9ElcKDkdldE5ldHdvcmtJ",
            "bmZvEhkubG5ycGMuTmV0d29ya0luZm9SZXF1ZXN0GhIubG5ycGMuTmV0d29y",
            "a0luZm8iFoLT5JMCEBIOL3YxL2dyYXBoL2luZm8SNQoKU3RvcERhZW1vbhIS",
            "LmxucnBjLlN0b3BSZXF1ZXN0GhMubG5ycGMuU3RvcFJlc3BvbnNlElcKFVN1",
            "YnNjcmliZUNoYW5uZWxHcmFwaBIgLmxucnBjLkdyYXBoVG9wb2xvZ3lTdWJz",
            "Y3JpcHRpb24aGi5sbnJwYy5HcmFwaFRvcG9sb2d5VXBkYXRlMAESQQoKRGVi",
            "dWdMZXZlbBIYLmxucnBjLkRlYnVnTGV2ZWxSZXF1ZXN0GhkubG5ycGMuRGVi",
            "dWdMZXZlbFJlc3BvbnNlElAKCUZlZVJlcG9ydBIXLmxucnBjLkZlZVJlcG9y",
            "dFJlcXVlc3QaGC5sbnJwYy5GZWVSZXBvcnRSZXNwb25zZSIQgtPkkwIKEggv",
            "djEvZmVlcxJpChNVcGRhdGVDaGFubmVsUG9saWN5EhoubG5ycGMuUG9saWN5",
            "VXBkYXRlUmVxdWVzdBobLmxucnBjLlBvbGljeVVwZGF0ZVJlc3BvbnNlIhmC",
            "0+STAhMiDi92MS9jaGFucG9saWN5OgEqEm0KEUZvcndhcmRpbmdIaXN0b3J5",
            "Eh8ubG5ycGMuRm9yd2FyZGluZ0hpc3RvcnlSZXF1ZXN0GiAubG5ycGMuRm9y",
            "d2FyZGluZ0hpc3RvcnlSZXNwb25zZSIVgtPkkwIPIgovdjEvc3dpdGNoOgEq",
            "EqMBChNFeHBvcnRDaGFubmVsQmFja3VwEiEubG5ycGMuRXhwb3J0Q2hhbm5l",
            "bEJhY2t1cFJlcXVlc3QaFC5sbnJwYy5DaGFubmVsQmFja3VwIlOC0+STAk0S",
            "Sy92MS9jaGFubmVscy9iYWNrdXAve2NoYW5fcG9pbnQuZnVuZGluZ190eGlk",
            "X3N0cn0ve2NoYW5fcG9pbnQub3V0cHV0X2luZGV4fRJxChdFeHBvcnRBbGxD",
            "aGFubmVsQmFja3VwcxIeLmxucnBjLkNoYW5CYWNrdXBFeHBvcnRSZXF1ZXN0",
            "GhkubG5ycGMuQ2hhbkJhY2t1cFNuYXBzaG90IhuC0+STAhUSEy92MS9jaGFu",
            "bmVscy9iYWNrdXASdQoQVmVyaWZ5Q2hhbkJhY2t1cBIZLmxucnBjLkNoYW5C",
            "YWNrdXBTbmFwc2hvdBofLmxucnBjLlZlcmlmeUNoYW5CYWNrdXBSZXNwb25z",
            "ZSIlgtPkkwIfIhovdjEvY2hhbm5lbHMvYmFja3VwL3ZlcmlmeToBKhJ+ChVS",
            "ZXN0b3JlQ2hhbm5lbEJhY2t1cHMSHy5sbnJwYy5SZXN0b3JlQ2hhbkJhY2t1",
            "cFJlcXVlc3QaHC5sbnJwYy5SZXN0b3JlQmFja3VwUmVzcG9uc2UiJoLT5JMC",
            "ICIbL3YxL2NoYW5uZWxzL2JhY2t1cC9yZXN0b3JlOgEqEloKF1N1YnNjcmli",
            "ZUNoYW5uZWxCYWNrdXBzEiAubG5ycGMuQ2hhbm5lbEJhY2t1cFN1YnNjcmlw",
            "dGlvbhoZLmxucnBjLkNoYW5CYWNrdXBTbmFwc2hvdCIAMAESYAoMQmFrZU1h",
            "Y2Fyb29uEhoubG5ycGMuQmFrZU1hY2Fyb29uUmVxdWVzdBobLmxucnBjLkJh",
            "a2VNYWNhcm9vblJlc3BvbnNlIheC0+STAhEiDC92MS9tYWNhcm9vbjoBKkIn",
            "WiVnaXRodWIuY29tL2xpZ2h0bmluZ25ldHdvcmsvbG5kL2xucnBjYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Lnrpc.AddressType), typeof(global::Lnrpc.InvoiceHTLCState), typeof(global::Lnrpc.FeatureBit), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.GenSeedRequest), global::Lnrpc.GenSeedRequest.Parser, new[]{ "AezeedPassphrase", "SeedEntropy" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.GenSeedResponse), global::Lnrpc.GenSeedResponse.Parser, new[]{ "CipherSeedMnemonic", "EncipheredSeed" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.InitWalletRequest), global::Lnrpc.InitWalletRequest.Parser, new[]{ "WalletPassword", "CipherSeedMnemonic", "AezeedPassphrase", "RecoveryWindow", "ChannelBackups" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.InitWalletResponse), global::Lnrpc.InitWalletResponse.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.UnlockWalletRequest), global::Lnrpc.UnlockWalletRequest.Parser, new[]{ "WalletPassword", "RecoveryWindow", "ChannelBackups" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.UnlockWalletResponse), global::Lnrpc.UnlockWalletResponse.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChangePasswordRequest), global::Lnrpc.ChangePasswordRequest.Parser, new[]{ "CurrentPassword", "NewPassword" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChangePasswordResponse), global::Lnrpc.ChangePasswordResponse.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.Utxo), global::Lnrpc.Utxo.Parser, new[]{ "Type", "Address", "AmountSat", "PkScript", "Outpoint", "Confirmations" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.Transaction), global::Lnrpc.Transaction.Parser, new[]{ "TxHash", "Amount", "NumConfirmations", "BlockHash", "BlockHeight", "TimeStamp", "TotalFees", "DestAddresses", "RawTxHex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.GetTransactionsRequest), global::Lnrpc.GetTransactionsRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.TransactionDetails), global::Lnrpc.TransactionDetails.Parser, new[]{ "Transactions" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.FeeLimit), global::Lnrpc.FeeLimit.Parser, new[]{ "Fixed", "FixedMsat", "Percent" }, new[]{ "Limit" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.SendRequest), global::Lnrpc.SendRequest.Parser, new[]{ "Dest", "DestString", "Amt", "AmtMsat", "PaymentHash", "PaymentHashString", "PaymentRequest", "FinalCltvDelta", "FeeLimit", "OutgoingChanId", "LastHopPubkey", "CltvLimit", "DestCustomRecords", "AllowSelfPayment", "DestFeatures" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.SendResponse), global::Lnrpc.SendResponse.Parser, new[]{ "PaymentError", "PaymentPreimage", "PaymentRoute", "PaymentHash" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.SendToRouteRequest), global::Lnrpc.SendToRouteRequest.Parser, new[]{ "PaymentHash", "PaymentHashString", "Route" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChannelAcceptRequest), global::Lnrpc.ChannelAcceptRequest.Parser, new[]{ "NodePubkey", "ChainHash", "PendingChanId", "FundingAmt", "PushAmt", "DustLimit", "MaxValueInFlight", "ChannelReserve", "MinHtlc", "FeePerKw", "CsvDelay", "MaxAcceptedHtlcs", "ChannelFlags" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChannelAcceptResponse), global::Lnrpc.ChannelAcceptResponse.Parser, new[]{ "Accept", "PendingChanId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChannelPoint), global::Lnrpc.ChannelPoint.Parser, new[]{ "FundingTxidBytes", "FundingTxidStr", "OutputIndex" }, new[]{ "FundingTxid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.OutPoint), global::Lnrpc.OutPoint.Parser, new[]{ "TxidBytes", "TxidStr", "OutputIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.LightningAddress), global::Lnrpc.LightningAddress.Parser, new[]{ "Pubkey", "Host" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.EstimateFeeRequest), global::Lnrpc.EstimateFeeRequest.Parser, new[]{ "AddrToAmount", "TargetConf" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.EstimateFeeResponse), global::Lnrpc.EstimateFeeResponse.Parser, new[]{ "FeeSat", "FeerateSatPerByte" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.SendManyRequest), global::Lnrpc.SendManyRequest.Parser, new[]{ "AddrToAmount", "TargetConf", "SatPerByte" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.SendManyResponse), global::Lnrpc.SendManyResponse.Parser, new[]{ "Txid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.SendCoinsRequest), global::Lnrpc.SendCoinsRequest.Parser, new[]{ "Addr", "Amount", "TargetConf", "SatPerByte", "SendAll" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.SendCoinsResponse), global::Lnrpc.SendCoinsResponse.Parser, new[]{ "Txid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ListUnspentRequest), global::Lnrpc.ListUnspentRequest.Parser, new[]{ "MinConfs", "MaxConfs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ListUnspentResponse), global::Lnrpc.ListUnspentResponse.Parser, new[]{ "Utxos" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.NewAddressRequest), global::Lnrpc.NewAddressRequest.Parser, new[]{ "Type" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.NewAddressResponse), global::Lnrpc.NewAddressResponse.Parser, new[]{ "Address" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.SignMessageRequest), global::Lnrpc.SignMessageRequest.Parser, new[]{ "Msg" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.SignMessageResponse), global::Lnrpc.SignMessageResponse.Parser, new[]{ "Signature" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.VerifyMessageRequest), global::Lnrpc.VerifyMessageRequest.Parser, new[]{ "Msg", "Signature" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.VerifyMessageResponse), global::Lnrpc.VerifyMessageResponse.Parser, new[]{ "Valid", "Pubkey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ConnectPeerRequest), global::Lnrpc.ConnectPeerRequest.Parser, new[]{ "Addr", "Perm" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ConnectPeerResponse), global::Lnrpc.ConnectPeerResponse.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.DisconnectPeerRequest), global::Lnrpc.DisconnectPeerRequest.Parser, new[]{ "PubKey" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.DisconnectPeerResponse), global::Lnrpc.DisconnectPeerResponse.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.HTLC), global::Lnrpc.HTLC.Parser, new[]{ "Incoming", "Amount", "HashLock", "ExpirationHeight" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.Channel), global::Lnrpc.Channel.Parser, new[]{ "Active", "RemotePubkey", "ChannelPoint", "ChanId", "Capacity", "LocalBalance", "RemoteBalance", "CommitFee", "CommitWeight", "FeePerKw", "UnsettledBalance", "TotalSatoshisSent", "TotalSatoshisReceived", "NumUpdates", "PendingHtlcs", "CsvDelay", "Private", "Initiator", "ChanStatusFlags", "LocalChanReserveSat", "RemoteChanReserveSat", "StaticRemoteKey", "Lifetime", "Uptime", "CloseAddress" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ListChannelsRequest), global::Lnrpc.ListChannelsRequest.Parser, new[]{ "ActiveOnly", "InactiveOnly", "PublicOnly", "PrivateOnly" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ListChannelsResponse), global::Lnrpc.ListChannelsResponse.Parser, new[]{ "Channels" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChannelCloseSummary), global::Lnrpc.ChannelCloseSummary.Parser, new[]{ "ChannelPoint", "ChanId", "ChainHash", "ClosingTxHash", "RemotePubkey", "Capacity", "CloseHeight", "SettledBalance", "TimeLockedBalance", "CloseType" }, null, new[]{ typeof(global::Lnrpc.ChannelCloseSummary.Types.ClosureType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ClosedChannelsRequest), global::Lnrpc.ClosedChannelsRequest.Parser, new[]{ "Cooperative", "LocalForce", "RemoteForce", "Breach", "FundingCanceled", "Abandoned" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ClosedChannelsResponse), global::Lnrpc.ClosedChannelsResponse.Parser, new[]{ "Channels" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.Peer), global::Lnrpc.Peer.Parser, new[]{ "PubKey", "Address", "BytesSent", "BytesRecv", "SatSent", "SatRecv", "Inbound", "PingTime", "SyncType", "Features" }, null, new[]{ typeof(global::Lnrpc.Peer.Types.SyncType) }, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ListPeersRequest), global::Lnrpc.ListPeersRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ListPeersResponse), global::Lnrpc.ListPeersResponse.Parser, new[]{ "Peers" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.PeerEventSubscription), global::Lnrpc.PeerEventSubscription.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.PeerEvent), global::Lnrpc.PeerEvent.Parser, new[]{ "PubKey", "Type" }, null, new[]{ typeof(global::Lnrpc.PeerEvent.Types.EventType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.GetInfoRequest), global::Lnrpc.GetInfoRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.GetInfoResponse), global::Lnrpc.GetInfoResponse.Parser, new[]{ "Version", "IdentityPubkey", "Alias", "Color", "NumPendingChannels", "NumActiveChannels", "NumInactiveChannels", "NumPeers", "BlockHeight", "BlockHash", "BestHeaderTimestamp", "SyncedToChain", "SyncedToGraph", "Testnet", "Chains", "Uris", "Features" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.Chain), global::Lnrpc.Chain.Parser, new[]{ "Chain_", "Network" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ConfirmationUpdate), global::Lnrpc.ConfirmationUpdate.Parser, new[]{ "BlockSha", "BlockHeight", "NumConfsLeft" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChannelOpenUpdate), global::Lnrpc.ChannelOpenUpdate.Parser, new[]{ "ChannelPoint" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChannelCloseUpdate), global::Lnrpc.ChannelCloseUpdate.Parser, new[]{ "ClosingTxid", "Success" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.CloseChannelRequest), global::Lnrpc.CloseChannelRequest.Parser, new[]{ "ChannelPoint", "Force", "TargetConf", "SatPerByte", "DeliveryAddress" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.CloseStatusUpdate), global::Lnrpc.CloseStatusUpdate.Parser, new[]{ "ClosePending", "ChanClose" }, new[]{ "Update" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.PendingUpdate), global::Lnrpc.PendingUpdate.Parser, new[]{ "Txid", "OutputIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.OpenChannelRequest), global::Lnrpc.OpenChannelRequest.Parser, new[]{ "NodePubkey", "NodePubkeyString", "LocalFundingAmount", "PushSat", "TargetConf", "SatPerByte", "Private", "MinHtlcMsat", "RemoteCsvDelay", "MinConfs", "SpendUnconfirmed", "CloseAddress", "FundingShim" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.OpenStatusUpdate), global::Lnrpc.OpenStatusUpdate.Parser, new[]{ "ChanPending", "ChanOpen", "PendingChanId" }, new[]{ "Update" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.KeyLocator), global::Lnrpc.KeyLocator.Parser, new[]{ "KeyFamily", "KeyIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.KeyDescriptor), global::Lnrpc.KeyDescriptor.Parser, new[]{ "RawKeyBytes", "KeyLoc" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChanPointShim), global::Lnrpc.ChanPointShim.Parser, new[]{ "Amt", "ChanPoint", "LocalKey", "RemoteKey", "PendingChanId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.FundingShim), global::Lnrpc.FundingShim.Parser, new[]{ "ChanPointShim" }, new[]{ "Shim" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.FundingShimCancel), global::Lnrpc.FundingShimCancel.Parser, new[]{ "PendingChanId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.FundingTransitionMsg), global::Lnrpc.FundingTransitionMsg.Parser, new[]{ "ShimRegister", "ShimCancel" }, new[]{ "Trigger" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.FundingStateStepResp), global::Lnrpc.FundingStateStepResp.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.PendingHTLC), global::Lnrpc.PendingHTLC.Parser, new[]{ "Incoming", "Amount", "Outpoint", "MaturityHeight", "BlocksTilMaturity", "Stage" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.PendingChannelsRequest), global::Lnrpc.PendingChannelsRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.PendingChannelsResponse), global::Lnrpc.PendingChannelsResponse.Parser, new[]{ "TotalLimboBalance", "PendingOpenChannels", "PendingClosingChannels", "PendingForceClosingChannels", "WaitingCloseChannels" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.PendingChannelsResponse.Types.PendingChannel), global::Lnrpc.PendingChannelsResponse.Types.PendingChannel.Parser, new[]{ "RemoteNodePub", "ChannelPoint", "Capacity", "LocalBalance", "RemoteBalance", "LocalChanReserveSat", "RemoteChanReserveSat" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.PendingChannelsResponse.Types.PendingOpenChannel), global::Lnrpc.PendingChannelsResponse.Types.PendingOpenChannel.Parser, new[]{ "Channel", "ConfirmationHeight", "CommitFee", "CommitWeight", "FeePerKw" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.PendingChannelsResponse.Types.WaitingCloseChannel), global::Lnrpc.PendingChannelsResponse.Types.WaitingCloseChannel.Parser, new[]{ "Channel", "LimboBalance" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.PendingChannelsResponse.Types.ClosedChannel), global::Lnrpc.PendingChannelsResponse.Types.ClosedChannel.Parser, new[]{ "Channel", "ClosingTxid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.PendingChannelsResponse.Types.ForceClosedChannel), global::Lnrpc.PendingChannelsResponse.Types.ForceClosedChannel.Parser, new[]{ "Channel", "ClosingTxid", "LimboBalance", "MaturityHeight", "BlocksTilMaturity", "RecoveredBalance", "PendingHtlcs" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChannelEventSubscription), global::Lnrpc.ChannelEventSubscription.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChannelEventUpdate), global::Lnrpc.ChannelEventUpdate.Parser, new[]{ "OpenChannel", "ClosedChannel", "ActiveChannel", "InactiveChannel", "Type" }, new[]{ "Channel" }, new[]{ typeof(global::Lnrpc.ChannelEventUpdate.Types.UpdateType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.WalletBalanceRequest), global::Lnrpc.WalletBalanceRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.WalletBalanceResponse), global::Lnrpc.WalletBalanceResponse.Parser, new[]{ "TotalBalance", "ConfirmedBalance", "UnconfirmedBalance" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChannelBalanceRequest), global::Lnrpc.ChannelBalanceRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChannelBalanceResponse), global::Lnrpc.ChannelBalanceResponse.Parser, new[]{ "Balance", "PendingOpenBalance" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.QueryRoutesRequest), global::Lnrpc.QueryRoutesRequest.Parser, new[]{ "PubKey", "Amt", "AmtMsat", "FinalCltvDelta", "FeeLimit", "IgnoredNodes", "IgnoredEdges", "SourcePubKey", "UseMissionControl", "IgnoredPairs", "CltvLimit", "DestCustomRecords", "OutgoingChanId", "LastHopPubkey", "RouteHints", "DestFeatures" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.NodePair), global::Lnrpc.NodePair.Parser, new[]{ "From", "To" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.EdgeLocator), global::Lnrpc.EdgeLocator.Parser, new[]{ "ChannelId", "DirectionReverse" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.QueryRoutesResponse), global::Lnrpc.QueryRoutesResponse.Parser, new[]{ "Routes", "SuccessProb" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.Hop), global::Lnrpc.Hop.Parser, new[]{ "ChanId", "ChanCapacity", "AmtToForward", "Fee", "Expiry", "AmtToForwardMsat", "FeeMsat", "PubKey", "TlvPayload", "MppRecord", "CustomRecords" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.MPPRecord), global::Lnrpc.MPPRecord.Parser, new[]{ "PaymentAddr", "TotalAmtMsat" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.Route), global::Lnrpc.Route.Parser, new[]{ "TotalTimeLock", "TotalFees", "TotalAmt", "Hops", "TotalFeesMsat", "TotalAmtMsat" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.NodeInfoRequest), global::Lnrpc.NodeInfoRequest.Parser, new[]{ "PubKey", "IncludeChannels" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.NodeInfo), global::Lnrpc.NodeInfo.Parser, new[]{ "Node", "NumChannels", "TotalCapacity", "Channels" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.LightningNode), global::Lnrpc.LightningNode.Parser, new[]{ "LastUpdate", "PubKey", "Alias", "Addresses", "Color", "Features" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.NodeAddress), global::Lnrpc.NodeAddress.Parser, new[]{ "Network", "Addr" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.RoutingPolicy), global::Lnrpc.RoutingPolicy.Parser, new[]{ "TimeLockDelta", "MinHtlc", "FeeBaseMsat", "FeeRateMilliMsat", "Disabled", "MaxHtlcMsat", "LastUpdate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChannelEdge), global::Lnrpc.ChannelEdge.Parser, new[]{ "ChannelId", "ChanPoint", "LastUpdate", "Node1Pub", "Node2Pub", "Capacity", "Node1Policy", "Node2Policy" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChannelGraphRequest), global::Lnrpc.ChannelGraphRequest.Parser, new[]{ "IncludeUnannounced" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChannelGraph), global::Lnrpc.ChannelGraph.Parser, new[]{ "Nodes", "Edges" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChanInfoRequest), global::Lnrpc.ChanInfoRequest.Parser, new[]{ "ChanId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.NetworkInfoRequest), global::Lnrpc.NetworkInfoRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.NetworkInfo), global::Lnrpc.NetworkInfo.Parser, new[]{ "GraphDiameter", "AvgOutDegree", "MaxOutDegree", "NumNodes", "NumChannels", "TotalNetworkCapacity", "AvgChannelSize", "MinChannelSize", "MaxChannelSize", "MedianChannelSizeSat", "NumZombieChans" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.StopRequest), global::Lnrpc.StopRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.StopResponse), global::Lnrpc.StopResponse.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.GraphTopologySubscription), global::Lnrpc.GraphTopologySubscription.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.GraphTopologyUpdate), global::Lnrpc.GraphTopologyUpdate.Parser, new[]{ "NodeUpdates", "ChannelUpdates", "ClosedChans" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.NodeUpdate), global::Lnrpc.NodeUpdate.Parser, new[]{ "Addresses", "IdentityKey", "GlobalFeatures", "Alias", "Color" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChannelEdgeUpdate), global::Lnrpc.ChannelEdgeUpdate.Parser, new[]{ "ChanId", "ChanPoint", "Capacity", "RoutingPolicy", "AdvertisingNode", "ConnectingNode" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ClosedChannelUpdate), global::Lnrpc.ClosedChannelUpdate.Parser, new[]{ "ChanId", "Capacity", "ClosedHeight", "ChanPoint" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.HopHint), global::Lnrpc.HopHint.Parser, new[]{ "NodeId", "ChanId", "FeeBaseMsat", "FeeProportionalMillionths", "CltvExpiryDelta" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.RouteHint), global::Lnrpc.RouteHint.Parser, new[]{ "HopHints" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.Invoice), global::Lnrpc.Invoice.Parser, new[]{ "Memo", "RPreimage", "RHash", "Value", "ValueMsat", "Settled", "CreationDate", "SettleDate", "PaymentRequest", "DescriptionHash", "Expiry", "FallbackAddr", "CltvExpiry", "RouteHints", "Private", "AddIndex", "SettleIndex", "AmtPaid", "AmtPaidSat", "AmtPaidMsat", "State", "Htlcs", "Features", "IsKeysend" }, null, new[]{ typeof(global::Lnrpc.Invoice.Types.InvoiceState) }, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.InvoiceHTLC), global::Lnrpc.InvoiceHTLC.Parser, new[]{ "ChanId", "HtlcIndex", "AmtMsat", "AcceptHeight", "AcceptTime", "ResolveTime", "ExpiryHeight", "State", "CustomRecords", "MppTotalAmtMsat" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.AddInvoiceResponse), global::Lnrpc.AddInvoiceResponse.Parser, new[]{ "RHash", "PaymentRequest", "AddIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.PaymentHash), global::Lnrpc.PaymentHash.Parser, new[]{ "RHashStr", "RHash" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ListInvoiceRequest), global::Lnrpc.ListInvoiceRequest.Parser, new[]{ "PendingOnly", "IndexOffset", "NumMaxInvoices", "Reversed" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ListInvoiceResponse), global::Lnrpc.ListInvoiceResponse.Parser, new[]{ "Invoices", "LastIndexOffset", "FirstIndexOffset" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.InvoiceSubscription), global::Lnrpc.InvoiceSubscription.Parser, new[]{ "AddIndex", "SettleIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.Payment), global::Lnrpc.Payment.Parser, new[]{ "PaymentHash", "Value", "CreationDate", "Path", "Fee", "PaymentPreimage", "ValueSat", "ValueMsat", "PaymentRequest", "Status", "FeeSat", "FeeMsat", "CreationTimeNs", "Htlcs" }, null, new[]{ typeof(global::Lnrpc.Payment.Types.PaymentStatus) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.HTLCAttempt), global::Lnrpc.HTLCAttempt.Parser, new[]{ "Status", "Route", "AttemptTimeNs", "ResolveTimeNs" }, null, new[]{ typeof(global::Lnrpc.HTLCAttempt.Types.HTLCStatus) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ListPaymentsRequest), global::Lnrpc.ListPaymentsRequest.Parser, new[]{ "IncludeIncomplete" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ListPaymentsResponse), global::Lnrpc.ListPaymentsResponse.Parser, new[]{ "Payments" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.DeleteAllPaymentsRequest), global::Lnrpc.DeleteAllPaymentsRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.DeleteAllPaymentsResponse), global::Lnrpc.DeleteAllPaymentsResponse.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.AbandonChannelRequest), global::Lnrpc.AbandonChannelRequest.Parser, new[]{ "ChannelPoint" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.AbandonChannelResponse), global::Lnrpc.AbandonChannelResponse.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.DebugLevelRequest), global::Lnrpc.DebugLevelRequest.Parser, new[]{ "Show", "LevelSpec" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.DebugLevelResponse), global::Lnrpc.DebugLevelResponse.Parser, new[]{ "SubSystems" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.PayReqString), global::Lnrpc.PayReqString.Parser, new[]{ "PayReq" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.PayReq), global::Lnrpc.PayReq.Parser, new[]{ "Destination", "PaymentHash", "NumSatoshis", "Timestamp", "Expiry", "Description", "DescriptionHash", "FallbackAddr", "CltvExpiry", "RouteHints", "PaymentAddr", "NumMsat", "Features" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.Feature), global::Lnrpc.Feature.Parser, new[]{ "Name", "IsRequired", "IsKnown" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.FeeReportRequest), global::Lnrpc.FeeReportRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChannelFeeReport), global::Lnrpc.ChannelFeeReport.Parser, new[]{ "ChanPoint", "BaseFeeMsat", "FeePerMil", "FeeRate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.FeeReportResponse), global::Lnrpc.FeeReportResponse.Parser, new[]{ "ChannelFees", "DayFeeSum", "WeekFeeSum", "MonthFeeSum" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.PolicyUpdateRequest), global::Lnrpc.PolicyUpdateRequest.Parser, new[]{ "Global", "ChanPoint", "BaseFeeMsat", "FeeRate", "TimeLockDelta", "MaxHtlcMsat", "MinHtlcMsat", "MinHtlcMsatSpecified" }, new[]{ "Scope" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.PolicyUpdateResponse), global::Lnrpc.PolicyUpdateResponse.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ForwardingHistoryRequest), global::Lnrpc.ForwardingHistoryRequest.Parser, new[]{ "StartTime", "EndTime", "IndexOffset", "NumMaxEvents" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ForwardingEvent), global::Lnrpc.ForwardingEvent.Parser, new[]{ "Timestamp", "ChanIdIn", "ChanIdOut", "AmtIn", "AmtOut", "Fee", "FeeMsat", "AmtInMsat", "AmtOutMsat" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ForwardingHistoryResponse), global::Lnrpc.ForwardingHistoryResponse.Parser, new[]{ "ForwardingEvents", "LastOffsetIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ExportChannelBackupRequest), global::Lnrpc.ExportChannelBackupRequest.Parser, new[]{ "ChanPoint" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChannelBackup), global::Lnrpc.ChannelBackup.Parser, new[]{ "ChanPoint", "ChanBackup" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.MultiChanBackup), global::Lnrpc.MultiChanBackup.Parser, new[]{ "ChanPoints", "MultiChanBackup_" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChanBackupExportRequest), global::Lnrpc.ChanBackupExportRequest.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChanBackupSnapshot), global::Lnrpc.ChanBackupSnapshot.Parser, new[]{ "SingleChanBackups", "MultiChanBackup" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChannelBackups), global::Lnrpc.ChannelBackups.Parser, new[]{ "ChanBackups" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.RestoreChanBackupRequest), global::Lnrpc.RestoreChanBackupRequest.Parser, new[]{ "ChanBackups", "MultiChanBackup" }, new[]{ "Backup" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.RestoreBackupResponse), global::Lnrpc.RestoreBackupResponse.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.ChannelBackupSubscription), global::Lnrpc.ChannelBackupSubscription.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.VerifyChanBackupResponse), global::Lnrpc.VerifyChanBackupResponse.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.MacaroonPermission), global::Lnrpc.MacaroonPermission.Parser, new[]{ "Entity", "Action" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.BakeMacaroonRequest), global::Lnrpc.BakeMacaroonRequest.Parser, new[]{ "Permissions" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lnrpc.BakeMacaroonResponse), global::Lnrpc.BakeMacaroonResponse.Parser, new[]{ "Macaroon" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///* 
  ///`AddressType` has to be one of:
  ///
  ///- `p2wkh`: Pay to witness key hash (`WITNESS_PUBKEY_HASH` = 0)
  ///- `np2wkh`: Pay to nested witness key hash (`NESTED_PUBKEY_HASH` = 1)
  /// </summary>
  public enum AddressType {
    [pbr::OriginalName("WITNESS_PUBKEY_HASH")] WitnessPubkeyHash = 0,
    [pbr::OriginalName("NESTED_PUBKEY_HASH")] NestedPubkeyHash = 1,
    [pbr::OriginalName("UNUSED_WITNESS_PUBKEY_HASH")] UnusedWitnessPubkeyHash = 2,
    [pbr::OriginalName("UNUSED_NESTED_PUBKEY_HASH")] UnusedNestedPubkeyHash = 3,
  }

  public enum InvoiceHTLCState {
    [pbr::OriginalName("ACCEPTED")] Accepted = 0,
    [pbr::OriginalName("SETTLED")] Settled = 1,
    [pbr::OriginalName("CANCELED")] Canceled = 2,
  }

  public enum FeatureBit {
    [pbr::OriginalName("DATALOSS_PROTECT_REQ")] DatalossProtectReq = 0,
    [pbr::OriginalName("DATALOSS_PROTECT_OPT")] DatalossProtectOpt = 1,
    [pbr::OriginalName("INITIAL_ROUING_SYNC")] InitialRouingSync = 3,
    [pbr::OriginalName("UPFRONT_SHUTDOWN_SCRIPT_REQ")] UpfrontShutdownScriptReq = 4,
    [pbr::OriginalName("UPFRONT_SHUTDOWN_SCRIPT_OPT")] UpfrontShutdownScriptOpt = 5,
    [pbr::OriginalName("GOSSIP_QUERIES_REQ")] GossipQueriesReq = 6,
    [pbr::OriginalName("GOSSIP_QUERIES_OPT")] GossipQueriesOpt = 7,
    [pbr::OriginalName("TLV_ONION_REQ")] TlvOnionReq = 8,
    [pbr::OriginalName("TLV_ONION_OPT")] TlvOnionOpt = 9,
    [pbr::OriginalName("EXT_GOSSIP_QUERIES_REQ")] ExtGossipQueriesReq = 10,
    [pbr::OriginalName("EXT_GOSSIP_QUERIES_OPT")] ExtGossipQueriesOpt = 11,
    [pbr::OriginalName("STATIC_REMOTE_KEY_REQ")] StaticRemoteKeyReq = 12,
    [pbr::OriginalName("STATIC_REMOTE_KEY_OPT")] StaticRemoteKeyOpt = 13,
    [pbr::OriginalName("PAYMENT_ADDR_REQ")] PaymentAddrReq = 14,
    [pbr::OriginalName("PAYMENT_ADDR_OPT")] PaymentAddrOpt = 15,
    [pbr::OriginalName("MPP_REQ")] MppReq = 16,
    [pbr::OriginalName("MPP_OPT")] MppOpt = 17,
  }

  #endregion

  #region Messages
  public sealed partial class GenSeedRequest : pb::IMessage<GenSeedRequest> {
    private static readonly pb::MessageParser<GenSeedRequest> _parser = new pb::MessageParser<GenSeedRequest>(() => new GenSeedRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GenSeedRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenSeedRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenSeedRequest(GenSeedRequest other) : this() {
      aezeedPassphrase_ = other.aezeedPassphrase_;
      seedEntropy_ = other.seedEntropy_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenSeedRequest Clone() {
      return new GenSeedRequest(this);
    }

    /// <summary>Field number for the "aezeed_passphrase" field.</summary>
    public const int AezeedPassphraseFieldNumber = 1;
    private pb::ByteString aezeedPassphrase_ = pb::ByteString.Empty;
    /// <summary>
    ///*
    ///aezeed_passphrase is an optional user provided passphrase that will be used
    ///to encrypt the generated aezeed cipher seed. When using REST, this field
    ///must be encoded as base64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AezeedPassphrase {
      get { return aezeedPassphrase_; }
      set {
        aezeedPassphrase_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "seed_entropy" field.</summary>
    public const int SeedEntropyFieldNumber = 2;
    private pb::ByteString seedEntropy_ = pb::ByteString.Empty;
    /// <summary>
    ///*
    ///seed_entropy is an optional 16-bytes generated via CSPRNG. If not
    ///specified, then a fresh set of randomness will be used to create the seed.
    ///When using REST, this field must be encoded as base64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SeedEntropy {
      get { return seedEntropy_; }
      set {
        seedEntropy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GenSeedRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GenSeedRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AezeedPassphrase != other.AezeedPassphrase) return false;
      if (SeedEntropy != other.SeedEntropy) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AezeedPassphrase.Length != 0) hash ^= AezeedPassphrase.GetHashCode();
      if (SeedEntropy.Length != 0) hash ^= SeedEntropy.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AezeedPassphrase.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(AezeedPassphrase);
      }
      if (SeedEntropy.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(SeedEntropy);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AezeedPassphrase.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AezeedPassphrase);
      }
      if (SeedEntropy.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SeedEntropy);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GenSeedRequest other) {
      if (other == null) {
        return;
      }
      if (other.AezeedPassphrase.Length != 0) {
        AezeedPassphrase = other.AezeedPassphrase;
      }
      if (other.SeedEntropy.Length != 0) {
        SeedEntropy = other.SeedEntropy;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AezeedPassphrase = input.ReadBytes();
            break;
          }
          case 18: {
            SeedEntropy = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GenSeedResponse : pb::IMessage<GenSeedResponse> {
    private static readonly pb::MessageParser<GenSeedResponse> _parser = new pb::MessageParser<GenSeedResponse>(() => new GenSeedResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GenSeedResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenSeedResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenSeedResponse(GenSeedResponse other) : this() {
      cipherSeedMnemonic_ = other.cipherSeedMnemonic_.Clone();
      encipheredSeed_ = other.encipheredSeed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenSeedResponse Clone() {
      return new GenSeedResponse(this);
    }

    /// <summary>Field number for the "cipher_seed_mnemonic" field.</summary>
    public const int CipherSeedMnemonicFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_cipherSeedMnemonic_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> cipherSeedMnemonic_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///*
    ///cipher_seed_mnemonic is a 24-word mnemonic that encodes a prior aezeed
    ///cipher seed obtained by the user. This field is optional, as if not
    ///provided, then the daemon will generate a new cipher seed for the user.
    ///Otherwise, then the daemon will attempt to recover the wallet state linked
    ///to this cipher seed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> CipherSeedMnemonic {
      get { return cipherSeedMnemonic_; }
    }

    /// <summary>Field number for the "enciphered_seed" field.</summary>
    public const int EncipheredSeedFieldNumber = 2;
    private pb::ByteString encipheredSeed_ = pb::ByteString.Empty;
    /// <summary>
    ///*
    ///enciphered_seed are the raw aezeed cipher seed bytes. This is the raw
    ///cipher text before run through our mnemonic encoding scheme.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EncipheredSeed {
      get { return encipheredSeed_; }
      set {
        encipheredSeed_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GenSeedResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GenSeedResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!cipherSeedMnemonic_.Equals(other.cipherSeedMnemonic_)) return false;
      if (EncipheredSeed != other.EncipheredSeed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= cipherSeedMnemonic_.GetHashCode();
      if (EncipheredSeed.Length != 0) hash ^= EncipheredSeed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cipherSeedMnemonic_.WriteTo(output, _repeated_cipherSeedMnemonic_codec);
      if (EncipheredSeed.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(EncipheredSeed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cipherSeedMnemonic_.CalculateSize(_repeated_cipherSeedMnemonic_codec);
      if (EncipheredSeed.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncipheredSeed);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GenSeedResponse other) {
      if (other == null) {
        return;
      }
      cipherSeedMnemonic_.Add(other.cipherSeedMnemonic_);
      if (other.EncipheredSeed.Length != 0) {
        EncipheredSeed = other.EncipheredSeed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            cipherSeedMnemonic_.AddEntriesFrom(input, _repeated_cipherSeedMnemonic_codec);
            break;
          }
          case 18: {
            EncipheredSeed = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InitWalletRequest : pb::IMessage<InitWalletRequest> {
    private static readonly pb::MessageParser<InitWalletRequest> _parser = new pb::MessageParser<InitWalletRequest>(() => new InitWalletRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitWalletRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitWalletRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitWalletRequest(InitWalletRequest other) : this() {
      walletPassword_ = other.walletPassword_;
      cipherSeedMnemonic_ = other.cipherSeedMnemonic_.Clone();
      aezeedPassphrase_ = other.aezeedPassphrase_;
      recoveryWindow_ = other.recoveryWindow_;
      channelBackups_ = other.channelBackups_ != null ? other.channelBackups_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitWalletRequest Clone() {
      return new InitWalletRequest(this);
    }

    /// <summary>Field number for the "wallet_password" field.</summary>
    public const int WalletPasswordFieldNumber = 1;
    private pb::ByteString walletPassword_ = pb::ByteString.Empty;
    /// <summary>
    ///*
    ///wallet_password is the passphrase that should be used to encrypt the
    ///wallet. This MUST be at least 8 chars in length. After creation, this
    ///password is required to unlock the daemon. When using REST, this field
    ///must be encoded as base64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString WalletPassword {
      get { return walletPassword_; }
      set {
        walletPassword_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cipher_seed_mnemonic" field.</summary>
    public const int CipherSeedMnemonicFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_cipherSeedMnemonic_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> cipherSeedMnemonic_ = new pbc::RepeatedField<string>();
    /// <summary>
    ///*
    ///cipher_seed_mnemonic is a 24-word mnemonic that encodes a prior aezeed
    ///cipher seed obtained by the user. This may have been generated by the
    ///GenSeed method, or be an existing seed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> CipherSeedMnemonic {
      get { return cipherSeedMnemonic_; }
    }

    /// <summary>Field number for the "aezeed_passphrase" field.</summary>
    public const int AezeedPassphraseFieldNumber = 3;
    private pb::ByteString aezeedPassphrase_ = pb::ByteString.Empty;
    /// <summary>
    ///*
    ///aezeed_passphrase is an optional user provided passphrase that will be used
    ///to encrypt the generated aezeed cipher seed. When using REST, this field
    ///must be encoded as base64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AezeedPassphrase {
      get { return aezeedPassphrase_; }
      set {
        aezeedPassphrase_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "recovery_window" field.</summary>
    public const int RecoveryWindowFieldNumber = 4;
    private int recoveryWindow_;
    /// <summary>
    ///*
    ///recovery_window is an optional argument specifying the address lookahead
    ///when restoring a wallet seed. The recovery window applies to each
    ///individual branch of the BIP44 derivation paths. Supplying a recovery
    ///window of zero indicates that no addresses should be recovered, such after
    ///the first initialization of the wallet.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RecoveryWindow {
      get { return recoveryWindow_; }
      set {
        recoveryWindow_ = value;
      }
    }

    /// <summary>Field number for the "channel_backups" field.</summary>
    public const int ChannelBackupsFieldNumber = 5;
    private global::Lnrpc.ChanBackupSnapshot channelBackups_;
    /// <summary>
    ///*
    ///channel_backups is an optional argument that allows clients to recover the
    ///settled funds within a set of channels. This should be populated if the
    ///user was unable to close out all channels and sweep funds before partial or
    ///total data loss occurred. If specified, then after on-chain recovery of
    ///funds, lnd begin to carry out the data loss recovery protocol in order to
    ///recover the funds in each channel from a remote force closed transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.ChanBackupSnapshot ChannelBackups {
      get { return channelBackups_; }
      set {
        channelBackups_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InitWalletRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitWalletRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WalletPassword != other.WalletPassword) return false;
      if(!cipherSeedMnemonic_.Equals(other.cipherSeedMnemonic_)) return false;
      if (AezeedPassphrase != other.AezeedPassphrase) return false;
      if (RecoveryWindow != other.RecoveryWindow) return false;
      if (!object.Equals(ChannelBackups, other.ChannelBackups)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WalletPassword.Length != 0) hash ^= WalletPassword.GetHashCode();
      hash ^= cipherSeedMnemonic_.GetHashCode();
      if (AezeedPassphrase.Length != 0) hash ^= AezeedPassphrase.GetHashCode();
      if (RecoveryWindow != 0) hash ^= RecoveryWindow.GetHashCode();
      if (channelBackups_ != null) hash ^= ChannelBackups.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WalletPassword.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(WalletPassword);
      }
      cipherSeedMnemonic_.WriteTo(output, _repeated_cipherSeedMnemonic_codec);
      if (AezeedPassphrase.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(AezeedPassphrase);
      }
      if (RecoveryWindow != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RecoveryWindow);
      }
      if (channelBackups_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(ChannelBackups);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WalletPassword.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(WalletPassword);
      }
      size += cipherSeedMnemonic_.CalculateSize(_repeated_cipherSeedMnemonic_codec);
      if (AezeedPassphrase.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AezeedPassphrase);
      }
      if (RecoveryWindow != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RecoveryWindow);
      }
      if (channelBackups_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChannelBackups);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitWalletRequest other) {
      if (other == null) {
        return;
      }
      if (other.WalletPassword.Length != 0) {
        WalletPassword = other.WalletPassword;
      }
      cipherSeedMnemonic_.Add(other.cipherSeedMnemonic_);
      if (other.AezeedPassphrase.Length != 0) {
        AezeedPassphrase = other.AezeedPassphrase;
      }
      if (other.RecoveryWindow != 0) {
        RecoveryWindow = other.RecoveryWindow;
      }
      if (other.channelBackups_ != null) {
        if (channelBackups_ == null) {
          ChannelBackups = new global::Lnrpc.ChanBackupSnapshot();
        }
        ChannelBackups.MergeFrom(other.ChannelBackups);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            WalletPassword = input.ReadBytes();
            break;
          }
          case 18: {
            cipherSeedMnemonic_.AddEntriesFrom(input, _repeated_cipherSeedMnemonic_codec);
            break;
          }
          case 26: {
            AezeedPassphrase = input.ReadBytes();
            break;
          }
          case 32: {
            RecoveryWindow = input.ReadInt32();
            break;
          }
          case 42: {
            if (channelBackups_ == null) {
              ChannelBackups = new global::Lnrpc.ChanBackupSnapshot();
            }
            input.ReadMessage(ChannelBackups);
            break;
          }
        }
      }
    }

  }

  public sealed partial class InitWalletResponse : pb::IMessage<InitWalletResponse> {
    private static readonly pb::MessageParser<InitWalletResponse> _parser = new pb::MessageParser<InitWalletResponse>(() => new InitWalletResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitWalletResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitWalletResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitWalletResponse(InitWalletResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitWalletResponse Clone() {
      return new InitWalletResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InitWalletResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitWalletResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitWalletResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class UnlockWalletRequest : pb::IMessage<UnlockWalletRequest> {
    private static readonly pb::MessageParser<UnlockWalletRequest> _parser = new pb::MessageParser<UnlockWalletRequest>(() => new UnlockWalletRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnlockWalletRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnlockWalletRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnlockWalletRequest(UnlockWalletRequest other) : this() {
      walletPassword_ = other.walletPassword_;
      recoveryWindow_ = other.recoveryWindow_;
      channelBackups_ = other.channelBackups_ != null ? other.channelBackups_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnlockWalletRequest Clone() {
      return new UnlockWalletRequest(this);
    }

    /// <summary>Field number for the "wallet_password" field.</summary>
    public const int WalletPasswordFieldNumber = 1;
    private pb::ByteString walletPassword_ = pb::ByteString.Empty;
    /// <summary>
    ///*
    ///wallet_password should be the current valid passphrase for the daemon. This
    ///will be required to decrypt on-disk material that the daemon requires to
    ///function properly. When using REST, this field must be encoded as base64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString WalletPassword {
      get { return walletPassword_; }
      set {
        walletPassword_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "recovery_window" field.</summary>
    public const int RecoveryWindowFieldNumber = 2;
    private int recoveryWindow_;
    /// <summary>
    ///*
    ///recovery_window is an optional argument specifying the address lookahead
    ///when restoring a wallet seed. The recovery window applies to each
    ///individual branch of the BIP44 derivation paths. Supplying a recovery
    ///window of zero indicates that no addresses should be recovered, such after
    ///the first initialization of the wallet.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RecoveryWindow {
      get { return recoveryWindow_; }
      set {
        recoveryWindow_ = value;
      }
    }

    /// <summary>Field number for the "channel_backups" field.</summary>
    public const int ChannelBackupsFieldNumber = 3;
    private global::Lnrpc.ChanBackupSnapshot channelBackups_;
    /// <summary>
    ///*
    ///channel_backups is an optional argument that allows clients to recover the
    ///settled funds within a set of channels. This should be populated if the
    ///user was unable to close out all channels and sweep funds before partial or
    ///total data loss occurred. If specified, then after on-chain recovery of
    ///funds, lnd begin to carry out the data loss recovery protocol in order to
    ///recover the funds in each channel from a remote force closed transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.ChanBackupSnapshot ChannelBackups {
      get { return channelBackups_; }
      set {
        channelBackups_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnlockWalletRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnlockWalletRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (WalletPassword != other.WalletPassword) return false;
      if (RecoveryWindow != other.RecoveryWindow) return false;
      if (!object.Equals(ChannelBackups, other.ChannelBackups)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (WalletPassword.Length != 0) hash ^= WalletPassword.GetHashCode();
      if (RecoveryWindow != 0) hash ^= RecoveryWindow.GetHashCode();
      if (channelBackups_ != null) hash ^= ChannelBackups.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (WalletPassword.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(WalletPassword);
      }
      if (RecoveryWindow != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RecoveryWindow);
      }
      if (channelBackups_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(ChannelBackups);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (WalletPassword.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(WalletPassword);
      }
      if (RecoveryWindow != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RecoveryWindow);
      }
      if (channelBackups_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChannelBackups);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnlockWalletRequest other) {
      if (other == null) {
        return;
      }
      if (other.WalletPassword.Length != 0) {
        WalletPassword = other.WalletPassword;
      }
      if (other.RecoveryWindow != 0) {
        RecoveryWindow = other.RecoveryWindow;
      }
      if (other.channelBackups_ != null) {
        if (channelBackups_ == null) {
          ChannelBackups = new global::Lnrpc.ChanBackupSnapshot();
        }
        ChannelBackups.MergeFrom(other.ChannelBackups);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            WalletPassword = input.ReadBytes();
            break;
          }
          case 16: {
            RecoveryWindow = input.ReadInt32();
            break;
          }
          case 26: {
            if (channelBackups_ == null) {
              ChannelBackups = new global::Lnrpc.ChanBackupSnapshot();
            }
            input.ReadMessage(ChannelBackups);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UnlockWalletResponse : pb::IMessage<UnlockWalletResponse> {
    private static readonly pb::MessageParser<UnlockWalletResponse> _parser = new pb::MessageParser<UnlockWalletResponse>(() => new UnlockWalletResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnlockWalletResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnlockWalletResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnlockWalletResponse(UnlockWalletResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnlockWalletResponse Clone() {
      return new UnlockWalletResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnlockWalletResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnlockWalletResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnlockWalletResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class ChangePasswordRequest : pb::IMessage<ChangePasswordRequest> {
    private static readonly pb::MessageParser<ChangePasswordRequest> _parser = new pb::MessageParser<ChangePasswordRequest>(() => new ChangePasswordRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangePasswordRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangePasswordRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangePasswordRequest(ChangePasswordRequest other) : this() {
      currentPassword_ = other.currentPassword_;
      newPassword_ = other.newPassword_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangePasswordRequest Clone() {
      return new ChangePasswordRequest(this);
    }

    /// <summary>Field number for the "current_password" field.</summary>
    public const int CurrentPasswordFieldNumber = 1;
    private pb::ByteString currentPassword_ = pb::ByteString.Empty;
    /// <summary>
    ///*
    ///current_password should be the current valid passphrase used to unlock the
    ///daemon. When using REST, this field must be encoded as base64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString CurrentPassword {
      get { return currentPassword_; }
      set {
        currentPassword_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "new_password" field.</summary>
    public const int NewPasswordFieldNumber = 2;
    private pb::ByteString newPassword_ = pb::ByteString.Empty;
    /// <summary>
    ///*
    ///new_password should be the new passphrase that will be needed to unlock the
    ///daemon. When using REST, this field must be encoded as base64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString NewPassword {
      get { return newPassword_; }
      set {
        newPassword_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangePasswordRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangePasswordRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrentPassword != other.CurrentPassword) return false;
      if (NewPassword != other.NewPassword) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrentPassword.Length != 0) hash ^= CurrentPassword.GetHashCode();
      if (NewPassword.Length != 0) hash ^= NewPassword.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrentPassword.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(CurrentPassword);
      }
      if (NewPassword.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(NewPassword);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrentPassword.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(CurrentPassword);
      }
      if (NewPassword.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(NewPassword);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangePasswordRequest other) {
      if (other == null) {
        return;
      }
      if (other.CurrentPassword.Length != 0) {
        CurrentPassword = other.CurrentPassword;
      }
      if (other.NewPassword.Length != 0) {
        NewPassword = other.NewPassword;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CurrentPassword = input.ReadBytes();
            break;
          }
          case 18: {
            NewPassword = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChangePasswordResponse : pb::IMessage<ChangePasswordResponse> {
    private static readonly pb::MessageParser<ChangePasswordResponse> _parser = new pb::MessageParser<ChangePasswordResponse>(() => new ChangePasswordResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangePasswordResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangePasswordResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangePasswordResponse(ChangePasswordResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangePasswordResponse Clone() {
      return new ChangePasswordResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangePasswordResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangePasswordResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangePasswordResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class Utxo : pb::IMessage<Utxo> {
    private static readonly pb::MessageParser<Utxo> _parser = new pb::MessageParser<Utxo>(() => new Utxo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Utxo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Utxo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Utxo(Utxo other) : this() {
      type_ = other.type_;
      address_ = other.address_;
      amountSat_ = other.amountSat_;
      pkScript_ = other.pkScript_;
      outpoint_ = other.outpoint_ != null ? other.outpoint_.Clone() : null;
      confirmations_ = other.confirmations_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Utxo Clone() {
      return new Utxo(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Lnrpc.AddressType type_ = global::Lnrpc.AddressType.WitnessPubkeyHash;
    /// <summary>
    //// The type of address
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.AddressType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 2;
    private string address_ = "";
    /// <summary>
    //// The address
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount_sat" field.</summary>
    public const int AmountSatFieldNumber = 3;
    private long amountSat_;
    /// <summary>
    //// The value of the unspent coin in satoshis
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmountSat {
      get { return amountSat_; }
      set {
        amountSat_ = value;
      }
    }

    /// <summary>Field number for the "pk_script" field.</summary>
    public const int PkScriptFieldNumber = 4;
    private string pkScript_ = "";
    /// <summary>
    //// The pkscript in hex
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PkScript {
      get { return pkScript_; }
      set {
        pkScript_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "outpoint" field.</summary>
    public const int OutpointFieldNumber = 5;
    private global::Lnrpc.OutPoint outpoint_;
    /// <summary>
    //// The outpoint in format txid:n
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.OutPoint Outpoint {
      get { return outpoint_; }
      set {
        outpoint_ = value;
      }
    }

    /// <summary>Field number for the "confirmations" field.</summary>
    public const int ConfirmationsFieldNumber = 6;
    private long confirmations_;
    /// <summary>
    //// The number of confirmations for the Utxo
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Confirmations {
      get { return confirmations_; }
      set {
        confirmations_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Utxo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Utxo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Address != other.Address) return false;
      if (AmountSat != other.AmountSat) return false;
      if (PkScript != other.PkScript) return false;
      if (!object.Equals(Outpoint, other.Outpoint)) return false;
      if (Confirmations != other.Confirmations) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != global::Lnrpc.AddressType.WitnessPubkeyHash) hash ^= Type.GetHashCode();
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (AmountSat != 0L) hash ^= AmountSat.GetHashCode();
      if (PkScript.Length != 0) hash ^= PkScript.GetHashCode();
      if (outpoint_ != null) hash ^= Outpoint.GetHashCode();
      if (Confirmations != 0L) hash ^= Confirmations.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != global::Lnrpc.AddressType.WitnessPubkeyHash) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Address.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Address);
      }
      if (AmountSat != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(AmountSat);
      }
      if (PkScript.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PkScript);
      }
      if (outpoint_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Outpoint);
      }
      if (Confirmations != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Confirmations);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != global::Lnrpc.AddressType.WitnessPubkeyHash) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (AmountSat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AmountSat);
      }
      if (PkScript.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PkScript);
      }
      if (outpoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Outpoint);
      }
      if (Confirmations != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Confirmations);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Utxo other) {
      if (other == null) {
        return;
      }
      if (other.Type != global::Lnrpc.AddressType.WitnessPubkeyHash) {
        Type = other.Type;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.AmountSat != 0L) {
        AmountSat = other.AmountSat;
      }
      if (other.PkScript.Length != 0) {
        PkScript = other.PkScript;
      }
      if (other.outpoint_ != null) {
        if (outpoint_ == null) {
          Outpoint = new global::Lnrpc.OutPoint();
        }
        Outpoint.MergeFrom(other.Outpoint);
      }
      if (other.Confirmations != 0L) {
        Confirmations = other.Confirmations;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Lnrpc.AddressType) input.ReadEnum();
            break;
          }
          case 18: {
            Address = input.ReadString();
            break;
          }
          case 24: {
            AmountSat = input.ReadInt64();
            break;
          }
          case 34: {
            PkScript = input.ReadString();
            break;
          }
          case 42: {
            if (outpoint_ == null) {
              Outpoint = new global::Lnrpc.OutPoint();
            }
            input.ReadMessage(Outpoint);
            break;
          }
          case 48: {
            Confirmations = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Transaction : pb::IMessage<Transaction> {
    private static readonly pb::MessageParser<Transaction> _parser = new pb::MessageParser<Transaction>(() => new Transaction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Transaction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transaction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transaction(Transaction other) : this() {
      txHash_ = other.txHash_;
      amount_ = other.amount_;
      numConfirmations_ = other.numConfirmations_;
      blockHash_ = other.blockHash_;
      blockHeight_ = other.blockHeight_;
      timeStamp_ = other.timeStamp_;
      totalFees_ = other.totalFees_;
      destAddresses_ = other.destAddresses_.Clone();
      rawTxHex_ = other.rawTxHex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transaction Clone() {
      return new Transaction(this);
    }

    /// <summary>Field number for the "tx_hash" field.</summary>
    public const int TxHashFieldNumber = 1;
    private string txHash_ = "";
    /// <summary>
    //// The transaction hash
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TxHash {
      get { return txHash_; }
      set {
        txHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    /// <summary>
    //// The transaction amount, denominated in satoshis
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "num_confirmations" field.</summary>
    public const int NumConfirmationsFieldNumber = 3;
    private int numConfirmations_;
    /// <summary>
    //// The number of confirmations
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumConfirmations {
      get { return numConfirmations_; }
      set {
        numConfirmations_ = value;
      }
    }

    /// <summary>Field number for the "block_hash" field.</summary>
    public const int BlockHashFieldNumber = 4;
    private string blockHash_ = "";
    /// <summary>
    //// The hash of the block this transaction was included in
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BlockHash {
      get { return blockHash_; }
      set {
        blockHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "block_height" field.</summary>
    public const int BlockHeightFieldNumber = 5;
    private int blockHeight_;
    /// <summary>
    //// The height of the block this transaction was included in
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlockHeight {
      get { return blockHeight_; }
      set {
        blockHeight_ = value;
      }
    }

    /// <summary>Field number for the "time_stamp" field.</summary>
    public const int TimeStampFieldNumber = 6;
    private long timeStamp_;
    /// <summary>
    //// Timestamp of this transaction 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimeStamp {
      get { return timeStamp_; }
      set {
        timeStamp_ = value;
      }
    }

    /// <summary>Field number for the "total_fees" field.</summary>
    public const int TotalFeesFieldNumber = 7;
    private long totalFees_;
    /// <summary>
    //// Fees paid for this transaction
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalFees {
      get { return totalFees_; }
      set {
        totalFees_ = value;
      }
    }

    /// <summary>Field number for the "dest_addresses" field.</summary>
    public const int DestAddressesFieldNumber = 8;
    private static readonly pb::FieldCodec<string> _repeated_destAddresses_codec
        = pb::FieldCodec.ForString(66);
    private readonly pbc::RepeatedField<string> destAddresses_ = new pbc::RepeatedField<string>();
    /// <summary>
    //// Addresses that received funds for this transaction
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DestAddresses {
      get { return destAddresses_; }
    }

    /// <summary>Field number for the "raw_tx_hex" field.</summary>
    public const int RawTxHexFieldNumber = 9;
    private string rawTxHex_ = "";
    /// <summary>
    //// The raw transaction hex.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RawTxHex {
      get { return rawTxHex_; }
      set {
        rawTxHex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Transaction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Transaction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TxHash != other.TxHash) return false;
      if (Amount != other.Amount) return false;
      if (NumConfirmations != other.NumConfirmations) return false;
      if (BlockHash != other.BlockHash) return false;
      if (BlockHeight != other.BlockHeight) return false;
      if (TimeStamp != other.TimeStamp) return false;
      if (TotalFees != other.TotalFees) return false;
      if(!destAddresses_.Equals(other.destAddresses_)) return false;
      if (RawTxHex != other.RawTxHex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TxHash.Length != 0) hash ^= TxHash.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (NumConfirmations != 0) hash ^= NumConfirmations.GetHashCode();
      if (BlockHash.Length != 0) hash ^= BlockHash.GetHashCode();
      if (BlockHeight != 0) hash ^= BlockHeight.GetHashCode();
      if (TimeStamp != 0L) hash ^= TimeStamp.GetHashCode();
      if (TotalFees != 0L) hash ^= TotalFees.GetHashCode();
      hash ^= destAddresses_.GetHashCode();
      if (RawTxHex.Length != 0) hash ^= RawTxHex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TxHash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TxHash);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Amount);
      }
      if (NumConfirmations != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NumConfirmations);
      }
      if (BlockHash.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(BlockHash);
      }
      if (BlockHeight != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BlockHeight);
      }
      if (TimeStamp != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(TimeStamp);
      }
      if (TotalFees != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(TotalFees);
      }
      destAddresses_.WriteTo(output, _repeated_destAddresses_codec);
      if (RawTxHex.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(RawTxHex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TxHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TxHash);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (NumConfirmations != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumConfirmations);
      }
      if (BlockHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BlockHash);
      }
      if (BlockHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlockHeight);
      }
      if (TimeStamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeStamp);
      }
      if (TotalFees != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalFees);
      }
      size += destAddresses_.CalculateSize(_repeated_destAddresses_codec);
      if (RawTxHex.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RawTxHex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Transaction other) {
      if (other == null) {
        return;
      }
      if (other.TxHash.Length != 0) {
        TxHash = other.TxHash;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.NumConfirmations != 0) {
        NumConfirmations = other.NumConfirmations;
      }
      if (other.BlockHash.Length != 0) {
        BlockHash = other.BlockHash;
      }
      if (other.BlockHeight != 0) {
        BlockHeight = other.BlockHeight;
      }
      if (other.TimeStamp != 0L) {
        TimeStamp = other.TimeStamp;
      }
      if (other.TotalFees != 0L) {
        TotalFees = other.TotalFees;
      }
      destAddresses_.Add(other.destAddresses_);
      if (other.RawTxHex.Length != 0) {
        RawTxHex = other.RawTxHex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TxHash = input.ReadString();
            break;
          }
          case 16: {
            Amount = input.ReadInt64();
            break;
          }
          case 24: {
            NumConfirmations = input.ReadInt32();
            break;
          }
          case 34: {
            BlockHash = input.ReadString();
            break;
          }
          case 40: {
            BlockHeight = input.ReadInt32();
            break;
          }
          case 48: {
            TimeStamp = input.ReadInt64();
            break;
          }
          case 56: {
            TotalFees = input.ReadInt64();
            break;
          }
          case 66: {
            destAddresses_.AddEntriesFrom(input, _repeated_destAddresses_codec);
            break;
          }
          case 74: {
            RawTxHex = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetTransactionsRequest : pb::IMessage<GetTransactionsRequest> {
    private static readonly pb::MessageParser<GetTransactionsRequest> _parser = new pb::MessageParser<GetTransactionsRequest>(() => new GetTransactionsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetTransactionsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTransactionsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTransactionsRequest(GetTransactionsRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTransactionsRequest Clone() {
      return new GetTransactionsRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetTransactionsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetTransactionsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetTransactionsRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class TransactionDetails : pb::IMessage<TransactionDetails> {
    private static readonly pb::MessageParser<TransactionDetails> _parser = new pb::MessageParser<TransactionDetails>(() => new TransactionDetails());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransactionDetails> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionDetails() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionDetails(TransactionDetails other) : this() {
      transactions_ = other.transactions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionDetails Clone() {
      return new TransactionDetails(this);
    }

    /// <summary>Field number for the "transactions" field.</summary>
    public const int TransactionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Lnrpc.Transaction> _repeated_transactions_codec
        = pb::FieldCodec.ForMessage(10, global::Lnrpc.Transaction.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.Transaction> transactions_ = new pbc::RepeatedField<global::Lnrpc.Transaction>();
    /// <summary>
    //// The list of transactions relevant to the wallet.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.Transaction> Transactions {
      get { return transactions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransactionDetails);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransactionDetails other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!transactions_.Equals(other.transactions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= transactions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      transactions_.WriteTo(output, _repeated_transactions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += transactions_.CalculateSize(_repeated_transactions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransactionDetails other) {
      if (other == null) {
        return;
      }
      transactions_.Add(other.transactions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            transactions_.AddEntriesFrom(input, _repeated_transactions_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FeeLimit : pb::IMessage<FeeLimit> {
    private static readonly pb::MessageParser<FeeLimit> _parser = new pb::MessageParser<FeeLimit>(() => new FeeLimit());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FeeLimit> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeeLimit() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeeLimit(FeeLimit other) : this() {
      switch (other.LimitCase) {
        case LimitOneofCase.Fixed:
          Fixed = other.Fixed;
          break;
        case LimitOneofCase.FixedMsat:
          FixedMsat = other.FixedMsat;
          break;
        case LimitOneofCase.Percent:
          Percent = other.Percent;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeeLimit Clone() {
      return new FeeLimit(this);
    }

    /// <summary>Field number for the "fixed" field.</summary>
    public const int FixedFieldNumber = 1;
    /// <summary>
    ///*
    ///The fee limit expressed as a fixed amount of satoshis.
    ///
    ///The fields fixed and fixed_msat are mutually exclusive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Fixed {
      get { return limitCase_ == LimitOneofCase.Fixed ? (long) limit_ : 0L; }
      set {
        limit_ = value;
        limitCase_ = LimitOneofCase.Fixed;
      }
    }

    /// <summary>Field number for the "fixed_msat" field.</summary>
    public const int FixedMsatFieldNumber = 3;
    /// <summary>
    ///*
    ///The fee limit expressed as a fixed amount of millisatoshis.
    ///
    ///The fields fixed and fixed_msat are mutually exclusive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FixedMsat {
      get { return limitCase_ == LimitOneofCase.FixedMsat ? (long) limit_ : 0L; }
      set {
        limit_ = value;
        limitCase_ = LimitOneofCase.FixedMsat;
      }
    }

    /// <summary>Field number for the "percent" field.</summary>
    public const int PercentFieldNumber = 2;
    /// <summary>
    //// The fee limit expressed as a percentage of the payment amount.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Percent {
      get { return limitCase_ == LimitOneofCase.Percent ? (long) limit_ : 0L; }
      set {
        limit_ = value;
        limitCase_ = LimitOneofCase.Percent;
      }
    }

    private object limit_;
    /// <summary>Enum of possible cases for the "limit" oneof.</summary>
    public enum LimitOneofCase {
      None = 0,
      Fixed = 1,
      FixedMsat = 3,
      Percent = 2,
    }
    private LimitOneofCase limitCase_ = LimitOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LimitOneofCase LimitCase {
      get { return limitCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLimit() {
      limitCase_ = LimitOneofCase.None;
      limit_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FeeLimit);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FeeLimit other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Fixed != other.Fixed) return false;
      if (FixedMsat != other.FixedMsat) return false;
      if (Percent != other.Percent) return false;
      if (LimitCase != other.LimitCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (limitCase_ == LimitOneofCase.Fixed) hash ^= Fixed.GetHashCode();
      if (limitCase_ == LimitOneofCase.FixedMsat) hash ^= FixedMsat.GetHashCode();
      if (limitCase_ == LimitOneofCase.Percent) hash ^= Percent.GetHashCode();
      hash ^= (int) limitCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (limitCase_ == LimitOneofCase.Fixed) {
        output.WriteRawTag(8);
        output.WriteInt64(Fixed);
      }
      if (limitCase_ == LimitOneofCase.Percent) {
        output.WriteRawTag(16);
        output.WriteInt64(Percent);
      }
      if (limitCase_ == LimitOneofCase.FixedMsat) {
        output.WriteRawTag(24);
        output.WriteInt64(FixedMsat);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (limitCase_ == LimitOneofCase.Fixed) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Fixed);
      }
      if (limitCase_ == LimitOneofCase.FixedMsat) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FixedMsat);
      }
      if (limitCase_ == LimitOneofCase.Percent) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Percent);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FeeLimit other) {
      if (other == null) {
        return;
      }
      switch (other.LimitCase) {
        case LimitOneofCase.Fixed:
          Fixed = other.Fixed;
          break;
        case LimitOneofCase.FixedMsat:
          FixedMsat = other.FixedMsat;
          break;
        case LimitOneofCase.Percent:
          Percent = other.Percent;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Fixed = input.ReadInt64();
            break;
          }
          case 16: {
            Percent = input.ReadInt64();
            break;
          }
          case 24: {
            FixedMsat = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SendRequest : pb::IMessage<SendRequest> {
    private static readonly pb::MessageParser<SendRequest> _parser = new pb::MessageParser<SendRequest>(() => new SendRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendRequest(SendRequest other) : this() {
      dest_ = other.dest_;
      destString_ = other.destString_;
      amt_ = other.amt_;
      amtMsat_ = other.amtMsat_;
      paymentHash_ = other.paymentHash_;
      paymentHashString_ = other.paymentHashString_;
      paymentRequest_ = other.paymentRequest_;
      finalCltvDelta_ = other.finalCltvDelta_;
      feeLimit_ = other.feeLimit_ != null ? other.feeLimit_.Clone() : null;
      outgoingChanId_ = other.outgoingChanId_;
      lastHopPubkey_ = other.lastHopPubkey_;
      cltvLimit_ = other.cltvLimit_;
      destCustomRecords_ = other.destCustomRecords_.Clone();
      allowSelfPayment_ = other.allowSelfPayment_;
      destFeatures_ = other.destFeatures_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendRequest Clone() {
      return new SendRequest(this);
    }

    /// <summary>Field number for the "dest" field.</summary>
    public const int DestFieldNumber = 1;
    private pb::ByteString dest_ = pb::ByteString.Empty;
    /// <summary>
    ///*
    ///The identity pubkey of the payment recipient. When using REST, this field
    ///must be encoded as base64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Dest {
      get { return dest_; }
      set {
        dest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "dest_string" field.</summary>
    public const int DestStringFieldNumber = 2;
    private string destString_ = "";
    /// <summary>
    ///*
    ///The hex-encoded identity pubkey of the payment recipient. Deprecated now
    ///that the REST gateway supports base64 encoding of bytes fields.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DestString {
      get { return destString_; }
      set {
        destString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amt" field.</summary>
    public const int AmtFieldNumber = 3;
    private long amt_;
    /// <summary>
    ///*
    ///The amount to send expressed in satoshis.
    ///
    ///The fields amt and amt_msat are mutually exclusive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amt {
      get { return amt_; }
      set {
        amt_ = value;
      }
    }

    /// <summary>Field number for the "amt_msat" field.</summary>
    public const int AmtMsatFieldNumber = 12;
    private long amtMsat_;
    /// <summary>
    ///*
    ///The amount to send expressed in millisatoshis.
    ///
    ///The fields amt and amt_msat are mutually exclusive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmtMsat {
      get { return amtMsat_; }
      set {
        amtMsat_ = value;
      }
    }

    /// <summary>Field number for the "payment_hash" field.</summary>
    public const int PaymentHashFieldNumber = 4;
    private pb::ByteString paymentHash_ = pb::ByteString.Empty;
    /// <summary>
    ///*
    ///The hash to use within the payment's HTLC. When using REST, this field
    ///must be encoded as base64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PaymentHash {
      get { return paymentHash_; }
      set {
        paymentHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payment_hash_string" field.</summary>
    public const int PaymentHashStringFieldNumber = 5;
    private string paymentHashString_ = "";
    /// <summary>
    ///*
    ///The hex-encoded hash to use within the payment's HTLC. Deprecated now
    ///that the REST gateway supports base64 encoding of bytes fields.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PaymentHashString {
      get { return paymentHashString_; }
      set {
        paymentHashString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payment_request" field.</summary>
    public const int PaymentRequestFieldNumber = 6;
    private string paymentRequest_ = "";
    /// <summary>
    ///*
    ///A bare-bones invoice for a payment within the Lightning Network. With the
    ///details of the invoice, the sender has all the data necessary to send a
    ///payment to the recipient.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PaymentRequest {
      get { return paymentRequest_; }
      set {
        paymentRequest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "final_cltv_delta" field.</summary>
    public const int FinalCltvDeltaFieldNumber = 7;
    private int finalCltvDelta_;
    /// <summary>
    ///*
    ///The CLTV delta from the current height that should be used to set the
    ///timelock for the final hop.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FinalCltvDelta {
      get { return finalCltvDelta_; }
      set {
        finalCltvDelta_ = value;
      }
    }

    /// <summary>Field number for the "fee_limit" field.</summary>
    public const int FeeLimitFieldNumber = 8;
    private global::Lnrpc.FeeLimit feeLimit_;
    /// <summary>
    ///*
    ///The maximum number of satoshis that will be paid as a fee of the payment.
    ///This value can be represented either as a percentage of the amount being
    ///sent, or as a fixed amount of the maximum fee the user is willing the pay to
    ///send the payment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.FeeLimit FeeLimit {
      get { return feeLimit_; }
      set {
        feeLimit_ = value;
      }
    }

    /// <summary>Field number for the "outgoing_chan_id" field.</summary>
    public const int OutgoingChanIdFieldNumber = 9;
    private ulong outgoingChanId_;
    /// <summary>
    ///*
    ///The channel id of the channel that must be taken to the first hop. If zero,
    ///any channel may be used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong OutgoingChanId {
      get { return outgoingChanId_; }
      set {
        outgoingChanId_ = value;
      }
    }

    /// <summary>Field number for the "last_hop_pubkey" field.</summary>
    public const int LastHopPubkeyFieldNumber = 13;
    private pb::ByteString lastHopPubkey_ = pb::ByteString.Empty;
    /// <summary>
    ///*
    ///The pubkey of the last hop of the route. If empty, any hop may be used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString LastHopPubkey {
      get { return lastHopPubkey_; }
      set {
        lastHopPubkey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cltv_limit" field.</summary>
    public const int CltvLimitFieldNumber = 10;
    private uint cltvLimit_;
    /// <summary>
    ///* 
    ///An optional maximum total time lock for the route. This should not exceed
    ///lnd's `--max-cltv-expiry` setting. If zero, then the value of
    ///`--max-cltv-expiry` is enforced.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CltvLimit {
      get { return cltvLimit_; }
      set {
        cltvLimit_ = value;
      }
    }

    /// <summary>Field number for the "dest_custom_records" field.</summary>
    public const int DestCustomRecordsFieldNumber = 11;
    private static readonly pbc::MapField<ulong, pb::ByteString>.Codec _map_destCustomRecords_codec
        = new pbc::MapField<ulong, pb::ByteString>.Codec(pb::FieldCodec.ForUInt64(8, 0UL), pb::FieldCodec.ForBytes(18, pb::ByteString.Empty), 90);
    private readonly pbc::MapField<ulong, pb::ByteString> destCustomRecords_ = new pbc::MapField<ulong, pb::ByteString>();
    /// <summary>
    ///* 
    ///An optional field that can be used to pass an arbitrary set of TLV records
    ///to a peer which understands the new records. This can be used to pass
    ///application specific data during the payment attempt. Record types are
    ///required to be in the custom range >= 65536. When using REST, the values
    ///must be encoded as base64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<ulong, pb::ByteString> DestCustomRecords {
      get { return destCustomRecords_; }
    }

    /// <summary>Field number for the "allow_self_payment" field.</summary>
    public const int AllowSelfPaymentFieldNumber = 14;
    private bool allowSelfPayment_;
    /// <summary>
    //// If set, circular payments to self are permitted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AllowSelfPayment {
      get { return allowSelfPayment_; }
      set {
        allowSelfPayment_ = value;
      }
    }

    /// <summary>Field number for the "dest_features" field.</summary>
    public const int DestFeaturesFieldNumber = 15;
    private static readonly pb::FieldCodec<global::Lnrpc.FeatureBit> _repeated_destFeatures_codec
        = pb::FieldCodec.ForEnum(122, x => (int) x, x => (global::Lnrpc.FeatureBit) x);
    private readonly pbc::RepeatedField<global::Lnrpc.FeatureBit> destFeatures_ = new pbc::RepeatedField<global::Lnrpc.FeatureBit>();
    /// <summary>
    ///*
    ///Features assumed to be supported by the final node. All transitive feature
    ///depdencies must also be set properly. For a given feature bit pair, either
    ///optional or remote may be set, but not both. If this field is nil or empty,
    ///the router will try to load destination features from the graph as a
    ///fallback.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.FeatureBit> DestFeatures {
      get { return destFeatures_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Dest != other.Dest) return false;
      if (DestString != other.DestString) return false;
      if (Amt != other.Amt) return false;
      if (AmtMsat != other.AmtMsat) return false;
      if (PaymentHash != other.PaymentHash) return false;
      if (PaymentHashString != other.PaymentHashString) return false;
      if (PaymentRequest != other.PaymentRequest) return false;
      if (FinalCltvDelta != other.FinalCltvDelta) return false;
      if (!object.Equals(FeeLimit, other.FeeLimit)) return false;
      if (OutgoingChanId != other.OutgoingChanId) return false;
      if (LastHopPubkey != other.LastHopPubkey) return false;
      if (CltvLimit != other.CltvLimit) return false;
      if (!DestCustomRecords.Equals(other.DestCustomRecords)) return false;
      if (AllowSelfPayment != other.AllowSelfPayment) return false;
      if(!destFeatures_.Equals(other.destFeatures_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Dest.Length != 0) hash ^= Dest.GetHashCode();
      if (DestString.Length != 0) hash ^= DestString.GetHashCode();
      if (Amt != 0L) hash ^= Amt.GetHashCode();
      if (AmtMsat != 0L) hash ^= AmtMsat.GetHashCode();
      if (PaymentHash.Length != 0) hash ^= PaymentHash.GetHashCode();
      if (PaymentHashString.Length != 0) hash ^= PaymentHashString.GetHashCode();
      if (PaymentRequest.Length != 0) hash ^= PaymentRequest.GetHashCode();
      if (FinalCltvDelta != 0) hash ^= FinalCltvDelta.GetHashCode();
      if (feeLimit_ != null) hash ^= FeeLimit.GetHashCode();
      if (OutgoingChanId != 0UL) hash ^= OutgoingChanId.GetHashCode();
      if (LastHopPubkey.Length != 0) hash ^= LastHopPubkey.GetHashCode();
      if (CltvLimit != 0) hash ^= CltvLimit.GetHashCode();
      hash ^= DestCustomRecords.GetHashCode();
      if (AllowSelfPayment != false) hash ^= AllowSelfPayment.GetHashCode();
      hash ^= destFeatures_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Dest.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Dest);
      }
      if (DestString.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DestString);
      }
      if (Amt != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Amt);
      }
      if (PaymentHash.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(PaymentHash);
      }
      if (PaymentHashString.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(PaymentHashString);
      }
      if (PaymentRequest.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(PaymentRequest);
      }
      if (FinalCltvDelta != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(FinalCltvDelta);
      }
      if (feeLimit_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(FeeLimit);
      }
      if (OutgoingChanId != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(OutgoingChanId);
      }
      if (CltvLimit != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(CltvLimit);
      }
      destCustomRecords_.WriteTo(output, _map_destCustomRecords_codec);
      if (AmtMsat != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(AmtMsat);
      }
      if (LastHopPubkey.Length != 0) {
        output.WriteRawTag(106);
        output.WriteBytes(LastHopPubkey);
      }
      if (AllowSelfPayment != false) {
        output.WriteRawTag(112);
        output.WriteBool(AllowSelfPayment);
      }
      destFeatures_.WriteTo(output, _repeated_destFeatures_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Dest.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Dest);
      }
      if (DestString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DestString);
      }
      if (Amt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amt);
      }
      if (AmtMsat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AmtMsat);
      }
      if (PaymentHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PaymentHash);
      }
      if (PaymentHashString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PaymentHashString);
      }
      if (PaymentRequest.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PaymentRequest);
      }
      if (FinalCltvDelta != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FinalCltvDelta);
      }
      if (feeLimit_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FeeLimit);
      }
      if (OutgoingChanId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(OutgoingChanId);
      }
      if (LastHopPubkey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(LastHopPubkey);
      }
      if (CltvLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CltvLimit);
      }
      size += destCustomRecords_.CalculateSize(_map_destCustomRecords_codec);
      if (AllowSelfPayment != false) {
        size += 1 + 1;
      }
      size += destFeatures_.CalculateSize(_repeated_destFeatures_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendRequest other) {
      if (other == null) {
        return;
      }
      if (other.Dest.Length != 0) {
        Dest = other.Dest;
      }
      if (other.DestString.Length != 0) {
        DestString = other.DestString;
      }
      if (other.Amt != 0L) {
        Amt = other.Amt;
      }
      if (other.AmtMsat != 0L) {
        AmtMsat = other.AmtMsat;
      }
      if (other.PaymentHash.Length != 0) {
        PaymentHash = other.PaymentHash;
      }
      if (other.PaymentHashString.Length != 0) {
        PaymentHashString = other.PaymentHashString;
      }
      if (other.PaymentRequest.Length != 0) {
        PaymentRequest = other.PaymentRequest;
      }
      if (other.FinalCltvDelta != 0) {
        FinalCltvDelta = other.FinalCltvDelta;
      }
      if (other.feeLimit_ != null) {
        if (feeLimit_ == null) {
          FeeLimit = new global::Lnrpc.FeeLimit();
        }
        FeeLimit.MergeFrom(other.FeeLimit);
      }
      if (other.OutgoingChanId != 0UL) {
        OutgoingChanId = other.OutgoingChanId;
      }
      if (other.LastHopPubkey.Length != 0) {
        LastHopPubkey = other.LastHopPubkey;
      }
      if (other.CltvLimit != 0) {
        CltvLimit = other.CltvLimit;
      }
      destCustomRecords_.Add(other.destCustomRecords_);
      if (other.AllowSelfPayment != false) {
        AllowSelfPayment = other.AllowSelfPayment;
      }
      destFeatures_.Add(other.destFeatures_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Dest = input.ReadBytes();
            break;
          }
          case 18: {
            DestString = input.ReadString();
            break;
          }
          case 24: {
            Amt = input.ReadInt64();
            break;
          }
          case 34: {
            PaymentHash = input.ReadBytes();
            break;
          }
          case 42: {
            PaymentHashString = input.ReadString();
            break;
          }
          case 50: {
            PaymentRequest = input.ReadString();
            break;
          }
          case 56: {
            FinalCltvDelta = input.ReadInt32();
            break;
          }
          case 66: {
            if (feeLimit_ == null) {
              FeeLimit = new global::Lnrpc.FeeLimit();
            }
            input.ReadMessage(FeeLimit);
            break;
          }
          case 72: {
            OutgoingChanId = input.ReadUInt64();
            break;
          }
          case 80: {
            CltvLimit = input.ReadUInt32();
            break;
          }
          case 90: {
            destCustomRecords_.AddEntriesFrom(input, _map_destCustomRecords_codec);
            break;
          }
          case 96: {
            AmtMsat = input.ReadInt64();
            break;
          }
          case 106: {
            LastHopPubkey = input.ReadBytes();
            break;
          }
          case 112: {
            AllowSelfPayment = input.ReadBool();
            break;
          }
          case 122:
          case 120: {
            destFeatures_.AddEntriesFrom(input, _repeated_destFeatures_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SendResponse : pb::IMessage<SendResponse> {
    private static readonly pb::MessageParser<SendResponse> _parser = new pb::MessageParser<SendResponse>(() => new SendResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendResponse(SendResponse other) : this() {
      paymentError_ = other.paymentError_;
      paymentPreimage_ = other.paymentPreimage_;
      paymentRoute_ = other.paymentRoute_ != null ? other.paymentRoute_.Clone() : null;
      paymentHash_ = other.paymentHash_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendResponse Clone() {
      return new SendResponse(this);
    }

    /// <summary>Field number for the "payment_error" field.</summary>
    public const int PaymentErrorFieldNumber = 1;
    private string paymentError_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PaymentError {
      get { return paymentError_; }
      set {
        paymentError_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payment_preimage" field.</summary>
    public const int PaymentPreimageFieldNumber = 2;
    private pb::ByteString paymentPreimage_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PaymentPreimage {
      get { return paymentPreimage_; }
      set {
        paymentPreimage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payment_route" field.</summary>
    public const int PaymentRouteFieldNumber = 3;
    private global::Lnrpc.Route paymentRoute_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.Route PaymentRoute {
      get { return paymentRoute_; }
      set {
        paymentRoute_ = value;
      }
    }

    /// <summary>Field number for the "payment_hash" field.</summary>
    public const int PaymentHashFieldNumber = 4;
    private pb::ByteString paymentHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PaymentHash {
      get { return paymentHash_; }
      set {
        paymentHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PaymentError != other.PaymentError) return false;
      if (PaymentPreimage != other.PaymentPreimage) return false;
      if (!object.Equals(PaymentRoute, other.PaymentRoute)) return false;
      if (PaymentHash != other.PaymentHash) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PaymentError.Length != 0) hash ^= PaymentError.GetHashCode();
      if (PaymentPreimage.Length != 0) hash ^= PaymentPreimage.GetHashCode();
      if (paymentRoute_ != null) hash ^= PaymentRoute.GetHashCode();
      if (PaymentHash.Length != 0) hash ^= PaymentHash.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PaymentError.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PaymentError);
      }
      if (PaymentPreimage.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(PaymentPreimage);
      }
      if (paymentRoute_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PaymentRoute);
      }
      if (PaymentHash.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(PaymentHash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PaymentError.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PaymentError);
      }
      if (PaymentPreimage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PaymentPreimage);
      }
      if (paymentRoute_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PaymentRoute);
      }
      if (PaymentHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PaymentHash);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendResponse other) {
      if (other == null) {
        return;
      }
      if (other.PaymentError.Length != 0) {
        PaymentError = other.PaymentError;
      }
      if (other.PaymentPreimage.Length != 0) {
        PaymentPreimage = other.PaymentPreimage;
      }
      if (other.paymentRoute_ != null) {
        if (paymentRoute_ == null) {
          PaymentRoute = new global::Lnrpc.Route();
        }
        PaymentRoute.MergeFrom(other.PaymentRoute);
      }
      if (other.PaymentHash.Length != 0) {
        PaymentHash = other.PaymentHash;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PaymentError = input.ReadString();
            break;
          }
          case 18: {
            PaymentPreimage = input.ReadBytes();
            break;
          }
          case 26: {
            if (paymentRoute_ == null) {
              PaymentRoute = new global::Lnrpc.Route();
            }
            input.ReadMessage(PaymentRoute);
            break;
          }
          case 34: {
            PaymentHash = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SendToRouteRequest : pb::IMessage<SendToRouteRequest> {
    private static readonly pb::MessageParser<SendToRouteRequest> _parser = new pb::MessageParser<SendToRouteRequest>(() => new SendToRouteRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendToRouteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToRouteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToRouteRequest(SendToRouteRequest other) : this() {
      paymentHash_ = other.paymentHash_;
      paymentHashString_ = other.paymentHashString_;
      route_ = other.route_ != null ? other.route_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendToRouteRequest Clone() {
      return new SendToRouteRequest(this);
    }

    /// <summary>Field number for the "payment_hash" field.</summary>
    public const int PaymentHashFieldNumber = 1;
    private pb::ByteString paymentHash_ = pb::ByteString.Empty;
    /// <summary>
    ///*
    ///The payment hash to use for the HTLC. When using REST, this field must be
    ///encoded as base64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PaymentHash {
      get { return paymentHash_; }
      set {
        paymentHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payment_hash_string" field.</summary>
    public const int PaymentHashStringFieldNumber = 2;
    private string paymentHashString_ = "";
    /// <summary>
    ///*
    ///An optional hex-encoded payment hash to be used for the HTLC. Deprecated now
    ///that the REST gateway supports base64 encoding of bytes fields.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PaymentHashString {
      get { return paymentHashString_; }
      set {
        paymentHashString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "route" field.</summary>
    public const int RouteFieldNumber = 4;
    private global::Lnrpc.Route route_;
    /// <summary>
    //// Route that should be used to attempt to complete the payment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.Route Route {
      get { return route_; }
      set {
        route_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendToRouteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendToRouteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PaymentHash != other.PaymentHash) return false;
      if (PaymentHashString != other.PaymentHashString) return false;
      if (!object.Equals(Route, other.Route)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PaymentHash.Length != 0) hash ^= PaymentHash.GetHashCode();
      if (PaymentHashString.Length != 0) hash ^= PaymentHashString.GetHashCode();
      if (route_ != null) hash ^= Route.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PaymentHash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(PaymentHash);
      }
      if (PaymentHashString.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PaymentHashString);
      }
      if (route_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Route);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PaymentHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PaymentHash);
      }
      if (PaymentHashString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PaymentHashString);
      }
      if (route_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Route);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendToRouteRequest other) {
      if (other == null) {
        return;
      }
      if (other.PaymentHash.Length != 0) {
        PaymentHash = other.PaymentHash;
      }
      if (other.PaymentHashString.Length != 0) {
        PaymentHashString = other.PaymentHashString;
      }
      if (other.route_ != null) {
        if (route_ == null) {
          Route = new global::Lnrpc.Route();
        }
        Route.MergeFrom(other.Route);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PaymentHash = input.ReadBytes();
            break;
          }
          case 18: {
            PaymentHashString = input.ReadString();
            break;
          }
          case 34: {
            if (route_ == null) {
              Route = new global::Lnrpc.Route();
            }
            input.ReadMessage(Route);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChannelAcceptRequest : pb::IMessage<ChannelAcceptRequest> {
    private static readonly pb::MessageParser<ChannelAcceptRequest> _parser = new pb::MessageParser<ChannelAcceptRequest>(() => new ChannelAcceptRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelAcceptRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelAcceptRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelAcceptRequest(ChannelAcceptRequest other) : this() {
      nodePubkey_ = other.nodePubkey_;
      chainHash_ = other.chainHash_;
      pendingChanId_ = other.pendingChanId_;
      fundingAmt_ = other.fundingAmt_;
      pushAmt_ = other.pushAmt_;
      dustLimit_ = other.dustLimit_;
      maxValueInFlight_ = other.maxValueInFlight_;
      channelReserve_ = other.channelReserve_;
      minHtlc_ = other.minHtlc_;
      feePerKw_ = other.feePerKw_;
      csvDelay_ = other.csvDelay_;
      maxAcceptedHtlcs_ = other.maxAcceptedHtlcs_;
      channelFlags_ = other.channelFlags_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelAcceptRequest Clone() {
      return new ChannelAcceptRequest(this);
    }

    /// <summary>Field number for the "node_pubkey" field.</summary>
    public const int NodePubkeyFieldNumber = 1;
    private pb::ByteString nodePubkey_ = pb::ByteString.Empty;
    /// <summary>
    //// The pubkey of the node that wishes to open an inbound channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString NodePubkey {
      get { return nodePubkey_; }
      set {
        nodePubkey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "chain_hash" field.</summary>
    public const int ChainHashFieldNumber = 2;
    private pb::ByteString chainHash_ = pb::ByteString.Empty;
    /// <summary>
    //// The hash of the genesis block that the proposed channel resides in.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ChainHash {
      get { return chainHash_; }
      set {
        chainHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pending_chan_id" field.</summary>
    public const int PendingChanIdFieldNumber = 3;
    private pb::ByteString pendingChanId_ = pb::ByteString.Empty;
    /// <summary>
    //// The pending channel id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PendingChanId {
      get { return pendingChanId_; }
      set {
        pendingChanId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "funding_amt" field.</summary>
    public const int FundingAmtFieldNumber = 4;
    private ulong fundingAmt_;
    /// <summary>
    //// The funding amount in satoshis that initiator wishes to use in the channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FundingAmt {
      get { return fundingAmt_; }
      set {
        fundingAmt_ = value;
      }
    }

    /// <summary>Field number for the "push_amt" field.</summary>
    public const int PushAmtFieldNumber = 5;
    private ulong pushAmt_;
    /// <summary>
    //// The push amount of the proposed channel in millisatoshis.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong PushAmt {
      get { return pushAmt_; }
      set {
        pushAmt_ = value;
      }
    }

    /// <summary>Field number for the "dust_limit" field.</summary>
    public const int DustLimitFieldNumber = 6;
    private ulong dustLimit_;
    /// <summary>
    //// The dust limit of the initiator's commitment tx.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DustLimit {
      get { return dustLimit_; }
      set {
        dustLimit_ = value;
      }
    }

    /// <summary>Field number for the "max_value_in_flight" field.</summary>
    public const int MaxValueInFlightFieldNumber = 7;
    private ulong maxValueInFlight_;
    /// <summary>
    //// The maximum amount of coins in millisatoshis that can be pending in this channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MaxValueInFlight {
      get { return maxValueInFlight_; }
      set {
        maxValueInFlight_ = value;
      }
    }

    /// <summary>Field number for the "channel_reserve" field.</summary>
    public const int ChannelReserveFieldNumber = 8;
    private ulong channelReserve_;
    /// <summary>
    //// The minimum amount of satoshis the initiator requires us to have at all times.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ChannelReserve {
      get { return channelReserve_; }
      set {
        channelReserve_ = value;
      }
    }

    /// <summary>Field number for the "min_htlc" field.</summary>
    public const int MinHtlcFieldNumber = 9;
    private ulong minHtlc_;
    /// <summary>
    //// The smallest HTLC in millisatoshis that the initiator will accept.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MinHtlc {
      get { return minHtlc_; }
      set {
        minHtlc_ = value;
      }
    }

    /// <summary>Field number for the "fee_per_kw" field.</summary>
    public const int FeePerKwFieldNumber = 10;
    private ulong feePerKw_;
    /// <summary>
    //// The initial fee rate that the initiator suggests for both commitment transactions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FeePerKw {
      get { return feePerKw_; }
      set {
        feePerKw_ = value;
      }
    }

    /// <summary>Field number for the "csv_delay" field.</summary>
    public const int CsvDelayFieldNumber = 11;
    private uint csvDelay_;
    /// <summary>
    ///*
    ///The number of blocks to use for the relative time lock in the pay-to-self output
    ///of both commitment transactions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CsvDelay {
      get { return csvDelay_; }
      set {
        csvDelay_ = value;
      }
    }

    /// <summary>Field number for the "max_accepted_htlcs" field.</summary>
    public const int MaxAcceptedHtlcsFieldNumber = 12;
    private uint maxAcceptedHtlcs_;
    /// <summary>
    //// The total number of incoming HTLC's that the initiator will accept.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxAcceptedHtlcs {
      get { return maxAcceptedHtlcs_; }
      set {
        maxAcceptedHtlcs_ = value;
      }
    }

    /// <summary>Field number for the "channel_flags" field.</summary>
    public const int ChannelFlagsFieldNumber = 13;
    private uint channelFlags_;
    /// <summary>
    //// A bit-field which the initiator uses to specify proposed channel behavior.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChannelFlags {
      get { return channelFlags_; }
      set {
        channelFlags_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelAcceptRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelAcceptRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodePubkey != other.NodePubkey) return false;
      if (ChainHash != other.ChainHash) return false;
      if (PendingChanId != other.PendingChanId) return false;
      if (FundingAmt != other.FundingAmt) return false;
      if (PushAmt != other.PushAmt) return false;
      if (DustLimit != other.DustLimit) return false;
      if (MaxValueInFlight != other.MaxValueInFlight) return false;
      if (ChannelReserve != other.ChannelReserve) return false;
      if (MinHtlc != other.MinHtlc) return false;
      if (FeePerKw != other.FeePerKw) return false;
      if (CsvDelay != other.CsvDelay) return false;
      if (MaxAcceptedHtlcs != other.MaxAcceptedHtlcs) return false;
      if (ChannelFlags != other.ChannelFlags) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NodePubkey.Length != 0) hash ^= NodePubkey.GetHashCode();
      if (ChainHash.Length != 0) hash ^= ChainHash.GetHashCode();
      if (PendingChanId.Length != 0) hash ^= PendingChanId.GetHashCode();
      if (FundingAmt != 0UL) hash ^= FundingAmt.GetHashCode();
      if (PushAmt != 0UL) hash ^= PushAmt.GetHashCode();
      if (DustLimit != 0UL) hash ^= DustLimit.GetHashCode();
      if (MaxValueInFlight != 0UL) hash ^= MaxValueInFlight.GetHashCode();
      if (ChannelReserve != 0UL) hash ^= ChannelReserve.GetHashCode();
      if (MinHtlc != 0UL) hash ^= MinHtlc.GetHashCode();
      if (FeePerKw != 0UL) hash ^= FeePerKw.GetHashCode();
      if (CsvDelay != 0) hash ^= CsvDelay.GetHashCode();
      if (MaxAcceptedHtlcs != 0) hash ^= MaxAcceptedHtlcs.GetHashCode();
      if (ChannelFlags != 0) hash ^= ChannelFlags.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NodePubkey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(NodePubkey);
      }
      if (ChainHash.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(ChainHash);
      }
      if (PendingChanId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(PendingChanId);
      }
      if (FundingAmt != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(FundingAmt);
      }
      if (PushAmt != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(PushAmt);
      }
      if (DustLimit != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(DustLimit);
      }
      if (MaxValueInFlight != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(MaxValueInFlight);
      }
      if (ChannelReserve != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(ChannelReserve);
      }
      if (MinHtlc != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(MinHtlc);
      }
      if (FeePerKw != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(FeePerKw);
      }
      if (CsvDelay != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(CsvDelay);
      }
      if (MaxAcceptedHtlcs != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(MaxAcceptedHtlcs);
      }
      if (ChannelFlags != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(ChannelFlags);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NodePubkey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(NodePubkey);
      }
      if (ChainHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ChainHash);
      }
      if (PendingChanId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PendingChanId);
      }
      if (FundingAmt != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FundingAmt);
      }
      if (PushAmt != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PushAmt);
      }
      if (DustLimit != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DustLimit);
      }
      if (MaxValueInFlight != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MaxValueInFlight);
      }
      if (ChannelReserve != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ChannelReserve);
      }
      if (MinHtlc != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MinHtlc);
      }
      if (FeePerKw != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FeePerKw);
      }
      if (CsvDelay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CsvDelay);
      }
      if (MaxAcceptedHtlcs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxAcceptedHtlcs);
      }
      if (ChannelFlags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChannelFlags);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelAcceptRequest other) {
      if (other == null) {
        return;
      }
      if (other.NodePubkey.Length != 0) {
        NodePubkey = other.NodePubkey;
      }
      if (other.ChainHash.Length != 0) {
        ChainHash = other.ChainHash;
      }
      if (other.PendingChanId.Length != 0) {
        PendingChanId = other.PendingChanId;
      }
      if (other.FundingAmt != 0UL) {
        FundingAmt = other.FundingAmt;
      }
      if (other.PushAmt != 0UL) {
        PushAmt = other.PushAmt;
      }
      if (other.DustLimit != 0UL) {
        DustLimit = other.DustLimit;
      }
      if (other.MaxValueInFlight != 0UL) {
        MaxValueInFlight = other.MaxValueInFlight;
      }
      if (other.ChannelReserve != 0UL) {
        ChannelReserve = other.ChannelReserve;
      }
      if (other.MinHtlc != 0UL) {
        MinHtlc = other.MinHtlc;
      }
      if (other.FeePerKw != 0UL) {
        FeePerKw = other.FeePerKw;
      }
      if (other.CsvDelay != 0) {
        CsvDelay = other.CsvDelay;
      }
      if (other.MaxAcceptedHtlcs != 0) {
        MaxAcceptedHtlcs = other.MaxAcceptedHtlcs;
      }
      if (other.ChannelFlags != 0) {
        ChannelFlags = other.ChannelFlags;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            NodePubkey = input.ReadBytes();
            break;
          }
          case 18: {
            ChainHash = input.ReadBytes();
            break;
          }
          case 26: {
            PendingChanId = input.ReadBytes();
            break;
          }
          case 32: {
            FundingAmt = input.ReadUInt64();
            break;
          }
          case 40: {
            PushAmt = input.ReadUInt64();
            break;
          }
          case 48: {
            DustLimit = input.ReadUInt64();
            break;
          }
          case 56: {
            MaxValueInFlight = input.ReadUInt64();
            break;
          }
          case 64: {
            ChannelReserve = input.ReadUInt64();
            break;
          }
          case 72: {
            MinHtlc = input.ReadUInt64();
            break;
          }
          case 80: {
            FeePerKw = input.ReadUInt64();
            break;
          }
          case 88: {
            CsvDelay = input.ReadUInt32();
            break;
          }
          case 96: {
            MaxAcceptedHtlcs = input.ReadUInt32();
            break;
          }
          case 104: {
            ChannelFlags = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChannelAcceptResponse : pb::IMessage<ChannelAcceptResponse> {
    private static readonly pb::MessageParser<ChannelAcceptResponse> _parser = new pb::MessageParser<ChannelAcceptResponse>(() => new ChannelAcceptResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelAcceptResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelAcceptResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelAcceptResponse(ChannelAcceptResponse other) : this() {
      accept_ = other.accept_;
      pendingChanId_ = other.pendingChanId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelAcceptResponse Clone() {
      return new ChannelAcceptResponse(this);
    }

    /// <summary>Field number for the "accept" field.</summary>
    public const int AcceptFieldNumber = 1;
    private bool accept_;
    /// <summary>
    //// Whether or not the client accepts the channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Accept {
      get { return accept_; }
      set {
        accept_ = value;
      }
    }

    /// <summary>Field number for the "pending_chan_id" field.</summary>
    public const int PendingChanIdFieldNumber = 2;
    private pb::ByteString pendingChanId_ = pb::ByteString.Empty;
    /// <summary>
    //// The pending channel id to which this response applies.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PendingChanId {
      get { return pendingChanId_; }
      set {
        pendingChanId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelAcceptResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelAcceptResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Accept != other.Accept) return false;
      if (PendingChanId != other.PendingChanId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Accept != false) hash ^= Accept.GetHashCode();
      if (PendingChanId.Length != 0) hash ^= PendingChanId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Accept != false) {
        output.WriteRawTag(8);
        output.WriteBool(Accept);
      }
      if (PendingChanId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(PendingChanId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Accept != false) {
        size += 1 + 1;
      }
      if (PendingChanId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PendingChanId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelAcceptResponse other) {
      if (other == null) {
        return;
      }
      if (other.Accept != false) {
        Accept = other.Accept;
      }
      if (other.PendingChanId.Length != 0) {
        PendingChanId = other.PendingChanId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Accept = input.ReadBool();
            break;
          }
          case 18: {
            PendingChanId = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChannelPoint : pb::IMessage<ChannelPoint> {
    private static readonly pb::MessageParser<ChannelPoint> _parser = new pb::MessageParser<ChannelPoint>(() => new ChannelPoint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelPoint(ChannelPoint other) : this() {
      outputIndex_ = other.outputIndex_;
      switch (other.FundingTxidCase) {
        case FundingTxidOneofCase.FundingTxidBytes:
          FundingTxidBytes = other.FundingTxidBytes;
          break;
        case FundingTxidOneofCase.FundingTxidStr:
          FundingTxidStr = other.FundingTxidStr;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelPoint Clone() {
      return new ChannelPoint(this);
    }

    /// <summary>Field number for the "funding_txid_bytes" field.</summary>
    public const int FundingTxidBytesFieldNumber = 1;
    /// <summary>
    ///*
    ///Txid of the funding transaction. When using REST, this field must be
    ///encoded as base64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString FundingTxidBytes {
      get { return fundingTxidCase_ == FundingTxidOneofCase.FundingTxidBytes ? (pb::ByteString) fundingTxid_ : pb::ByteString.Empty; }
      set {
        fundingTxid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        fundingTxidCase_ = FundingTxidOneofCase.FundingTxidBytes;
      }
    }

    /// <summary>Field number for the "funding_txid_str" field.</summary>
    public const int FundingTxidStrFieldNumber = 2;
    /// <summary>
    ///*
    ///Hex-encoded string representing the byte-reversed hash of the funding
    ///transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FundingTxidStr {
      get { return fundingTxidCase_ == FundingTxidOneofCase.FundingTxidStr ? (string) fundingTxid_ : ""; }
      set {
        fundingTxid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        fundingTxidCase_ = FundingTxidOneofCase.FundingTxidStr;
      }
    }

    /// <summary>Field number for the "output_index" field.</summary>
    public const int OutputIndexFieldNumber = 3;
    private uint outputIndex_;
    /// <summary>
    //// The index of the output of the funding transaction
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OutputIndex {
      get { return outputIndex_; }
      set {
        outputIndex_ = value;
      }
    }

    private object fundingTxid_;
    /// <summary>Enum of possible cases for the "funding_txid" oneof.</summary>
    public enum FundingTxidOneofCase {
      None = 0,
      FundingTxidBytes = 1,
      FundingTxidStr = 2,
    }
    private FundingTxidOneofCase fundingTxidCase_ = FundingTxidOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FundingTxidOneofCase FundingTxidCase {
      get { return fundingTxidCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFundingTxid() {
      fundingTxidCase_ = FundingTxidOneofCase.None;
      fundingTxid_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FundingTxidBytes != other.FundingTxidBytes) return false;
      if (FundingTxidStr != other.FundingTxidStr) return false;
      if (OutputIndex != other.OutputIndex) return false;
      if (FundingTxidCase != other.FundingTxidCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (fundingTxidCase_ == FundingTxidOneofCase.FundingTxidBytes) hash ^= FundingTxidBytes.GetHashCode();
      if (fundingTxidCase_ == FundingTxidOneofCase.FundingTxidStr) hash ^= FundingTxidStr.GetHashCode();
      if (OutputIndex != 0) hash ^= OutputIndex.GetHashCode();
      hash ^= (int) fundingTxidCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (fundingTxidCase_ == FundingTxidOneofCase.FundingTxidBytes) {
        output.WriteRawTag(10);
        output.WriteBytes(FundingTxidBytes);
      }
      if (fundingTxidCase_ == FundingTxidOneofCase.FundingTxidStr) {
        output.WriteRawTag(18);
        output.WriteString(FundingTxidStr);
      }
      if (OutputIndex != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(OutputIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (fundingTxidCase_ == FundingTxidOneofCase.FundingTxidBytes) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(FundingTxidBytes);
      }
      if (fundingTxidCase_ == FundingTxidOneofCase.FundingTxidStr) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FundingTxidStr);
      }
      if (OutputIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OutputIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelPoint other) {
      if (other == null) {
        return;
      }
      if (other.OutputIndex != 0) {
        OutputIndex = other.OutputIndex;
      }
      switch (other.FundingTxidCase) {
        case FundingTxidOneofCase.FundingTxidBytes:
          FundingTxidBytes = other.FundingTxidBytes;
          break;
        case FundingTxidOneofCase.FundingTxidStr:
          FundingTxidStr = other.FundingTxidStr;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FundingTxidBytes = input.ReadBytes();
            break;
          }
          case 18: {
            FundingTxidStr = input.ReadString();
            break;
          }
          case 24: {
            OutputIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OutPoint : pb::IMessage<OutPoint> {
    private static readonly pb::MessageParser<OutPoint> _parser = new pb::MessageParser<OutPoint>(() => new OutPoint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OutPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutPoint(OutPoint other) : this() {
      txidBytes_ = other.txidBytes_;
      txidStr_ = other.txidStr_;
      outputIndex_ = other.outputIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OutPoint Clone() {
      return new OutPoint(this);
    }

    /// <summary>Field number for the "txid_bytes" field.</summary>
    public const int TxidBytesFieldNumber = 1;
    private pb::ByteString txidBytes_ = pb::ByteString.Empty;
    /// <summary>
    //// Raw bytes representing the transaction id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TxidBytes {
      get { return txidBytes_; }
      set {
        txidBytes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "txid_str" field.</summary>
    public const int TxidStrFieldNumber = 2;
    private string txidStr_ = "";
    /// <summary>
    //// Reversed, hex-encoded string representing the transaction id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TxidStr {
      get { return txidStr_; }
      set {
        txidStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "output_index" field.</summary>
    public const int OutputIndexFieldNumber = 3;
    private uint outputIndex_;
    /// <summary>
    //// The index of the output on the transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OutputIndex {
      get { return outputIndex_; }
      set {
        outputIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OutPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OutPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TxidBytes != other.TxidBytes) return false;
      if (TxidStr != other.TxidStr) return false;
      if (OutputIndex != other.OutputIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TxidBytes.Length != 0) hash ^= TxidBytes.GetHashCode();
      if (TxidStr.Length != 0) hash ^= TxidStr.GetHashCode();
      if (OutputIndex != 0) hash ^= OutputIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TxidBytes.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(TxidBytes);
      }
      if (TxidStr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TxidStr);
      }
      if (OutputIndex != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(OutputIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TxidBytes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TxidBytes);
      }
      if (TxidStr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TxidStr);
      }
      if (OutputIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OutputIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OutPoint other) {
      if (other == null) {
        return;
      }
      if (other.TxidBytes.Length != 0) {
        TxidBytes = other.TxidBytes;
      }
      if (other.TxidStr.Length != 0) {
        TxidStr = other.TxidStr;
      }
      if (other.OutputIndex != 0) {
        OutputIndex = other.OutputIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TxidBytes = input.ReadBytes();
            break;
          }
          case 18: {
            TxidStr = input.ReadString();
            break;
          }
          case 24: {
            OutputIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LightningAddress : pb::IMessage<LightningAddress> {
    private static readonly pb::MessageParser<LightningAddress> _parser = new pb::MessageParser<LightningAddress>(() => new LightningAddress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LightningAddress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LightningAddress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LightningAddress(LightningAddress other) : this() {
      pubkey_ = other.pubkey_;
      host_ = other.host_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LightningAddress Clone() {
      return new LightningAddress(this);
    }

    /// <summary>Field number for the "pubkey" field.</summary>
    public const int PubkeyFieldNumber = 1;
    private string pubkey_ = "";
    /// <summary>
    //// The identity pubkey of the Lightning node
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Pubkey {
      get { return pubkey_; }
      set {
        pubkey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "host" field.</summary>
    public const int HostFieldNumber = 2;
    private string host_ = "";
    /// <summary>
    //// The network location of the lightning node, e.g. `69.69.69.69:1337` or `localhost:10011`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Host {
      get { return host_; }
      set {
        host_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LightningAddress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LightningAddress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pubkey != other.Pubkey) return false;
      if (Host != other.Host) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pubkey.Length != 0) hash ^= Pubkey.GetHashCode();
      if (Host.Length != 0) hash ^= Host.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pubkey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Pubkey);
      }
      if (Host.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Host);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pubkey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pubkey);
      }
      if (Host.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Host);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LightningAddress other) {
      if (other == null) {
        return;
      }
      if (other.Pubkey.Length != 0) {
        Pubkey = other.Pubkey;
      }
      if (other.Host.Length != 0) {
        Host = other.Host;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Pubkey = input.ReadString();
            break;
          }
          case 18: {
            Host = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EstimateFeeRequest : pb::IMessage<EstimateFeeRequest> {
    private static readonly pb::MessageParser<EstimateFeeRequest> _parser = new pb::MessageParser<EstimateFeeRequest>(() => new EstimateFeeRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EstimateFeeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EstimateFeeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EstimateFeeRequest(EstimateFeeRequest other) : this() {
      addrToAmount_ = other.addrToAmount_.Clone();
      targetConf_ = other.targetConf_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EstimateFeeRequest Clone() {
      return new EstimateFeeRequest(this);
    }

    /// <summary>Field number for the "AddrToAmount" field.</summary>
    public const int AddrToAmountFieldNumber = 1;
    private static readonly pbc::MapField<string, long>.Codec _map_addrToAmount_codec
        = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForInt64(16, 0L), 10);
    private readonly pbc::MapField<string, long> addrToAmount_ = new pbc::MapField<string, long>();
    /// <summary>
    //// The map from addresses to amounts for the transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, long> AddrToAmount {
      get { return addrToAmount_; }
    }

    /// <summary>Field number for the "target_conf" field.</summary>
    public const int TargetConfFieldNumber = 2;
    private int targetConf_;
    /// <summary>
    //// The target number of blocks that this transaction should be confirmed by.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetConf {
      get { return targetConf_; }
      set {
        targetConf_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EstimateFeeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EstimateFeeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!AddrToAmount.Equals(other.AddrToAmount)) return false;
      if (TargetConf != other.TargetConf) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= AddrToAmount.GetHashCode();
      if (TargetConf != 0) hash ^= TargetConf.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      addrToAmount_.WriteTo(output, _map_addrToAmount_codec);
      if (TargetConf != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TargetConf);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += addrToAmount_.CalculateSize(_map_addrToAmount_codec);
      if (TargetConf != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetConf);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EstimateFeeRequest other) {
      if (other == null) {
        return;
      }
      addrToAmount_.Add(other.addrToAmount_);
      if (other.TargetConf != 0) {
        TargetConf = other.TargetConf;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            addrToAmount_.AddEntriesFrom(input, _map_addrToAmount_codec);
            break;
          }
          case 16: {
            TargetConf = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EstimateFeeResponse : pb::IMessage<EstimateFeeResponse> {
    private static readonly pb::MessageParser<EstimateFeeResponse> _parser = new pb::MessageParser<EstimateFeeResponse>(() => new EstimateFeeResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EstimateFeeResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EstimateFeeResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EstimateFeeResponse(EstimateFeeResponse other) : this() {
      feeSat_ = other.feeSat_;
      feerateSatPerByte_ = other.feerateSatPerByte_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EstimateFeeResponse Clone() {
      return new EstimateFeeResponse(this);
    }

    /// <summary>Field number for the "fee_sat" field.</summary>
    public const int FeeSatFieldNumber = 1;
    private long feeSat_;
    /// <summary>
    //// The total fee in satoshis.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FeeSat {
      get { return feeSat_; }
      set {
        feeSat_ = value;
      }
    }

    /// <summary>Field number for the "feerate_sat_per_byte" field.</summary>
    public const int FeerateSatPerByteFieldNumber = 2;
    private long feerateSatPerByte_;
    /// <summary>
    //// The fee rate in satoshi/byte.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FeerateSatPerByte {
      get { return feerateSatPerByte_; }
      set {
        feerateSatPerByte_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EstimateFeeResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EstimateFeeResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FeeSat != other.FeeSat) return false;
      if (FeerateSatPerByte != other.FeerateSatPerByte) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FeeSat != 0L) hash ^= FeeSat.GetHashCode();
      if (FeerateSatPerByte != 0L) hash ^= FeerateSatPerByte.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FeeSat != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(FeeSat);
      }
      if (FeerateSatPerByte != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(FeerateSatPerByte);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FeeSat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FeeSat);
      }
      if (FeerateSatPerByte != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FeerateSatPerByte);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EstimateFeeResponse other) {
      if (other == null) {
        return;
      }
      if (other.FeeSat != 0L) {
        FeeSat = other.FeeSat;
      }
      if (other.FeerateSatPerByte != 0L) {
        FeerateSatPerByte = other.FeerateSatPerByte;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FeeSat = input.ReadInt64();
            break;
          }
          case 16: {
            FeerateSatPerByte = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SendManyRequest : pb::IMessage<SendManyRequest> {
    private static readonly pb::MessageParser<SendManyRequest> _parser = new pb::MessageParser<SendManyRequest>(() => new SendManyRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendManyRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendManyRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendManyRequest(SendManyRequest other) : this() {
      addrToAmount_ = other.addrToAmount_.Clone();
      targetConf_ = other.targetConf_;
      satPerByte_ = other.satPerByte_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendManyRequest Clone() {
      return new SendManyRequest(this);
    }

    /// <summary>Field number for the "AddrToAmount" field.</summary>
    public const int AddrToAmountFieldNumber = 1;
    private static readonly pbc::MapField<string, long>.Codec _map_addrToAmount_codec
        = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForInt64(16, 0L), 10);
    private readonly pbc::MapField<string, long> addrToAmount_ = new pbc::MapField<string, long>();
    /// <summary>
    //// The map from addresses to amounts
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, long> AddrToAmount {
      get { return addrToAmount_; }
    }

    /// <summary>Field number for the "target_conf" field.</summary>
    public const int TargetConfFieldNumber = 3;
    private int targetConf_;
    /// <summary>
    //// The target number of blocks that this transaction should be confirmed by.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetConf {
      get { return targetConf_; }
      set {
        targetConf_ = value;
      }
    }

    /// <summary>Field number for the "sat_per_byte" field.</summary>
    public const int SatPerByteFieldNumber = 5;
    private long satPerByte_;
    /// <summary>
    //// A manual fee rate set in sat/byte that should be used when crafting the transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SatPerByte {
      get { return satPerByte_; }
      set {
        satPerByte_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendManyRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendManyRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!AddrToAmount.Equals(other.AddrToAmount)) return false;
      if (TargetConf != other.TargetConf) return false;
      if (SatPerByte != other.SatPerByte) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= AddrToAmount.GetHashCode();
      if (TargetConf != 0) hash ^= TargetConf.GetHashCode();
      if (SatPerByte != 0L) hash ^= SatPerByte.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      addrToAmount_.WriteTo(output, _map_addrToAmount_codec);
      if (TargetConf != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TargetConf);
      }
      if (SatPerByte != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(SatPerByte);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += addrToAmount_.CalculateSize(_map_addrToAmount_codec);
      if (TargetConf != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetConf);
      }
      if (SatPerByte != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SatPerByte);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendManyRequest other) {
      if (other == null) {
        return;
      }
      addrToAmount_.Add(other.addrToAmount_);
      if (other.TargetConf != 0) {
        TargetConf = other.TargetConf;
      }
      if (other.SatPerByte != 0L) {
        SatPerByte = other.SatPerByte;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            addrToAmount_.AddEntriesFrom(input, _map_addrToAmount_codec);
            break;
          }
          case 24: {
            TargetConf = input.ReadInt32();
            break;
          }
          case 40: {
            SatPerByte = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SendManyResponse : pb::IMessage<SendManyResponse> {
    private static readonly pb::MessageParser<SendManyResponse> _parser = new pb::MessageParser<SendManyResponse>(() => new SendManyResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendManyResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendManyResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendManyResponse(SendManyResponse other) : this() {
      txid_ = other.txid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendManyResponse Clone() {
      return new SendManyResponse(this);
    }

    /// <summary>Field number for the "txid" field.</summary>
    public const int TxidFieldNumber = 1;
    private string txid_ = "";
    /// <summary>
    //// The id of the transaction
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Txid {
      get { return txid_; }
      set {
        txid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendManyResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendManyResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Txid != other.Txid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Txid.Length != 0) hash ^= Txid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Txid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Txid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Txid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Txid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendManyResponse other) {
      if (other == null) {
        return;
      }
      if (other.Txid.Length != 0) {
        Txid = other.Txid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Txid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SendCoinsRequest : pb::IMessage<SendCoinsRequest> {
    private static readonly pb::MessageParser<SendCoinsRequest> _parser = new pb::MessageParser<SendCoinsRequest>(() => new SendCoinsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendCoinsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendCoinsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendCoinsRequest(SendCoinsRequest other) : this() {
      addr_ = other.addr_;
      amount_ = other.amount_;
      targetConf_ = other.targetConf_;
      satPerByte_ = other.satPerByte_;
      sendAll_ = other.sendAll_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendCoinsRequest Clone() {
      return new SendCoinsRequest(this);
    }

    /// <summary>Field number for the "addr" field.</summary>
    public const int AddrFieldNumber = 1;
    private string addr_ = "";
    /// <summary>
    //// The address to send coins to 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Addr {
      get { return addr_; }
      set {
        addr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    /// <summary>
    //// The amount in satoshis to send
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "target_conf" field.</summary>
    public const int TargetConfFieldNumber = 3;
    private int targetConf_;
    /// <summary>
    //// The target number of blocks that this transaction should be confirmed by.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetConf {
      get { return targetConf_; }
      set {
        targetConf_ = value;
      }
    }

    /// <summary>Field number for the "sat_per_byte" field.</summary>
    public const int SatPerByteFieldNumber = 5;
    private long satPerByte_;
    /// <summary>
    //// A manual fee rate set in sat/byte that should be used when crafting the transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SatPerByte {
      get { return satPerByte_; }
      set {
        satPerByte_ = value;
      }
    }

    /// <summary>Field number for the "send_all" field.</summary>
    public const int SendAllFieldNumber = 6;
    private bool sendAll_;
    /// <summary>
    ///*
    ///If set, then the amount field will be ignored, and lnd will attempt to
    ///send all the coins under control of the internal wallet to the specified
    ///address.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SendAll {
      get { return sendAll_; }
      set {
        sendAll_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendCoinsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendCoinsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Addr != other.Addr) return false;
      if (Amount != other.Amount) return false;
      if (TargetConf != other.TargetConf) return false;
      if (SatPerByte != other.SatPerByte) return false;
      if (SendAll != other.SendAll) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Addr.Length != 0) hash ^= Addr.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (TargetConf != 0) hash ^= TargetConf.GetHashCode();
      if (SatPerByte != 0L) hash ^= SatPerByte.GetHashCode();
      if (SendAll != false) hash ^= SendAll.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Addr.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Addr);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Amount);
      }
      if (TargetConf != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TargetConf);
      }
      if (SatPerByte != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(SatPerByte);
      }
      if (SendAll != false) {
        output.WriteRawTag(48);
        output.WriteBool(SendAll);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Addr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Addr);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (TargetConf != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetConf);
      }
      if (SatPerByte != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SatPerByte);
      }
      if (SendAll != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendCoinsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Addr.Length != 0) {
        Addr = other.Addr;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.TargetConf != 0) {
        TargetConf = other.TargetConf;
      }
      if (other.SatPerByte != 0L) {
        SatPerByte = other.SatPerByte;
      }
      if (other.SendAll != false) {
        SendAll = other.SendAll;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Addr = input.ReadString();
            break;
          }
          case 16: {
            Amount = input.ReadInt64();
            break;
          }
          case 24: {
            TargetConf = input.ReadInt32();
            break;
          }
          case 40: {
            SatPerByte = input.ReadInt64();
            break;
          }
          case 48: {
            SendAll = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SendCoinsResponse : pb::IMessage<SendCoinsResponse> {
    private static readonly pb::MessageParser<SendCoinsResponse> _parser = new pb::MessageParser<SendCoinsResponse>(() => new SendCoinsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendCoinsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendCoinsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendCoinsResponse(SendCoinsResponse other) : this() {
      txid_ = other.txid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendCoinsResponse Clone() {
      return new SendCoinsResponse(this);
    }

    /// <summary>Field number for the "txid" field.</summary>
    public const int TxidFieldNumber = 1;
    private string txid_ = "";
    /// <summary>
    //// The transaction ID of the transaction
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Txid {
      get { return txid_; }
      set {
        txid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendCoinsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendCoinsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Txid != other.Txid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Txid.Length != 0) hash ^= Txid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Txid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Txid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Txid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Txid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendCoinsResponse other) {
      if (other == null) {
        return;
      }
      if (other.Txid.Length != 0) {
        Txid = other.Txid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Txid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListUnspentRequest : pb::IMessage<ListUnspentRequest> {
    private static readonly pb::MessageParser<ListUnspentRequest> _parser = new pb::MessageParser<ListUnspentRequest>(() => new ListUnspentRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListUnspentRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListUnspentRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListUnspentRequest(ListUnspentRequest other) : this() {
      minConfs_ = other.minConfs_;
      maxConfs_ = other.maxConfs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListUnspentRequest Clone() {
      return new ListUnspentRequest(this);
    }

    /// <summary>Field number for the "min_confs" field.</summary>
    public const int MinConfsFieldNumber = 1;
    private int minConfs_;
    /// <summary>
    //// The minimum number of confirmations to be included.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinConfs {
      get { return minConfs_; }
      set {
        minConfs_ = value;
      }
    }

    /// <summary>Field number for the "max_confs" field.</summary>
    public const int MaxConfsFieldNumber = 2;
    private int maxConfs_;
    /// <summary>
    //// The maximum number of confirmations to be included.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxConfs {
      get { return maxConfs_; }
      set {
        maxConfs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListUnspentRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListUnspentRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MinConfs != other.MinConfs) return false;
      if (MaxConfs != other.MaxConfs) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MinConfs != 0) hash ^= MinConfs.GetHashCode();
      if (MaxConfs != 0) hash ^= MaxConfs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MinConfs != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MinConfs);
      }
      if (MaxConfs != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxConfs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MinConfs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinConfs);
      }
      if (MaxConfs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxConfs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListUnspentRequest other) {
      if (other == null) {
        return;
      }
      if (other.MinConfs != 0) {
        MinConfs = other.MinConfs;
      }
      if (other.MaxConfs != 0) {
        MaxConfs = other.MaxConfs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MinConfs = input.ReadInt32();
            break;
          }
          case 16: {
            MaxConfs = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListUnspentResponse : pb::IMessage<ListUnspentResponse> {
    private static readonly pb::MessageParser<ListUnspentResponse> _parser = new pb::MessageParser<ListUnspentResponse>(() => new ListUnspentResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListUnspentResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListUnspentResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListUnspentResponse(ListUnspentResponse other) : this() {
      utxos_ = other.utxos_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListUnspentResponse Clone() {
      return new ListUnspentResponse(this);
    }

    /// <summary>Field number for the "utxos" field.</summary>
    public const int UtxosFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Lnrpc.Utxo> _repeated_utxos_codec
        = pb::FieldCodec.ForMessage(10, global::Lnrpc.Utxo.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.Utxo> utxos_ = new pbc::RepeatedField<global::Lnrpc.Utxo>();
    /// <summary>
    //// A list of utxos
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.Utxo> Utxos {
      get { return utxos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListUnspentResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListUnspentResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!utxos_.Equals(other.utxos_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= utxos_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      utxos_.WriteTo(output, _repeated_utxos_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += utxos_.CalculateSize(_repeated_utxos_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListUnspentResponse other) {
      if (other == null) {
        return;
      }
      utxos_.Add(other.utxos_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            utxos_.AddEntriesFrom(input, _repeated_utxos_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NewAddressRequest : pb::IMessage<NewAddressRequest> {
    private static readonly pb::MessageParser<NewAddressRequest> _parser = new pb::MessageParser<NewAddressRequest>(() => new NewAddressRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NewAddressRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewAddressRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewAddressRequest(NewAddressRequest other) : this() {
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewAddressRequest Clone() {
      return new NewAddressRequest(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Lnrpc.AddressType type_ = global::Lnrpc.AddressType.WitnessPubkeyHash;
    /// <summary>
    //// The address type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.AddressType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NewAddressRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NewAddressRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != global::Lnrpc.AddressType.WitnessPubkeyHash) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != global::Lnrpc.AddressType.WitnessPubkeyHash) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != global::Lnrpc.AddressType.WitnessPubkeyHash) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NewAddressRequest other) {
      if (other == null) {
        return;
      }
      if (other.Type != global::Lnrpc.AddressType.WitnessPubkeyHash) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Lnrpc.AddressType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NewAddressResponse : pb::IMessage<NewAddressResponse> {
    private static readonly pb::MessageParser<NewAddressResponse> _parser = new pb::MessageParser<NewAddressResponse>(() => new NewAddressResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NewAddressResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewAddressResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewAddressResponse(NewAddressResponse other) : this() {
      address_ = other.address_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NewAddressResponse Clone() {
      return new NewAddressResponse(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private string address_ = "";
    /// <summary>
    //// The newly generated wallet address
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NewAddressResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NewAddressResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NewAddressResponse other) {
      if (other == null) {
        return;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SignMessageRequest : pb::IMessage<SignMessageRequest> {
    private static readonly pb::MessageParser<SignMessageRequest> _parser = new pb::MessageParser<SignMessageRequest>(() => new SignMessageRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SignMessageRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignMessageRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignMessageRequest(SignMessageRequest other) : this() {
      msg_ = other.msg_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignMessageRequest Clone() {
      return new SignMessageRequest(this);
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 1;
    private pb::ByteString msg_ = pb::ByteString.Empty;
    /// <summary>
    ///*
    ///The message to be signed. When using REST, this field must be encoded as
    ///base64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SignMessageRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SignMessageRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msg != other.Msg) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msg.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Msg);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Msg);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SignMessageRequest other) {
      if (other == null) {
        return;
      }
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Msg = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SignMessageResponse : pb::IMessage<SignMessageResponse> {
    private static readonly pb::MessageParser<SignMessageResponse> _parser = new pb::MessageParser<SignMessageResponse>(() => new SignMessageResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SignMessageResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignMessageResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignMessageResponse(SignMessageResponse other) : this() {
      signature_ = other.signature_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignMessageResponse Clone() {
      return new SignMessageResponse(this);
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 1;
    private string signature_ = "";
    /// <summary>
    //// The signature for the given message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Signature {
      get { return signature_; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SignMessageResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SignMessageResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Signature != other.Signature) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Signature.Length != 0) hash ^= Signature.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Signature.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Signature);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Signature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Signature);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SignMessageResponse other) {
      if (other == null) {
        return;
      }
      if (other.Signature.Length != 0) {
        Signature = other.Signature;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Signature = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VerifyMessageRequest : pb::IMessage<VerifyMessageRequest> {
    private static readonly pb::MessageParser<VerifyMessageRequest> _parser = new pb::MessageParser<VerifyMessageRequest>(() => new VerifyMessageRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VerifyMessageRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyMessageRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyMessageRequest(VerifyMessageRequest other) : this() {
      msg_ = other.msg_;
      signature_ = other.signature_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyMessageRequest Clone() {
      return new VerifyMessageRequest(this);
    }

    /// <summary>Field number for the "msg" field.</summary>
    public const int MsgFieldNumber = 1;
    private pb::ByteString msg_ = pb::ByteString.Empty;
    /// <summary>
    ///*
    ///The message over which the signature is to be verified. When using REST,
    ///this field must be encoded as base64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Msg {
      get { return msg_; }
      set {
        msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 2;
    private string signature_ = "";
    /// <summary>
    //// The signature to be verified over the given message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Signature {
      get { return signature_; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VerifyMessageRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VerifyMessageRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Msg != other.Msg) return false;
      if (Signature != other.Signature) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Msg.Length != 0) hash ^= Msg.GetHashCode();
      if (Signature.Length != 0) hash ^= Signature.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Msg.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Msg);
      }
      if (Signature.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Signature);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Msg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Msg);
      }
      if (Signature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Signature);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VerifyMessageRequest other) {
      if (other == null) {
        return;
      }
      if (other.Msg.Length != 0) {
        Msg = other.Msg;
      }
      if (other.Signature.Length != 0) {
        Signature = other.Signature;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Msg = input.ReadBytes();
            break;
          }
          case 18: {
            Signature = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VerifyMessageResponse : pb::IMessage<VerifyMessageResponse> {
    private static readonly pb::MessageParser<VerifyMessageResponse> _parser = new pb::MessageParser<VerifyMessageResponse>(() => new VerifyMessageResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VerifyMessageResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyMessageResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyMessageResponse(VerifyMessageResponse other) : this() {
      valid_ = other.valid_;
      pubkey_ = other.pubkey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyMessageResponse Clone() {
      return new VerifyMessageResponse(this);
    }

    /// <summary>Field number for the "valid" field.</summary>
    public const int ValidFieldNumber = 1;
    private bool valid_;
    /// <summary>
    //// Whether the signature was valid over the given message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Valid {
      get { return valid_; }
      set {
        valid_ = value;
      }
    }

    /// <summary>Field number for the "pubkey" field.</summary>
    public const int PubkeyFieldNumber = 2;
    private string pubkey_ = "";
    /// <summary>
    //// The pubkey recovered from the signature
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Pubkey {
      get { return pubkey_; }
      set {
        pubkey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VerifyMessageResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VerifyMessageResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Valid != other.Valid) return false;
      if (Pubkey != other.Pubkey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Valid != false) hash ^= Valid.GetHashCode();
      if (Pubkey.Length != 0) hash ^= Pubkey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Valid != false) {
        output.WriteRawTag(8);
        output.WriteBool(Valid);
      }
      if (Pubkey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Pubkey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Valid != false) {
        size += 1 + 1;
      }
      if (Pubkey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Pubkey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VerifyMessageResponse other) {
      if (other == null) {
        return;
      }
      if (other.Valid != false) {
        Valid = other.Valid;
      }
      if (other.Pubkey.Length != 0) {
        Pubkey = other.Pubkey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Valid = input.ReadBool();
            break;
          }
          case 18: {
            Pubkey = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConnectPeerRequest : pb::IMessage<ConnectPeerRequest> {
    private static readonly pb::MessageParser<ConnectPeerRequest> _parser = new pb::MessageParser<ConnectPeerRequest>(() => new ConnectPeerRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectPeerRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectPeerRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectPeerRequest(ConnectPeerRequest other) : this() {
      addr_ = other.addr_ != null ? other.addr_.Clone() : null;
      perm_ = other.perm_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectPeerRequest Clone() {
      return new ConnectPeerRequest(this);
    }

    /// <summary>Field number for the "addr" field.</summary>
    public const int AddrFieldNumber = 1;
    private global::Lnrpc.LightningAddress addr_;
    /// <summary>
    //// Lightning address of the peer, in the format `&lt;pubkey>@host`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.LightningAddress Addr {
      get { return addr_; }
      set {
        addr_ = value;
      }
    }

    /// <summary>Field number for the "perm" field.</summary>
    public const int PermFieldNumber = 2;
    private bool perm_;
    /// <summary>
    ///* If set, the daemon will attempt to persistently connect to the target
    /// peer. Otherwise, the call will be synchronous. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Perm {
      get { return perm_; }
      set {
        perm_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectPeerRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectPeerRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Addr, other.Addr)) return false;
      if (Perm != other.Perm) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (addr_ != null) hash ^= Addr.GetHashCode();
      if (Perm != false) hash ^= Perm.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (addr_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Addr);
      }
      if (Perm != false) {
        output.WriteRawTag(16);
        output.WriteBool(Perm);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (addr_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Addr);
      }
      if (Perm != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectPeerRequest other) {
      if (other == null) {
        return;
      }
      if (other.addr_ != null) {
        if (addr_ == null) {
          Addr = new global::Lnrpc.LightningAddress();
        }
        Addr.MergeFrom(other.Addr);
      }
      if (other.Perm != false) {
        Perm = other.Perm;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (addr_ == null) {
              Addr = new global::Lnrpc.LightningAddress();
            }
            input.ReadMessage(Addr);
            break;
          }
          case 16: {
            Perm = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConnectPeerResponse : pb::IMessage<ConnectPeerResponse> {
    private static readonly pb::MessageParser<ConnectPeerResponse> _parser = new pb::MessageParser<ConnectPeerResponse>(() => new ConnectPeerResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectPeerResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectPeerResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectPeerResponse(ConnectPeerResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectPeerResponse Clone() {
      return new ConnectPeerResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectPeerResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectPeerResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectPeerResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class DisconnectPeerRequest : pb::IMessage<DisconnectPeerRequest> {
    private static readonly pb::MessageParser<DisconnectPeerRequest> _parser = new pb::MessageParser<DisconnectPeerRequest>(() => new DisconnectPeerRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DisconnectPeerRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisconnectPeerRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisconnectPeerRequest(DisconnectPeerRequest other) : this() {
      pubKey_ = other.pubKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisconnectPeerRequest Clone() {
      return new DisconnectPeerRequest(this);
    }

    /// <summary>Field number for the "pub_key" field.</summary>
    public const int PubKeyFieldNumber = 1;
    private string pubKey_ = "";
    /// <summary>
    //// The pubkey of the node to disconnect from
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PubKey {
      get { return pubKey_; }
      set {
        pubKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DisconnectPeerRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DisconnectPeerRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PubKey != other.PubKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PubKey.Length != 0) hash ^= PubKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PubKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PubKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PubKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PubKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DisconnectPeerRequest other) {
      if (other == null) {
        return;
      }
      if (other.PubKey.Length != 0) {
        PubKey = other.PubKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PubKey = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DisconnectPeerResponse : pb::IMessage<DisconnectPeerResponse> {
    private static readonly pb::MessageParser<DisconnectPeerResponse> _parser = new pb::MessageParser<DisconnectPeerResponse>(() => new DisconnectPeerResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DisconnectPeerResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisconnectPeerResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisconnectPeerResponse(DisconnectPeerResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisconnectPeerResponse Clone() {
      return new DisconnectPeerResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DisconnectPeerResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DisconnectPeerResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DisconnectPeerResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class HTLC : pb::IMessage<HTLC> {
    private static readonly pb::MessageParser<HTLC> _parser = new pb::MessageParser<HTLC>(() => new HTLC());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HTLC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HTLC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HTLC(HTLC other) : this() {
      incoming_ = other.incoming_;
      amount_ = other.amount_;
      hashLock_ = other.hashLock_;
      expirationHeight_ = other.expirationHeight_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HTLC Clone() {
      return new HTLC(this);
    }

    /// <summary>Field number for the "incoming" field.</summary>
    public const int IncomingFieldNumber = 1;
    private bool incoming_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Incoming {
      get { return incoming_; }
      set {
        incoming_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "hash_lock" field.</summary>
    public const int HashLockFieldNumber = 3;
    private pb::ByteString hashLock_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString HashLock {
      get { return hashLock_; }
      set {
        hashLock_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "expiration_height" field.</summary>
    public const int ExpirationHeightFieldNumber = 4;
    private uint expirationHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExpirationHeight {
      get { return expirationHeight_; }
      set {
        expirationHeight_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HTLC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HTLC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Incoming != other.Incoming) return false;
      if (Amount != other.Amount) return false;
      if (HashLock != other.HashLock) return false;
      if (ExpirationHeight != other.ExpirationHeight) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Incoming != false) hash ^= Incoming.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (HashLock.Length != 0) hash ^= HashLock.GetHashCode();
      if (ExpirationHeight != 0) hash ^= ExpirationHeight.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Incoming != false) {
        output.WriteRawTag(8);
        output.WriteBool(Incoming);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Amount);
      }
      if (HashLock.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(HashLock);
      }
      if (ExpirationHeight != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(ExpirationHeight);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Incoming != false) {
        size += 1 + 1;
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (HashLock.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(HashLock);
      }
      if (ExpirationHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExpirationHeight);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HTLC other) {
      if (other == null) {
        return;
      }
      if (other.Incoming != false) {
        Incoming = other.Incoming;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.HashLock.Length != 0) {
        HashLock = other.HashLock;
      }
      if (other.ExpirationHeight != 0) {
        ExpirationHeight = other.ExpirationHeight;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Incoming = input.ReadBool();
            break;
          }
          case 16: {
            Amount = input.ReadInt64();
            break;
          }
          case 26: {
            HashLock = input.ReadBytes();
            break;
          }
          case 32: {
            ExpirationHeight = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Channel : pb::IMessage<Channel> {
    private static readonly pb::MessageParser<Channel> _parser = new pb::MessageParser<Channel>(() => new Channel());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Channel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Channel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Channel(Channel other) : this() {
      active_ = other.active_;
      remotePubkey_ = other.remotePubkey_;
      channelPoint_ = other.channelPoint_;
      chanId_ = other.chanId_;
      capacity_ = other.capacity_;
      localBalance_ = other.localBalance_;
      remoteBalance_ = other.remoteBalance_;
      commitFee_ = other.commitFee_;
      commitWeight_ = other.commitWeight_;
      feePerKw_ = other.feePerKw_;
      unsettledBalance_ = other.unsettledBalance_;
      totalSatoshisSent_ = other.totalSatoshisSent_;
      totalSatoshisReceived_ = other.totalSatoshisReceived_;
      numUpdates_ = other.numUpdates_;
      pendingHtlcs_ = other.pendingHtlcs_.Clone();
      csvDelay_ = other.csvDelay_;
      private_ = other.private_;
      initiator_ = other.initiator_;
      chanStatusFlags_ = other.chanStatusFlags_;
      localChanReserveSat_ = other.localChanReserveSat_;
      remoteChanReserveSat_ = other.remoteChanReserveSat_;
      staticRemoteKey_ = other.staticRemoteKey_;
      lifetime_ = other.lifetime_;
      uptime_ = other.uptime_;
      closeAddress_ = other.closeAddress_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Channel Clone() {
      return new Channel(this);
    }

    /// <summary>Field number for the "active" field.</summary>
    public const int ActiveFieldNumber = 1;
    private bool active_;
    /// <summary>
    //// Whether this channel is active or not
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Active {
      get { return active_; }
      set {
        active_ = value;
      }
    }

    /// <summary>Field number for the "remote_pubkey" field.</summary>
    public const int RemotePubkeyFieldNumber = 2;
    private string remotePubkey_ = "";
    /// <summary>
    //// The identity pubkey of the remote node
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RemotePubkey {
      get { return remotePubkey_; }
      set {
        remotePubkey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "channel_point" field.</summary>
    public const int ChannelPointFieldNumber = 3;
    private string channelPoint_ = "";
    /// <summary>
    ///*
    ///The outpoint (txid:index) of the funding transaction. With this value, Bob
    ///will be able to generate a signature for Alice's version of the commitment
    ///transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChannelPoint {
      get { return channelPoint_; }
      set {
        channelPoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "chan_id" field.</summary>
    public const int ChanIdFieldNumber = 4;
    private ulong chanId_;
    /// <summary>
    ///*
    ///The unique channel ID for the channel. The first 3 bytes are the block
    ///height, the next 3 the index within the block, and the last 2 bytes are the
    ///output index for the channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ChanId {
      get { return chanId_; }
      set {
        chanId_ = value;
      }
    }

    /// <summary>Field number for the "capacity" field.</summary>
    public const int CapacityFieldNumber = 5;
    private long capacity_;
    /// <summary>
    //// The total amount of funds held in this channel
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Capacity {
      get { return capacity_; }
      set {
        capacity_ = value;
      }
    }

    /// <summary>Field number for the "local_balance" field.</summary>
    public const int LocalBalanceFieldNumber = 6;
    private long localBalance_;
    /// <summary>
    //// This node's current balance in this channel
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LocalBalance {
      get { return localBalance_; }
      set {
        localBalance_ = value;
      }
    }

    /// <summary>Field number for the "remote_balance" field.</summary>
    public const int RemoteBalanceFieldNumber = 7;
    private long remoteBalance_;
    /// <summary>
    //// The counterparty's current balance in this channel
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RemoteBalance {
      get { return remoteBalance_; }
      set {
        remoteBalance_ = value;
      }
    }

    /// <summary>Field number for the "commit_fee" field.</summary>
    public const int CommitFeeFieldNumber = 8;
    private long commitFee_;
    /// <summary>
    ///*
    ///The amount calculated to be paid in fees for the current set of commitment
    ///transactions. The fee amount is persisted with the channel in order to
    ///allow the fee amount to be removed and recalculated with each channel state
    ///update, including updates that happen after a system restart.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CommitFee {
      get { return commitFee_; }
      set {
        commitFee_ = value;
      }
    }

    /// <summary>Field number for the "commit_weight" field.</summary>
    public const int CommitWeightFieldNumber = 9;
    private long commitWeight_;
    /// <summary>
    //// The weight of the commitment transaction
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CommitWeight {
      get { return commitWeight_; }
      set {
        commitWeight_ = value;
      }
    }

    /// <summary>Field number for the "fee_per_kw" field.</summary>
    public const int FeePerKwFieldNumber = 10;
    private long feePerKw_;
    /// <summary>
    ///*
    ///The required number of satoshis per kilo-weight that the requester will pay
    ///at all times, for both the funding transaction and commitment transaction.
    ///This value can later be updated once the channel is open.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FeePerKw {
      get { return feePerKw_; }
      set {
        feePerKw_ = value;
      }
    }

    /// <summary>Field number for the "unsettled_balance" field.</summary>
    public const int UnsettledBalanceFieldNumber = 11;
    private long unsettledBalance_;
    /// <summary>
    //// The unsettled balance in this channel
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UnsettledBalance {
      get { return unsettledBalance_; }
      set {
        unsettledBalance_ = value;
      }
    }

    /// <summary>Field number for the "total_satoshis_sent" field.</summary>
    public const int TotalSatoshisSentFieldNumber = 12;
    private long totalSatoshisSent_;
    /// <summary>
    ///*
    ///The total number of satoshis we've sent within this channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalSatoshisSent {
      get { return totalSatoshisSent_; }
      set {
        totalSatoshisSent_ = value;
      }
    }

    /// <summary>Field number for the "total_satoshis_received" field.</summary>
    public const int TotalSatoshisReceivedFieldNumber = 13;
    private long totalSatoshisReceived_;
    /// <summary>
    ///*
    ///The total number of satoshis we've received within this channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalSatoshisReceived {
      get { return totalSatoshisReceived_; }
      set {
        totalSatoshisReceived_ = value;
      }
    }

    /// <summary>Field number for the "num_updates" field.</summary>
    public const int NumUpdatesFieldNumber = 14;
    private ulong numUpdates_;
    /// <summary>
    ///*
    ///The total number of updates conducted within this channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NumUpdates {
      get { return numUpdates_; }
      set {
        numUpdates_ = value;
      }
    }

    /// <summary>Field number for the "pending_htlcs" field.</summary>
    public const int PendingHtlcsFieldNumber = 15;
    private static readonly pb::FieldCodec<global::Lnrpc.HTLC> _repeated_pendingHtlcs_codec
        = pb::FieldCodec.ForMessage(122, global::Lnrpc.HTLC.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.HTLC> pendingHtlcs_ = new pbc::RepeatedField<global::Lnrpc.HTLC>();
    /// <summary>
    ///*
    ///The list of active, uncleared HTLCs currently pending within the channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.HTLC> PendingHtlcs {
      get { return pendingHtlcs_; }
    }

    /// <summary>Field number for the "csv_delay" field.</summary>
    public const int CsvDelayFieldNumber = 16;
    private uint csvDelay_;
    /// <summary>
    ///*
    ///The CSV delay expressed in relative blocks. If the channel is force closed,
    ///we will need to wait for this many blocks before we can regain our funds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CsvDelay {
      get { return csvDelay_; }
      set {
        csvDelay_ = value;
      }
    }

    /// <summary>Field number for the "private" field.</summary>
    public const int PrivateFieldNumber = 17;
    private bool private_;
    /// <summary>
    //// Whether this channel is advertised to the network or not.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Private {
      get { return private_; }
      set {
        private_ = value;
      }
    }

    /// <summary>Field number for the "initiator" field.</summary>
    public const int InitiatorFieldNumber = 18;
    private bool initiator_;
    /// <summary>
    //// True if we were the ones that created the channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Initiator {
      get { return initiator_; }
      set {
        initiator_ = value;
      }
    }

    /// <summary>Field number for the "chan_status_flags" field.</summary>
    public const int ChanStatusFlagsFieldNumber = 19;
    private string chanStatusFlags_ = "";
    /// <summary>
    //// A set of flags showing the current state of the channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChanStatusFlags {
      get { return chanStatusFlags_; }
      set {
        chanStatusFlags_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "local_chan_reserve_sat" field.</summary>
    public const int LocalChanReserveSatFieldNumber = 20;
    private long localChanReserveSat_;
    /// <summary>
    //// The minimum satoshis this node is required to reserve in its balance.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LocalChanReserveSat {
      get { return localChanReserveSat_; }
      set {
        localChanReserveSat_ = value;
      }
    }

    /// <summary>Field number for the "remote_chan_reserve_sat" field.</summary>
    public const int RemoteChanReserveSatFieldNumber = 21;
    private long remoteChanReserveSat_;
    /// <summary>
    ///*
    ///The minimum satoshis the other node is required to reserve in its balance.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RemoteChanReserveSat {
      get { return remoteChanReserveSat_; }
      set {
        remoteChanReserveSat_ = value;
      }
    }

    /// <summary>Field number for the "static_remote_key" field.</summary>
    public const int StaticRemoteKeyFieldNumber = 22;
    private bool staticRemoteKey_;
    /// <summary>
    ///*
    ///If true, then this channel uses the modern commitment format where the key
    ///in the output of the remote party does not change each state. This makes
    ///back up and recovery easier as when the channel is closed, the funds go
    ///directly to that key. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool StaticRemoteKey {
      get { return staticRemoteKey_; }
      set {
        staticRemoteKey_ = value;
      }
    }

    /// <summary>Field number for the "lifetime" field.</summary>
    public const int LifetimeFieldNumber = 23;
    private long lifetime_;
    /// <summary>
    ///*
    ///The number of seconds that the channel has been monitored by the channel
    ///scoring system. Scores are currently not persisted, so this value may be
    ///less than the lifetime of the channel [EXPERIMENTAL].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Lifetime {
      get { return lifetime_; }
      set {
        lifetime_ = value;
      }
    }

    /// <summary>Field number for the "uptime" field.</summary>
    public const int UptimeFieldNumber = 24;
    private long uptime_;
    /// <summary>
    ///*
    ///The number of seconds that the remote peer has been observed as being online
    ///by the channel scoring system over the lifetime of the channel [EXPERIMENTAL].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Uptime {
      get { return uptime_; }
      set {
        uptime_ = value;
      }
    }

    /// <summary>Field number for the "close_address" field.</summary>
    public const int CloseAddressFieldNumber = 25;
    private string closeAddress_ = "";
    /// <summary>
    ///*
    ///Close address is the address that we will enforce payout to on cooperative
    ///close if the channel was opened utilizing option upfront shutdown. This
    ///value can be set on channel open by setting close_address in an open channel
    ///request. If this value is not set, you can still choose a payout address by
    ///cooperatively closing with the delivery_address field set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CloseAddress {
      get { return closeAddress_; }
      set {
        closeAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Channel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Channel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Active != other.Active) return false;
      if (RemotePubkey != other.RemotePubkey) return false;
      if (ChannelPoint != other.ChannelPoint) return false;
      if (ChanId != other.ChanId) return false;
      if (Capacity != other.Capacity) return false;
      if (LocalBalance != other.LocalBalance) return false;
      if (RemoteBalance != other.RemoteBalance) return false;
      if (CommitFee != other.CommitFee) return false;
      if (CommitWeight != other.CommitWeight) return false;
      if (FeePerKw != other.FeePerKw) return false;
      if (UnsettledBalance != other.UnsettledBalance) return false;
      if (TotalSatoshisSent != other.TotalSatoshisSent) return false;
      if (TotalSatoshisReceived != other.TotalSatoshisReceived) return false;
      if (NumUpdates != other.NumUpdates) return false;
      if(!pendingHtlcs_.Equals(other.pendingHtlcs_)) return false;
      if (CsvDelay != other.CsvDelay) return false;
      if (Private != other.Private) return false;
      if (Initiator != other.Initiator) return false;
      if (ChanStatusFlags != other.ChanStatusFlags) return false;
      if (LocalChanReserveSat != other.LocalChanReserveSat) return false;
      if (RemoteChanReserveSat != other.RemoteChanReserveSat) return false;
      if (StaticRemoteKey != other.StaticRemoteKey) return false;
      if (Lifetime != other.Lifetime) return false;
      if (Uptime != other.Uptime) return false;
      if (CloseAddress != other.CloseAddress) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Active != false) hash ^= Active.GetHashCode();
      if (RemotePubkey.Length != 0) hash ^= RemotePubkey.GetHashCode();
      if (ChannelPoint.Length != 0) hash ^= ChannelPoint.GetHashCode();
      if (ChanId != 0UL) hash ^= ChanId.GetHashCode();
      if (Capacity != 0L) hash ^= Capacity.GetHashCode();
      if (LocalBalance != 0L) hash ^= LocalBalance.GetHashCode();
      if (RemoteBalance != 0L) hash ^= RemoteBalance.GetHashCode();
      if (CommitFee != 0L) hash ^= CommitFee.GetHashCode();
      if (CommitWeight != 0L) hash ^= CommitWeight.GetHashCode();
      if (FeePerKw != 0L) hash ^= FeePerKw.GetHashCode();
      if (UnsettledBalance != 0L) hash ^= UnsettledBalance.GetHashCode();
      if (TotalSatoshisSent != 0L) hash ^= TotalSatoshisSent.GetHashCode();
      if (TotalSatoshisReceived != 0L) hash ^= TotalSatoshisReceived.GetHashCode();
      if (NumUpdates != 0UL) hash ^= NumUpdates.GetHashCode();
      hash ^= pendingHtlcs_.GetHashCode();
      if (CsvDelay != 0) hash ^= CsvDelay.GetHashCode();
      if (Private != false) hash ^= Private.GetHashCode();
      if (Initiator != false) hash ^= Initiator.GetHashCode();
      if (ChanStatusFlags.Length != 0) hash ^= ChanStatusFlags.GetHashCode();
      if (LocalChanReserveSat != 0L) hash ^= LocalChanReserveSat.GetHashCode();
      if (RemoteChanReserveSat != 0L) hash ^= RemoteChanReserveSat.GetHashCode();
      if (StaticRemoteKey != false) hash ^= StaticRemoteKey.GetHashCode();
      if (Lifetime != 0L) hash ^= Lifetime.GetHashCode();
      if (Uptime != 0L) hash ^= Uptime.GetHashCode();
      if (CloseAddress.Length != 0) hash ^= CloseAddress.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Active != false) {
        output.WriteRawTag(8);
        output.WriteBool(Active);
      }
      if (RemotePubkey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RemotePubkey);
      }
      if (ChannelPoint.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ChannelPoint);
      }
      if (ChanId != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(ChanId);
      }
      if (Capacity != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Capacity);
      }
      if (LocalBalance != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(LocalBalance);
      }
      if (RemoteBalance != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(RemoteBalance);
      }
      if (CommitFee != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(CommitFee);
      }
      if (CommitWeight != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(CommitWeight);
      }
      if (FeePerKw != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(FeePerKw);
      }
      if (UnsettledBalance != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(UnsettledBalance);
      }
      if (TotalSatoshisSent != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(TotalSatoshisSent);
      }
      if (TotalSatoshisReceived != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(TotalSatoshisReceived);
      }
      if (NumUpdates != 0UL) {
        output.WriteRawTag(112);
        output.WriteUInt64(NumUpdates);
      }
      pendingHtlcs_.WriteTo(output, _repeated_pendingHtlcs_codec);
      if (CsvDelay != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(CsvDelay);
      }
      if (Private != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(Private);
      }
      if (Initiator != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(Initiator);
      }
      if (ChanStatusFlags.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(ChanStatusFlags);
      }
      if (LocalChanReserveSat != 0L) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(LocalChanReserveSat);
      }
      if (RemoteChanReserveSat != 0L) {
        output.WriteRawTag(168, 1);
        output.WriteInt64(RemoteChanReserveSat);
      }
      if (StaticRemoteKey != false) {
        output.WriteRawTag(176, 1);
        output.WriteBool(StaticRemoteKey);
      }
      if (Lifetime != 0L) {
        output.WriteRawTag(184, 1);
        output.WriteInt64(Lifetime);
      }
      if (Uptime != 0L) {
        output.WriteRawTag(192, 1);
        output.WriteInt64(Uptime);
      }
      if (CloseAddress.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(CloseAddress);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Active != false) {
        size += 1 + 1;
      }
      if (RemotePubkey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RemotePubkey);
      }
      if (ChannelPoint.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelPoint);
      }
      if (ChanId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ChanId);
      }
      if (Capacity != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Capacity);
      }
      if (LocalBalance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LocalBalance);
      }
      if (RemoteBalance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RemoteBalance);
      }
      if (CommitFee != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CommitFee);
      }
      if (CommitWeight != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CommitWeight);
      }
      if (FeePerKw != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FeePerKw);
      }
      if (UnsettledBalance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnsettledBalance);
      }
      if (TotalSatoshisSent != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalSatoshisSent);
      }
      if (TotalSatoshisReceived != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalSatoshisReceived);
      }
      if (NumUpdates != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NumUpdates);
      }
      size += pendingHtlcs_.CalculateSize(_repeated_pendingHtlcs_codec);
      if (CsvDelay != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CsvDelay);
      }
      if (Private != false) {
        size += 2 + 1;
      }
      if (Initiator != false) {
        size += 2 + 1;
      }
      if (ChanStatusFlags.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ChanStatusFlags);
      }
      if (LocalChanReserveSat != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(LocalChanReserveSat);
      }
      if (RemoteChanReserveSat != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(RemoteChanReserveSat);
      }
      if (StaticRemoteKey != false) {
        size += 2 + 1;
      }
      if (Lifetime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Lifetime);
      }
      if (Uptime != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(Uptime);
      }
      if (CloseAddress.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CloseAddress);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Channel other) {
      if (other == null) {
        return;
      }
      if (other.Active != false) {
        Active = other.Active;
      }
      if (other.RemotePubkey.Length != 0) {
        RemotePubkey = other.RemotePubkey;
      }
      if (other.ChannelPoint.Length != 0) {
        ChannelPoint = other.ChannelPoint;
      }
      if (other.ChanId != 0UL) {
        ChanId = other.ChanId;
      }
      if (other.Capacity != 0L) {
        Capacity = other.Capacity;
      }
      if (other.LocalBalance != 0L) {
        LocalBalance = other.LocalBalance;
      }
      if (other.RemoteBalance != 0L) {
        RemoteBalance = other.RemoteBalance;
      }
      if (other.CommitFee != 0L) {
        CommitFee = other.CommitFee;
      }
      if (other.CommitWeight != 0L) {
        CommitWeight = other.CommitWeight;
      }
      if (other.FeePerKw != 0L) {
        FeePerKw = other.FeePerKw;
      }
      if (other.UnsettledBalance != 0L) {
        UnsettledBalance = other.UnsettledBalance;
      }
      if (other.TotalSatoshisSent != 0L) {
        TotalSatoshisSent = other.TotalSatoshisSent;
      }
      if (other.TotalSatoshisReceived != 0L) {
        TotalSatoshisReceived = other.TotalSatoshisReceived;
      }
      if (other.NumUpdates != 0UL) {
        NumUpdates = other.NumUpdates;
      }
      pendingHtlcs_.Add(other.pendingHtlcs_);
      if (other.CsvDelay != 0) {
        CsvDelay = other.CsvDelay;
      }
      if (other.Private != false) {
        Private = other.Private;
      }
      if (other.Initiator != false) {
        Initiator = other.Initiator;
      }
      if (other.ChanStatusFlags.Length != 0) {
        ChanStatusFlags = other.ChanStatusFlags;
      }
      if (other.LocalChanReserveSat != 0L) {
        LocalChanReserveSat = other.LocalChanReserveSat;
      }
      if (other.RemoteChanReserveSat != 0L) {
        RemoteChanReserveSat = other.RemoteChanReserveSat;
      }
      if (other.StaticRemoteKey != false) {
        StaticRemoteKey = other.StaticRemoteKey;
      }
      if (other.Lifetime != 0L) {
        Lifetime = other.Lifetime;
      }
      if (other.Uptime != 0L) {
        Uptime = other.Uptime;
      }
      if (other.CloseAddress.Length != 0) {
        CloseAddress = other.CloseAddress;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Active = input.ReadBool();
            break;
          }
          case 18: {
            RemotePubkey = input.ReadString();
            break;
          }
          case 26: {
            ChannelPoint = input.ReadString();
            break;
          }
          case 32: {
            ChanId = input.ReadUInt64();
            break;
          }
          case 40: {
            Capacity = input.ReadInt64();
            break;
          }
          case 48: {
            LocalBalance = input.ReadInt64();
            break;
          }
          case 56: {
            RemoteBalance = input.ReadInt64();
            break;
          }
          case 64: {
            CommitFee = input.ReadInt64();
            break;
          }
          case 72: {
            CommitWeight = input.ReadInt64();
            break;
          }
          case 80: {
            FeePerKw = input.ReadInt64();
            break;
          }
          case 88: {
            UnsettledBalance = input.ReadInt64();
            break;
          }
          case 96: {
            TotalSatoshisSent = input.ReadInt64();
            break;
          }
          case 104: {
            TotalSatoshisReceived = input.ReadInt64();
            break;
          }
          case 112: {
            NumUpdates = input.ReadUInt64();
            break;
          }
          case 122: {
            pendingHtlcs_.AddEntriesFrom(input, _repeated_pendingHtlcs_codec);
            break;
          }
          case 128: {
            CsvDelay = input.ReadUInt32();
            break;
          }
          case 136: {
            Private = input.ReadBool();
            break;
          }
          case 144: {
            Initiator = input.ReadBool();
            break;
          }
          case 154: {
            ChanStatusFlags = input.ReadString();
            break;
          }
          case 160: {
            LocalChanReserveSat = input.ReadInt64();
            break;
          }
          case 168: {
            RemoteChanReserveSat = input.ReadInt64();
            break;
          }
          case 176: {
            StaticRemoteKey = input.ReadBool();
            break;
          }
          case 184: {
            Lifetime = input.ReadInt64();
            break;
          }
          case 192: {
            Uptime = input.ReadInt64();
            break;
          }
          case 202: {
            CloseAddress = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListChannelsRequest : pb::IMessage<ListChannelsRequest> {
    private static readonly pb::MessageParser<ListChannelsRequest> _parser = new pb::MessageParser<ListChannelsRequest>(() => new ListChannelsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListChannelsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListChannelsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListChannelsRequest(ListChannelsRequest other) : this() {
      activeOnly_ = other.activeOnly_;
      inactiveOnly_ = other.inactiveOnly_;
      publicOnly_ = other.publicOnly_;
      privateOnly_ = other.privateOnly_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListChannelsRequest Clone() {
      return new ListChannelsRequest(this);
    }

    /// <summary>Field number for the "active_only" field.</summary>
    public const int ActiveOnlyFieldNumber = 1;
    private bool activeOnly_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ActiveOnly {
      get { return activeOnly_; }
      set {
        activeOnly_ = value;
      }
    }

    /// <summary>Field number for the "inactive_only" field.</summary>
    public const int InactiveOnlyFieldNumber = 2;
    private bool inactiveOnly_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InactiveOnly {
      get { return inactiveOnly_; }
      set {
        inactiveOnly_ = value;
      }
    }

    /// <summary>Field number for the "public_only" field.</summary>
    public const int PublicOnlyFieldNumber = 3;
    private bool publicOnly_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PublicOnly {
      get { return publicOnly_; }
      set {
        publicOnly_ = value;
      }
    }

    /// <summary>Field number for the "private_only" field.</summary>
    public const int PrivateOnlyFieldNumber = 4;
    private bool privateOnly_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PrivateOnly {
      get { return privateOnly_; }
      set {
        privateOnly_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListChannelsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListChannelsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActiveOnly != other.ActiveOnly) return false;
      if (InactiveOnly != other.InactiveOnly) return false;
      if (PublicOnly != other.PublicOnly) return false;
      if (PrivateOnly != other.PrivateOnly) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActiveOnly != false) hash ^= ActiveOnly.GetHashCode();
      if (InactiveOnly != false) hash ^= InactiveOnly.GetHashCode();
      if (PublicOnly != false) hash ^= PublicOnly.GetHashCode();
      if (PrivateOnly != false) hash ^= PrivateOnly.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActiveOnly != false) {
        output.WriteRawTag(8);
        output.WriteBool(ActiveOnly);
      }
      if (InactiveOnly != false) {
        output.WriteRawTag(16);
        output.WriteBool(InactiveOnly);
      }
      if (PublicOnly != false) {
        output.WriteRawTag(24);
        output.WriteBool(PublicOnly);
      }
      if (PrivateOnly != false) {
        output.WriteRawTag(32);
        output.WriteBool(PrivateOnly);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActiveOnly != false) {
        size += 1 + 1;
      }
      if (InactiveOnly != false) {
        size += 1 + 1;
      }
      if (PublicOnly != false) {
        size += 1 + 1;
      }
      if (PrivateOnly != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListChannelsRequest other) {
      if (other == null) {
        return;
      }
      if (other.ActiveOnly != false) {
        ActiveOnly = other.ActiveOnly;
      }
      if (other.InactiveOnly != false) {
        InactiveOnly = other.InactiveOnly;
      }
      if (other.PublicOnly != false) {
        PublicOnly = other.PublicOnly;
      }
      if (other.PrivateOnly != false) {
        PrivateOnly = other.PrivateOnly;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ActiveOnly = input.ReadBool();
            break;
          }
          case 16: {
            InactiveOnly = input.ReadBool();
            break;
          }
          case 24: {
            PublicOnly = input.ReadBool();
            break;
          }
          case 32: {
            PrivateOnly = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListChannelsResponse : pb::IMessage<ListChannelsResponse> {
    private static readonly pb::MessageParser<ListChannelsResponse> _parser = new pb::MessageParser<ListChannelsResponse>(() => new ListChannelsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListChannelsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListChannelsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListChannelsResponse(ListChannelsResponse other) : this() {
      channels_ = other.channels_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListChannelsResponse Clone() {
      return new ListChannelsResponse(this);
    }

    /// <summary>Field number for the "channels" field.</summary>
    public const int ChannelsFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Lnrpc.Channel> _repeated_channels_codec
        = pb::FieldCodec.ForMessage(90, global::Lnrpc.Channel.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.Channel> channels_ = new pbc::RepeatedField<global::Lnrpc.Channel>();
    /// <summary>
    //// The list of active channels
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.Channel> Channels {
      get { return channels_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListChannelsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListChannelsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!channels_.Equals(other.channels_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= channels_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      channels_.WriteTo(output, _repeated_channels_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += channels_.CalculateSize(_repeated_channels_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListChannelsResponse other) {
      if (other == null) {
        return;
      }
      channels_.Add(other.channels_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 90: {
            channels_.AddEntriesFrom(input, _repeated_channels_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChannelCloseSummary : pb::IMessage<ChannelCloseSummary> {
    private static readonly pb::MessageParser<ChannelCloseSummary> _parser = new pb::MessageParser<ChannelCloseSummary>(() => new ChannelCloseSummary());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelCloseSummary> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelCloseSummary() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelCloseSummary(ChannelCloseSummary other) : this() {
      channelPoint_ = other.channelPoint_;
      chanId_ = other.chanId_;
      chainHash_ = other.chainHash_;
      closingTxHash_ = other.closingTxHash_;
      remotePubkey_ = other.remotePubkey_;
      capacity_ = other.capacity_;
      closeHeight_ = other.closeHeight_;
      settledBalance_ = other.settledBalance_;
      timeLockedBalance_ = other.timeLockedBalance_;
      closeType_ = other.closeType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelCloseSummary Clone() {
      return new ChannelCloseSummary(this);
    }

    /// <summary>Field number for the "channel_point" field.</summary>
    public const int ChannelPointFieldNumber = 1;
    private string channelPoint_ = "";
    /// <summary>
    //// The outpoint (txid:index) of the funding transaction. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChannelPoint {
      get { return channelPoint_; }
      set {
        channelPoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "chan_id" field.</summary>
    public const int ChanIdFieldNumber = 2;
    private ulong chanId_;
    /// <summary>
    ////  The unique channel ID for the channel. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ChanId {
      get { return chanId_; }
      set {
        chanId_ = value;
      }
    }

    /// <summary>Field number for the "chain_hash" field.</summary>
    public const int ChainHashFieldNumber = 3;
    private string chainHash_ = "";
    /// <summary>
    //// The hash of the genesis block that this channel resides within.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChainHash {
      get { return chainHash_; }
      set {
        chainHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "closing_tx_hash" field.</summary>
    public const int ClosingTxHashFieldNumber = 4;
    private string closingTxHash_ = "";
    /// <summary>
    //// The txid of the transaction which ultimately closed this channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClosingTxHash {
      get { return closingTxHash_; }
      set {
        closingTxHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "remote_pubkey" field.</summary>
    public const int RemotePubkeyFieldNumber = 5;
    private string remotePubkey_ = "";
    /// <summary>
    //// Public key of the remote peer that we formerly had a channel with.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RemotePubkey {
      get { return remotePubkey_; }
      set {
        remotePubkey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "capacity" field.</summary>
    public const int CapacityFieldNumber = 6;
    private long capacity_;
    /// <summary>
    //// Total capacity of the channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Capacity {
      get { return capacity_; }
      set {
        capacity_ = value;
      }
    }

    /// <summary>Field number for the "close_height" field.</summary>
    public const int CloseHeightFieldNumber = 7;
    private uint closeHeight_;
    /// <summary>
    //// Height at which the funding transaction was spent.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CloseHeight {
      get { return closeHeight_; }
      set {
        closeHeight_ = value;
      }
    }

    /// <summary>Field number for the "settled_balance" field.</summary>
    public const int SettledBalanceFieldNumber = 8;
    private long settledBalance_;
    /// <summary>
    //// Settled balance at the time of channel closure
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SettledBalance {
      get { return settledBalance_; }
      set {
        settledBalance_ = value;
      }
    }

    /// <summary>Field number for the "time_locked_balance" field.</summary>
    public const int TimeLockedBalanceFieldNumber = 9;
    private long timeLockedBalance_;
    /// <summary>
    //// The sum of all the time-locked outputs at the time of channel closure
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TimeLockedBalance {
      get { return timeLockedBalance_; }
      set {
        timeLockedBalance_ = value;
      }
    }

    /// <summary>Field number for the "close_type" field.</summary>
    public const int CloseTypeFieldNumber = 10;
    private global::Lnrpc.ChannelCloseSummary.Types.ClosureType closeType_ = global::Lnrpc.ChannelCloseSummary.Types.ClosureType.CooperativeClose;
    /// <summary>
    //// Details on how the channel was closed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.ChannelCloseSummary.Types.ClosureType CloseType {
      get { return closeType_; }
      set {
        closeType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelCloseSummary);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelCloseSummary other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChannelPoint != other.ChannelPoint) return false;
      if (ChanId != other.ChanId) return false;
      if (ChainHash != other.ChainHash) return false;
      if (ClosingTxHash != other.ClosingTxHash) return false;
      if (RemotePubkey != other.RemotePubkey) return false;
      if (Capacity != other.Capacity) return false;
      if (CloseHeight != other.CloseHeight) return false;
      if (SettledBalance != other.SettledBalance) return false;
      if (TimeLockedBalance != other.TimeLockedBalance) return false;
      if (CloseType != other.CloseType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChannelPoint.Length != 0) hash ^= ChannelPoint.GetHashCode();
      if (ChanId != 0UL) hash ^= ChanId.GetHashCode();
      if (ChainHash.Length != 0) hash ^= ChainHash.GetHashCode();
      if (ClosingTxHash.Length != 0) hash ^= ClosingTxHash.GetHashCode();
      if (RemotePubkey.Length != 0) hash ^= RemotePubkey.GetHashCode();
      if (Capacity != 0L) hash ^= Capacity.GetHashCode();
      if (CloseHeight != 0) hash ^= CloseHeight.GetHashCode();
      if (SettledBalance != 0L) hash ^= SettledBalance.GetHashCode();
      if (TimeLockedBalance != 0L) hash ^= TimeLockedBalance.GetHashCode();
      if (CloseType != global::Lnrpc.ChannelCloseSummary.Types.ClosureType.CooperativeClose) hash ^= CloseType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChannelPoint.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ChannelPoint);
      }
      if (ChanId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ChanId);
      }
      if (ChainHash.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ChainHash);
      }
      if (ClosingTxHash.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ClosingTxHash);
      }
      if (RemotePubkey.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(RemotePubkey);
      }
      if (Capacity != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Capacity);
      }
      if (CloseHeight != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(CloseHeight);
      }
      if (SettledBalance != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(SettledBalance);
      }
      if (TimeLockedBalance != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(TimeLockedBalance);
      }
      if (CloseType != global::Lnrpc.ChannelCloseSummary.Types.ClosureType.CooperativeClose) {
        output.WriteRawTag(80);
        output.WriteEnum((int) CloseType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChannelPoint.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelPoint);
      }
      if (ChanId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ChanId);
      }
      if (ChainHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChainHash);
      }
      if (ClosingTxHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClosingTxHash);
      }
      if (RemotePubkey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RemotePubkey);
      }
      if (Capacity != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Capacity);
      }
      if (CloseHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CloseHeight);
      }
      if (SettledBalance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SettledBalance);
      }
      if (TimeLockedBalance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeLockedBalance);
      }
      if (CloseType != global::Lnrpc.ChannelCloseSummary.Types.ClosureType.CooperativeClose) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CloseType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelCloseSummary other) {
      if (other == null) {
        return;
      }
      if (other.ChannelPoint.Length != 0) {
        ChannelPoint = other.ChannelPoint;
      }
      if (other.ChanId != 0UL) {
        ChanId = other.ChanId;
      }
      if (other.ChainHash.Length != 0) {
        ChainHash = other.ChainHash;
      }
      if (other.ClosingTxHash.Length != 0) {
        ClosingTxHash = other.ClosingTxHash;
      }
      if (other.RemotePubkey.Length != 0) {
        RemotePubkey = other.RemotePubkey;
      }
      if (other.Capacity != 0L) {
        Capacity = other.Capacity;
      }
      if (other.CloseHeight != 0) {
        CloseHeight = other.CloseHeight;
      }
      if (other.SettledBalance != 0L) {
        SettledBalance = other.SettledBalance;
      }
      if (other.TimeLockedBalance != 0L) {
        TimeLockedBalance = other.TimeLockedBalance;
      }
      if (other.CloseType != global::Lnrpc.ChannelCloseSummary.Types.ClosureType.CooperativeClose) {
        CloseType = other.CloseType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ChannelPoint = input.ReadString();
            break;
          }
          case 16: {
            ChanId = input.ReadUInt64();
            break;
          }
          case 26: {
            ChainHash = input.ReadString();
            break;
          }
          case 34: {
            ClosingTxHash = input.ReadString();
            break;
          }
          case 42: {
            RemotePubkey = input.ReadString();
            break;
          }
          case 48: {
            Capacity = input.ReadInt64();
            break;
          }
          case 56: {
            CloseHeight = input.ReadUInt32();
            break;
          }
          case 64: {
            SettledBalance = input.ReadInt64();
            break;
          }
          case 72: {
            TimeLockedBalance = input.ReadInt64();
            break;
          }
          case 80: {
            CloseType = (global::Lnrpc.ChannelCloseSummary.Types.ClosureType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ChannelCloseSummary message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ClosureType {
        [pbr::OriginalName("COOPERATIVE_CLOSE")] CooperativeClose = 0,
        [pbr::OriginalName("LOCAL_FORCE_CLOSE")] LocalForceClose = 1,
        [pbr::OriginalName("REMOTE_FORCE_CLOSE")] RemoteForceClose = 2,
        [pbr::OriginalName("BREACH_CLOSE")] BreachClose = 3,
        [pbr::OriginalName("FUNDING_CANCELED")] FundingCanceled = 4,
        [pbr::OriginalName("ABANDONED")] Abandoned = 5,
      }

    }
    #endregion

  }

  public sealed partial class ClosedChannelsRequest : pb::IMessage<ClosedChannelsRequest> {
    private static readonly pb::MessageParser<ClosedChannelsRequest> _parser = new pb::MessageParser<ClosedChannelsRequest>(() => new ClosedChannelsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClosedChannelsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClosedChannelsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClosedChannelsRequest(ClosedChannelsRequest other) : this() {
      cooperative_ = other.cooperative_;
      localForce_ = other.localForce_;
      remoteForce_ = other.remoteForce_;
      breach_ = other.breach_;
      fundingCanceled_ = other.fundingCanceled_;
      abandoned_ = other.abandoned_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClosedChannelsRequest Clone() {
      return new ClosedChannelsRequest(this);
    }

    /// <summary>Field number for the "cooperative" field.</summary>
    public const int CooperativeFieldNumber = 1;
    private bool cooperative_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Cooperative {
      get { return cooperative_; }
      set {
        cooperative_ = value;
      }
    }

    /// <summary>Field number for the "local_force" field.</summary>
    public const int LocalForceFieldNumber = 2;
    private bool localForce_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LocalForce {
      get { return localForce_; }
      set {
        localForce_ = value;
      }
    }

    /// <summary>Field number for the "remote_force" field.</summary>
    public const int RemoteForceFieldNumber = 3;
    private bool remoteForce_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RemoteForce {
      get { return remoteForce_; }
      set {
        remoteForce_ = value;
      }
    }

    /// <summary>Field number for the "breach" field.</summary>
    public const int BreachFieldNumber = 4;
    private bool breach_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Breach {
      get { return breach_; }
      set {
        breach_ = value;
      }
    }

    /// <summary>Field number for the "funding_canceled" field.</summary>
    public const int FundingCanceledFieldNumber = 5;
    private bool fundingCanceled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FundingCanceled {
      get { return fundingCanceled_; }
      set {
        fundingCanceled_ = value;
      }
    }

    /// <summary>Field number for the "abandoned" field.</summary>
    public const int AbandonedFieldNumber = 6;
    private bool abandoned_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Abandoned {
      get { return abandoned_; }
      set {
        abandoned_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClosedChannelsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClosedChannelsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cooperative != other.Cooperative) return false;
      if (LocalForce != other.LocalForce) return false;
      if (RemoteForce != other.RemoteForce) return false;
      if (Breach != other.Breach) return false;
      if (FundingCanceled != other.FundingCanceled) return false;
      if (Abandoned != other.Abandoned) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Cooperative != false) hash ^= Cooperative.GetHashCode();
      if (LocalForce != false) hash ^= LocalForce.GetHashCode();
      if (RemoteForce != false) hash ^= RemoteForce.GetHashCode();
      if (Breach != false) hash ^= Breach.GetHashCode();
      if (FundingCanceled != false) hash ^= FundingCanceled.GetHashCode();
      if (Abandoned != false) hash ^= Abandoned.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Cooperative != false) {
        output.WriteRawTag(8);
        output.WriteBool(Cooperative);
      }
      if (LocalForce != false) {
        output.WriteRawTag(16);
        output.WriteBool(LocalForce);
      }
      if (RemoteForce != false) {
        output.WriteRawTag(24);
        output.WriteBool(RemoteForce);
      }
      if (Breach != false) {
        output.WriteRawTag(32);
        output.WriteBool(Breach);
      }
      if (FundingCanceled != false) {
        output.WriteRawTag(40);
        output.WriteBool(FundingCanceled);
      }
      if (Abandoned != false) {
        output.WriteRawTag(48);
        output.WriteBool(Abandoned);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Cooperative != false) {
        size += 1 + 1;
      }
      if (LocalForce != false) {
        size += 1 + 1;
      }
      if (RemoteForce != false) {
        size += 1 + 1;
      }
      if (Breach != false) {
        size += 1 + 1;
      }
      if (FundingCanceled != false) {
        size += 1 + 1;
      }
      if (Abandoned != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClosedChannelsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Cooperative != false) {
        Cooperative = other.Cooperative;
      }
      if (other.LocalForce != false) {
        LocalForce = other.LocalForce;
      }
      if (other.RemoteForce != false) {
        RemoteForce = other.RemoteForce;
      }
      if (other.Breach != false) {
        Breach = other.Breach;
      }
      if (other.FundingCanceled != false) {
        FundingCanceled = other.FundingCanceled;
      }
      if (other.Abandoned != false) {
        Abandoned = other.Abandoned;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Cooperative = input.ReadBool();
            break;
          }
          case 16: {
            LocalForce = input.ReadBool();
            break;
          }
          case 24: {
            RemoteForce = input.ReadBool();
            break;
          }
          case 32: {
            Breach = input.ReadBool();
            break;
          }
          case 40: {
            FundingCanceled = input.ReadBool();
            break;
          }
          case 48: {
            Abandoned = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClosedChannelsResponse : pb::IMessage<ClosedChannelsResponse> {
    private static readonly pb::MessageParser<ClosedChannelsResponse> _parser = new pb::MessageParser<ClosedChannelsResponse>(() => new ClosedChannelsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClosedChannelsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClosedChannelsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClosedChannelsResponse(ClosedChannelsResponse other) : this() {
      channels_ = other.channels_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClosedChannelsResponse Clone() {
      return new ClosedChannelsResponse(this);
    }

    /// <summary>Field number for the "channels" field.</summary>
    public const int ChannelsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Lnrpc.ChannelCloseSummary> _repeated_channels_codec
        = pb::FieldCodec.ForMessage(10, global::Lnrpc.ChannelCloseSummary.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.ChannelCloseSummary> channels_ = new pbc::RepeatedField<global::Lnrpc.ChannelCloseSummary>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.ChannelCloseSummary> Channels {
      get { return channels_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClosedChannelsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClosedChannelsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!channels_.Equals(other.channels_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= channels_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      channels_.WriteTo(output, _repeated_channels_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += channels_.CalculateSize(_repeated_channels_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClosedChannelsResponse other) {
      if (other == null) {
        return;
      }
      channels_.Add(other.channels_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            channels_.AddEntriesFrom(input, _repeated_channels_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Peer : pb::IMessage<Peer> {
    private static readonly pb::MessageParser<Peer> _parser = new pb::MessageParser<Peer>(() => new Peer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Peer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Peer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Peer(Peer other) : this() {
      pubKey_ = other.pubKey_;
      address_ = other.address_;
      bytesSent_ = other.bytesSent_;
      bytesRecv_ = other.bytesRecv_;
      satSent_ = other.satSent_;
      satRecv_ = other.satRecv_;
      inbound_ = other.inbound_;
      pingTime_ = other.pingTime_;
      syncType_ = other.syncType_;
      features_ = other.features_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Peer Clone() {
      return new Peer(this);
    }

    /// <summary>Field number for the "pub_key" field.</summary>
    public const int PubKeyFieldNumber = 1;
    private string pubKey_ = "";
    /// <summary>
    //// The identity pubkey of the peer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PubKey {
      get { return pubKey_; }
      set {
        pubKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 3;
    private string address_ = "";
    /// <summary>
    //// Network address of the peer; eg `127.0.0.1:10011`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bytes_sent" field.</summary>
    public const int BytesSentFieldNumber = 4;
    private ulong bytesSent_;
    /// <summary>
    //// Bytes of data transmitted to this peer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BytesSent {
      get { return bytesSent_; }
      set {
        bytesSent_ = value;
      }
    }

    /// <summary>Field number for the "bytes_recv" field.</summary>
    public const int BytesRecvFieldNumber = 5;
    private ulong bytesRecv_;
    /// <summary>
    //// Bytes of data transmitted from this peer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BytesRecv {
      get { return bytesRecv_; }
      set {
        bytesRecv_ = value;
      }
    }

    /// <summary>Field number for the "sat_sent" field.</summary>
    public const int SatSentFieldNumber = 6;
    private long satSent_;
    /// <summary>
    //// Satoshis sent to this peer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SatSent {
      get { return satSent_; }
      set {
        satSent_ = value;
      }
    }

    /// <summary>Field number for the "sat_recv" field.</summary>
    public const int SatRecvFieldNumber = 7;
    private long satRecv_;
    /// <summary>
    //// Satoshis received from this peer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SatRecv {
      get { return satRecv_; }
      set {
        satRecv_ = value;
      }
    }

    /// <summary>Field number for the "inbound" field.</summary>
    public const int InboundFieldNumber = 8;
    private bool inbound_;
    /// <summary>
    //// A channel is inbound if the counterparty initiated the channel
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Inbound {
      get { return inbound_; }
      set {
        inbound_ = value;
      }
    }

    /// <summary>Field number for the "ping_time" field.</summary>
    public const int PingTimeFieldNumber = 9;
    private long pingTime_;
    /// <summary>
    //// Ping time to this peer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PingTime {
      get { return pingTime_; }
      set {
        pingTime_ = value;
      }
    }

    /// <summary>Field number for the "sync_type" field.</summary>
    public const int SyncTypeFieldNumber = 10;
    private global::Lnrpc.Peer.Types.SyncType syncType_ = global::Lnrpc.Peer.Types.SyncType.UnknownSync;
    /// <summary>
    /// The type of sync we are currently performing with this peer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.Peer.Types.SyncType SyncType {
      get { return syncType_; }
      set {
        syncType_ = value;
      }
    }

    /// <summary>Field number for the "features" field.</summary>
    public const int FeaturesFieldNumber = 11;
    private static readonly pbc::MapField<uint, global::Lnrpc.Feature>.Codec _map_features_codec
        = new pbc::MapField<uint, global::Lnrpc.Feature>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForMessage(18, global::Lnrpc.Feature.Parser), 90);
    private readonly pbc::MapField<uint, global::Lnrpc.Feature> features_ = new pbc::MapField<uint, global::Lnrpc.Feature>();
    /// <summary>
    //// Features advertised by the remote peer in their init message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, global::Lnrpc.Feature> Features {
      get { return features_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Peer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Peer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PubKey != other.PubKey) return false;
      if (Address != other.Address) return false;
      if (BytesSent != other.BytesSent) return false;
      if (BytesRecv != other.BytesRecv) return false;
      if (SatSent != other.SatSent) return false;
      if (SatRecv != other.SatRecv) return false;
      if (Inbound != other.Inbound) return false;
      if (PingTime != other.PingTime) return false;
      if (SyncType != other.SyncType) return false;
      if (!Features.Equals(other.Features)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PubKey.Length != 0) hash ^= PubKey.GetHashCode();
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (BytesSent != 0UL) hash ^= BytesSent.GetHashCode();
      if (BytesRecv != 0UL) hash ^= BytesRecv.GetHashCode();
      if (SatSent != 0L) hash ^= SatSent.GetHashCode();
      if (SatRecv != 0L) hash ^= SatRecv.GetHashCode();
      if (Inbound != false) hash ^= Inbound.GetHashCode();
      if (PingTime != 0L) hash ^= PingTime.GetHashCode();
      if (SyncType != global::Lnrpc.Peer.Types.SyncType.UnknownSync) hash ^= SyncType.GetHashCode();
      hash ^= Features.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PubKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PubKey);
      }
      if (Address.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Address);
      }
      if (BytesSent != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(BytesSent);
      }
      if (BytesRecv != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(BytesRecv);
      }
      if (SatSent != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(SatSent);
      }
      if (SatRecv != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(SatRecv);
      }
      if (Inbound != false) {
        output.WriteRawTag(64);
        output.WriteBool(Inbound);
      }
      if (PingTime != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(PingTime);
      }
      if (SyncType != global::Lnrpc.Peer.Types.SyncType.UnknownSync) {
        output.WriteRawTag(80);
        output.WriteEnum((int) SyncType);
      }
      features_.WriteTo(output, _map_features_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PubKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PubKey);
      }
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (BytesSent != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BytesSent);
      }
      if (BytesRecv != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BytesRecv);
      }
      if (SatSent != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SatSent);
      }
      if (SatRecv != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SatRecv);
      }
      if (Inbound != false) {
        size += 1 + 1;
      }
      if (PingTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PingTime);
      }
      if (SyncType != global::Lnrpc.Peer.Types.SyncType.UnknownSync) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SyncType);
      }
      size += features_.CalculateSize(_map_features_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Peer other) {
      if (other == null) {
        return;
      }
      if (other.PubKey.Length != 0) {
        PubKey = other.PubKey;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.BytesSent != 0UL) {
        BytesSent = other.BytesSent;
      }
      if (other.BytesRecv != 0UL) {
        BytesRecv = other.BytesRecv;
      }
      if (other.SatSent != 0L) {
        SatSent = other.SatSent;
      }
      if (other.SatRecv != 0L) {
        SatRecv = other.SatRecv;
      }
      if (other.Inbound != false) {
        Inbound = other.Inbound;
      }
      if (other.PingTime != 0L) {
        PingTime = other.PingTime;
      }
      if (other.SyncType != global::Lnrpc.Peer.Types.SyncType.UnknownSync) {
        SyncType = other.SyncType;
      }
      features_.Add(other.features_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PubKey = input.ReadString();
            break;
          }
          case 26: {
            Address = input.ReadString();
            break;
          }
          case 32: {
            BytesSent = input.ReadUInt64();
            break;
          }
          case 40: {
            BytesRecv = input.ReadUInt64();
            break;
          }
          case 48: {
            SatSent = input.ReadInt64();
            break;
          }
          case 56: {
            SatRecv = input.ReadInt64();
            break;
          }
          case 64: {
            Inbound = input.ReadBool();
            break;
          }
          case 72: {
            PingTime = input.ReadInt64();
            break;
          }
          case 80: {
            SyncType = (global::Lnrpc.Peer.Types.SyncType) input.ReadEnum();
            break;
          }
          case 90: {
            features_.AddEntriesFrom(input, _map_features_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Peer message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum SyncType {
        /// <summary>
        ///*
        ///Denotes that we cannot determine the peer's current sync type.
        /// </summary>
        [pbr::OriginalName("UNKNOWN_SYNC")] UnknownSync = 0,
        /// <summary>
        ///*
        ///Denotes that we are actively receiving new graph updates from the peer.
        /// </summary>
        [pbr::OriginalName("ACTIVE_SYNC")] ActiveSync = 1,
        /// <summary>
        ///*
        ///Denotes that we are not receiving new graph updates from the peer.
        /// </summary>
        [pbr::OriginalName("PASSIVE_SYNC")] PassiveSync = 2,
      }

    }
    #endregion

  }

  public sealed partial class ListPeersRequest : pb::IMessage<ListPeersRequest> {
    private static readonly pb::MessageParser<ListPeersRequest> _parser = new pb::MessageParser<ListPeersRequest>(() => new ListPeersRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListPeersRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPeersRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPeersRequest(ListPeersRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPeersRequest Clone() {
      return new ListPeersRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListPeersRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListPeersRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListPeersRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class ListPeersResponse : pb::IMessage<ListPeersResponse> {
    private static readonly pb::MessageParser<ListPeersResponse> _parser = new pb::MessageParser<ListPeersResponse>(() => new ListPeersResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListPeersResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPeersResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPeersResponse(ListPeersResponse other) : this() {
      peers_ = other.peers_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPeersResponse Clone() {
      return new ListPeersResponse(this);
    }

    /// <summary>Field number for the "peers" field.</summary>
    public const int PeersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Lnrpc.Peer> _repeated_peers_codec
        = pb::FieldCodec.ForMessage(10, global::Lnrpc.Peer.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.Peer> peers_ = new pbc::RepeatedField<global::Lnrpc.Peer>();
    /// <summary>
    //// The list of currently connected peers
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.Peer> Peers {
      get { return peers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListPeersResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListPeersResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!peers_.Equals(other.peers_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= peers_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      peers_.WriteTo(output, _repeated_peers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += peers_.CalculateSize(_repeated_peers_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListPeersResponse other) {
      if (other == null) {
        return;
      }
      peers_.Add(other.peers_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            peers_.AddEntriesFrom(input, _repeated_peers_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PeerEventSubscription : pb::IMessage<PeerEventSubscription> {
    private static readonly pb::MessageParser<PeerEventSubscription> _parser = new pb::MessageParser<PeerEventSubscription>(() => new PeerEventSubscription());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PeerEventSubscription> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PeerEventSubscription() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PeerEventSubscription(PeerEventSubscription other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PeerEventSubscription Clone() {
      return new PeerEventSubscription(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PeerEventSubscription);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PeerEventSubscription other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PeerEventSubscription other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class PeerEvent : pb::IMessage<PeerEvent> {
    private static readonly pb::MessageParser<PeerEvent> _parser = new pb::MessageParser<PeerEvent>(() => new PeerEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PeerEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PeerEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PeerEvent(PeerEvent other) : this() {
      pubKey_ = other.pubKey_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PeerEvent Clone() {
      return new PeerEvent(this);
    }

    /// <summary>Field number for the "pub_key" field.</summary>
    public const int PubKeyFieldNumber = 1;
    private string pubKey_ = "";
    /// <summary>
    //// The identity pubkey of the peer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PubKey {
      get { return pubKey_; }
      set {
        pubKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Lnrpc.PeerEvent.Types.EventType type_ = global::Lnrpc.PeerEvent.Types.EventType.PeerOnline;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.PeerEvent.Types.EventType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PeerEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PeerEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PubKey != other.PubKey) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PubKey.Length != 0) hash ^= PubKey.GetHashCode();
      if (Type != global::Lnrpc.PeerEvent.Types.EventType.PeerOnline) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PubKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PubKey);
      }
      if (Type != global::Lnrpc.PeerEvent.Types.EventType.PeerOnline) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PubKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PubKey);
      }
      if (Type != global::Lnrpc.PeerEvent.Types.EventType.PeerOnline) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PeerEvent other) {
      if (other == null) {
        return;
      }
      if (other.PubKey.Length != 0) {
        PubKey = other.PubKey;
      }
      if (other.Type != global::Lnrpc.PeerEvent.Types.EventType.PeerOnline) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PubKey = input.ReadString();
            break;
          }
          case 16: {
            Type = (global::Lnrpc.PeerEvent.Types.EventType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PeerEvent message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EventType {
        [pbr::OriginalName("PEER_ONLINE")] PeerOnline = 0,
        [pbr::OriginalName("PEER_OFFLINE")] PeerOffline = 1,
      }

    }
    #endregion

  }

  public sealed partial class GetInfoRequest : pb::IMessage<GetInfoRequest> {
    private static readonly pb::MessageParser<GetInfoRequest> _parser = new pb::MessageParser<GetInfoRequest>(() => new GetInfoRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetInfoRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInfoRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInfoRequest(GetInfoRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInfoRequest Clone() {
      return new GetInfoRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetInfoRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetInfoRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetInfoRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class GetInfoResponse : pb::IMessage<GetInfoResponse> {
    private static readonly pb::MessageParser<GetInfoResponse> _parser = new pb::MessageParser<GetInfoResponse>(() => new GetInfoResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetInfoResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInfoResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInfoResponse(GetInfoResponse other) : this() {
      version_ = other.version_;
      identityPubkey_ = other.identityPubkey_;
      alias_ = other.alias_;
      color_ = other.color_;
      numPendingChannels_ = other.numPendingChannels_;
      numActiveChannels_ = other.numActiveChannels_;
      numInactiveChannels_ = other.numInactiveChannels_;
      numPeers_ = other.numPeers_;
      blockHeight_ = other.blockHeight_;
      blockHash_ = other.blockHash_;
      bestHeaderTimestamp_ = other.bestHeaderTimestamp_;
      syncedToChain_ = other.syncedToChain_;
      syncedToGraph_ = other.syncedToGraph_;
      testnet_ = other.testnet_;
      chains_ = other.chains_.Clone();
      uris_ = other.uris_.Clone();
      features_ = other.features_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInfoResponse Clone() {
      return new GetInfoResponse(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 14;
    private string version_ = "";
    /// <summary>
    //// The version of the LND software that the node is running.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "identity_pubkey" field.</summary>
    public const int IdentityPubkeyFieldNumber = 1;
    private string identityPubkey_ = "";
    /// <summary>
    //// The identity pubkey of the current node.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IdentityPubkey {
      get { return identityPubkey_; }
      set {
        identityPubkey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "alias" field.</summary>
    public const int AliasFieldNumber = 2;
    private string alias_ = "";
    /// <summary>
    //// If applicable, the alias of the current node, e.g. "bob"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Alias {
      get { return alias_; }
      set {
        alias_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 17;
    private string color_ = "";
    /// <summary>
    //// The color of the current node in hex code format
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Color {
      get { return color_; }
      set {
        color_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "num_pending_channels" field.</summary>
    public const int NumPendingChannelsFieldNumber = 3;
    private uint numPendingChannels_;
    /// <summary>
    //// Number of pending channels
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumPendingChannels {
      get { return numPendingChannels_; }
      set {
        numPendingChannels_ = value;
      }
    }

    /// <summary>Field number for the "num_active_channels" field.</summary>
    public const int NumActiveChannelsFieldNumber = 4;
    private uint numActiveChannels_;
    /// <summary>
    //// Number of active channels
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumActiveChannels {
      get { return numActiveChannels_; }
      set {
        numActiveChannels_ = value;
      }
    }

    /// <summary>Field number for the "num_inactive_channels" field.</summary>
    public const int NumInactiveChannelsFieldNumber = 15;
    private uint numInactiveChannels_;
    /// <summary>
    //// Number of inactive channels
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumInactiveChannels {
      get { return numInactiveChannels_; }
      set {
        numInactiveChannels_ = value;
      }
    }

    /// <summary>Field number for the "num_peers" field.</summary>
    public const int NumPeersFieldNumber = 5;
    private uint numPeers_;
    /// <summary>
    //// Number of peers
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumPeers {
      get { return numPeers_; }
      set {
        numPeers_ = value;
      }
    }

    /// <summary>Field number for the "block_height" field.</summary>
    public const int BlockHeightFieldNumber = 6;
    private uint blockHeight_;
    /// <summary>
    //// The node's current view of the height of the best block
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BlockHeight {
      get { return blockHeight_; }
      set {
        blockHeight_ = value;
      }
    }

    /// <summary>Field number for the "block_hash" field.</summary>
    public const int BlockHashFieldNumber = 8;
    private string blockHash_ = "";
    /// <summary>
    //// The node's current view of the hash of the best block
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BlockHash {
      get { return blockHash_; }
      set {
        blockHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "best_header_timestamp" field.</summary>
    public const int BestHeaderTimestampFieldNumber = 13;
    private long bestHeaderTimestamp_;
    /// <summary>
    //// Timestamp of the block best known to the wallet
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BestHeaderTimestamp {
      get { return bestHeaderTimestamp_; }
      set {
        bestHeaderTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "synced_to_chain" field.</summary>
    public const int SyncedToChainFieldNumber = 9;
    private bool syncedToChain_;
    /// <summary>
    //// Whether the wallet's view is synced to the main chain
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SyncedToChain {
      get { return syncedToChain_; }
      set {
        syncedToChain_ = value;
      }
    }

    /// <summary>Field number for the "synced_to_graph" field.</summary>
    public const int SyncedToGraphFieldNumber = 18;
    private bool syncedToGraph_;
    /// <summary>
    /// Whether we consider ourselves synced with the public channel graph.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SyncedToGraph {
      get { return syncedToGraph_; }
      set {
        syncedToGraph_ = value;
      }
    }

    /// <summary>Field number for the "testnet" field.</summary>
    public const int TestnetFieldNumber = 10;
    private bool testnet_;
    /// <summary>
    ///* 
    ///Whether the current node is connected to testnet. This field is 
    ///deprecated and the network field should be used instead 
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Testnet {
      get { return testnet_; }
      set {
        testnet_ = value;
      }
    }

    /// <summary>Field number for the "chains" field.</summary>
    public const int ChainsFieldNumber = 16;
    private static readonly pb::FieldCodec<global::Lnrpc.Chain> _repeated_chains_codec
        = pb::FieldCodec.ForMessage(130, global::Lnrpc.Chain.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.Chain> chains_ = new pbc::RepeatedField<global::Lnrpc.Chain>();
    /// <summary>
    //// A list of active chains the node is connected to
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.Chain> Chains {
      get { return chains_; }
    }

    /// <summary>Field number for the "uris" field.</summary>
    public const int UrisFieldNumber = 12;
    private static readonly pb::FieldCodec<string> _repeated_uris_codec
        = pb::FieldCodec.ForString(98);
    private readonly pbc::RepeatedField<string> uris_ = new pbc::RepeatedField<string>();
    /// <summary>
    //// The URIs of the current node.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Uris {
      get { return uris_; }
    }

    /// <summary>Field number for the "features" field.</summary>
    public const int FeaturesFieldNumber = 19;
    private static readonly pbc::MapField<uint, global::Lnrpc.Feature>.Codec _map_features_codec
        = new pbc::MapField<uint, global::Lnrpc.Feature>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForMessage(18, global::Lnrpc.Feature.Parser), 154);
    private readonly pbc::MapField<uint, global::Lnrpc.Feature> features_ = new pbc::MapField<uint, global::Lnrpc.Feature>();
    /// <summary>
    ///
    ///Features that our node has advertised in our init message, node
    ///announcements and invoices.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, global::Lnrpc.Feature> Features {
      get { return features_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetInfoResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetInfoResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (IdentityPubkey != other.IdentityPubkey) return false;
      if (Alias != other.Alias) return false;
      if (Color != other.Color) return false;
      if (NumPendingChannels != other.NumPendingChannels) return false;
      if (NumActiveChannels != other.NumActiveChannels) return false;
      if (NumInactiveChannels != other.NumInactiveChannels) return false;
      if (NumPeers != other.NumPeers) return false;
      if (BlockHeight != other.BlockHeight) return false;
      if (BlockHash != other.BlockHash) return false;
      if (BestHeaderTimestamp != other.BestHeaderTimestamp) return false;
      if (SyncedToChain != other.SyncedToChain) return false;
      if (SyncedToGraph != other.SyncedToGraph) return false;
      if (Testnet != other.Testnet) return false;
      if(!chains_.Equals(other.chains_)) return false;
      if(!uris_.Equals(other.uris_)) return false;
      if (!Features.Equals(other.Features)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (IdentityPubkey.Length != 0) hash ^= IdentityPubkey.GetHashCode();
      if (Alias.Length != 0) hash ^= Alias.GetHashCode();
      if (Color.Length != 0) hash ^= Color.GetHashCode();
      if (NumPendingChannels != 0) hash ^= NumPendingChannels.GetHashCode();
      if (NumActiveChannels != 0) hash ^= NumActiveChannels.GetHashCode();
      if (NumInactiveChannels != 0) hash ^= NumInactiveChannels.GetHashCode();
      if (NumPeers != 0) hash ^= NumPeers.GetHashCode();
      if (BlockHeight != 0) hash ^= BlockHeight.GetHashCode();
      if (BlockHash.Length != 0) hash ^= BlockHash.GetHashCode();
      if (BestHeaderTimestamp != 0L) hash ^= BestHeaderTimestamp.GetHashCode();
      if (SyncedToChain != false) hash ^= SyncedToChain.GetHashCode();
      if (SyncedToGraph != false) hash ^= SyncedToGraph.GetHashCode();
      if (Testnet != false) hash ^= Testnet.GetHashCode();
      hash ^= chains_.GetHashCode();
      hash ^= uris_.GetHashCode();
      hash ^= Features.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IdentityPubkey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(IdentityPubkey);
      }
      if (Alias.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Alias);
      }
      if (NumPendingChannels != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(NumPendingChannels);
      }
      if (NumActiveChannels != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(NumActiveChannels);
      }
      if (NumPeers != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(NumPeers);
      }
      if (BlockHeight != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(BlockHeight);
      }
      if (BlockHash.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(BlockHash);
      }
      if (SyncedToChain != false) {
        output.WriteRawTag(72);
        output.WriteBool(SyncedToChain);
      }
      if (Testnet != false) {
        output.WriteRawTag(80);
        output.WriteBool(Testnet);
      }
      uris_.WriteTo(output, _repeated_uris_codec);
      if (BestHeaderTimestamp != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(BestHeaderTimestamp);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Version);
      }
      if (NumInactiveChannels != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(NumInactiveChannels);
      }
      chains_.WriteTo(output, _repeated_chains_codec);
      if (Color.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(Color);
      }
      if (SyncedToGraph != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(SyncedToGraph);
      }
      features_.WriteTo(output, _map_features_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (IdentityPubkey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IdentityPubkey);
      }
      if (Alias.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Alias);
      }
      if (Color.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Color);
      }
      if (NumPendingChannels != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumPendingChannels);
      }
      if (NumActiveChannels != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumActiveChannels);
      }
      if (NumInactiveChannels != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumInactiveChannels);
      }
      if (NumPeers != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumPeers);
      }
      if (BlockHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BlockHeight);
      }
      if (BlockHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BlockHash);
      }
      if (BestHeaderTimestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BestHeaderTimestamp);
      }
      if (SyncedToChain != false) {
        size += 1 + 1;
      }
      if (SyncedToGraph != false) {
        size += 2 + 1;
      }
      if (Testnet != false) {
        size += 1 + 1;
      }
      size += chains_.CalculateSize(_repeated_chains_codec);
      size += uris_.CalculateSize(_repeated_uris_codec);
      size += features_.CalculateSize(_map_features_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetInfoResponse other) {
      if (other == null) {
        return;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.IdentityPubkey.Length != 0) {
        IdentityPubkey = other.IdentityPubkey;
      }
      if (other.Alias.Length != 0) {
        Alias = other.Alias;
      }
      if (other.Color.Length != 0) {
        Color = other.Color;
      }
      if (other.NumPendingChannels != 0) {
        NumPendingChannels = other.NumPendingChannels;
      }
      if (other.NumActiveChannels != 0) {
        NumActiveChannels = other.NumActiveChannels;
      }
      if (other.NumInactiveChannels != 0) {
        NumInactiveChannels = other.NumInactiveChannels;
      }
      if (other.NumPeers != 0) {
        NumPeers = other.NumPeers;
      }
      if (other.BlockHeight != 0) {
        BlockHeight = other.BlockHeight;
      }
      if (other.BlockHash.Length != 0) {
        BlockHash = other.BlockHash;
      }
      if (other.BestHeaderTimestamp != 0L) {
        BestHeaderTimestamp = other.BestHeaderTimestamp;
      }
      if (other.SyncedToChain != false) {
        SyncedToChain = other.SyncedToChain;
      }
      if (other.SyncedToGraph != false) {
        SyncedToGraph = other.SyncedToGraph;
      }
      if (other.Testnet != false) {
        Testnet = other.Testnet;
      }
      chains_.Add(other.chains_);
      uris_.Add(other.uris_);
      features_.Add(other.features_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            IdentityPubkey = input.ReadString();
            break;
          }
          case 18: {
            Alias = input.ReadString();
            break;
          }
          case 24: {
            NumPendingChannels = input.ReadUInt32();
            break;
          }
          case 32: {
            NumActiveChannels = input.ReadUInt32();
            break;
          }
          case 40: {
            NumPeers = input.ReadUInt32();
            break;
          }
          case 48: {
            BlockHeight = input.ReadUInt32();
            break;
          }
          case 66: {
            BlockHash = input.ReadString();
            break;
          }
          case 72: {
            SyncedToChain = input.ReadBool();
            break;
          }
          case 80: {
            Testnet = input.ReadBool();
            break;
          }
          case 98: {
            uris_.AddEntriesFrom(input, _repeated_uris_codec);
            break;
          }
          case 104: {
            BestHeaderTimestamp = input.ReadInt64();
            break;
          }
          case 114: {
            Version = input.ReadString();
            break;
          }
          case 120: {
            NumInactiveChannels = input.ReadUInt32();
            break;
          }
          case 130: {
            chains_.AddEntriesFrom(input, _repeated_chains_codec);
            break;
          }
          case 138: {
            Color = input.ReadString();
            break;
          }
          case 144: {
            SyncedToGraph = input.ReadBool();
            break;
          }
          case 154: {
            features_.AddEntriesFrom(input, _map_features_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Chain : pb::IMessage<Chain> {
    private static readonly pb::MessageParser<Chain> _parser = new pb::MessageParser<Chain>(() => new Chain());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Chain> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chain() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chain(Chain other) : this() {
      chain_ = other.chain_;
      network_ = other.network_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Chain Clone() {
      return new Chain(this);
    }

    /// <summary>Field number for the "chain" field.</summary>
    public const int Chain_FieldNumber = 1;
    private string chain_ = "";
    /// <summary>
    //// The blockchain the node is on (eg bitcoin, litecoin)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Chain_ {
      get { return chain_; }
      set {
        chain_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "network" field.</summary>
    public const int NetworkFieldNumber = 2;
    private string network_ = "";
    /// <summary>
    //// The network the node is on (eg regtest, testnet, mainnet)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Network {
      get { return network_; }
      set {
        network_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Chain);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Chain other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Chain_ != other.Chain_) return false;
      if (Network != other.Network) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Chain_.Length != 0) hash ^= Chain_.GetHashCode();
      if (Network.Length != 0) hash ^= Network.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Chain_.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Chain_);
      }
      if (Network.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Network);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Chain_.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Chain_);
      }
      if (Network.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Network);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Chain other) {
      if (other == null) {
        return;
      }
      if (other.Chain_.Length != 0) {
        Chain_ = other.Chain_;
      }
      if (other.Network.Length != 0) {
        Network = other.Network;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Chain_ = input.ReadString();
            break;
          }
          case 18: {
            Network = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConfirmationUpdate : pb::IMessage<ConfirmationUpdate> {
    private static readonly pb::MessageParser<ConfirmationUpdate> _parser = new pb::MessageParser<ConfirmationUpdate>(() => new ConfirmationUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfirmationUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfirmationUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfirmationUpdate(ConfirmationUpdate other) : this() {
      blockSha_ = other.blockSha_;
      blockHeight_ = other.blockHeight_;
      numConfsLeft_ = other.numConfsLeft_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfirmationUpdate Clone() {
      return new ConfirmationUpdate(this);
    }

    /// <summary>Field number for the "block_sha" field.</summary>
    public const int BlockShaFieldNumber = 1;
    private pb::ByteString blockSha_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BlockSha {
      get { return blockSha_; }
      set {
        blockSha_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "block_height" field.</summary>
    public const int BlockHeightFieldNumber = 2;
    private int blockHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlockHeight {
      get { return blockHeight_; }
      set {
        blockHeight_ = value;
      }
    }

    /// <summary>Field number for the "num_confs_left" field.</summary>
    public const int NumConfsLeftFieldNumber = 3;
    private uint numConfsLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumConfsLeft {
      get { return numConfsLeft_; }
      set {
        numConfsLeft_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfirmationUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfirmationUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BlockSha != other.BlockSha) return false;
      if (BlockHeight != other.BlockHeight) return false;
      if (NumConfsLeft != other.NumConfsLeft) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BlockSha.Length != 0) hash ^= BlockSha.GetHashCode();
      if (BlockHeight != 0) hash ^= BlockHeight.GetHashCode();
      if (NumConfsLeft != 0) hash ^= NumConfsLeft.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BlockSha.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(BlockSha);
      }
      if (BlockHeight != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BlockHeight);
      }
      if (NumConfsLeft != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(NumConfsLeft);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BlockSha.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BlockSha);
      }
      if (BlockHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlockHeight);
      }
      if (NumConfsLeft != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumConfsLeft);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfirmationUpdate other) {
      if (other == null) {
        return;
      }
      if (other.BlockSha.Length != 0) {
        BlockSha = other.BlockSha;
      }
      if (other.BlockHeight != 0) {
        BlockHeight = other.BlockHeight;
      }
      if (other.NumConfsLeft != 0) {
        NumConfsLeft = other.NumConfsLeft;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            BlockSha = input.ReadBytes();
            break;
          }
          case 16: {
            BlockHeight = input.ReadInt32();
            break;
          }
          case 24: {
            NumConfsLeft = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChannelOpenUpdate : pb::IMessage<ChannelOpenUpdate> {
    private static readonly pb::MessageParser<ChannelOpenUpdate> _parser = new pb::MessageParser<ChannelOpenUpdate>(() => new ChannelOpenUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelOpenUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelOpenUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelOpenUpdate(ChannelOpenUpdate other) : this() {
      channelPoint_ = other.channelPoint_ != null ? other.channelPoint_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelOpenUpdate Clone() {
      return new ChannelOpenUpdate(this);
    }

    /// <summary>Field number for the "channel_point" field.</summary>
    public const int ChannelPointFieldNumber = 1;
    private global::Lnrpc.ChannelPoint channelPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.ChannelPoint ChannelPoint {
      get { return channelPoint_; }
      set {
        channelPoint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelOpenUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelOpenUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ChannelPoint, other.ChannelPoint)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (channelPoint_ != null) hash ^= ChannelPoint.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (channelPoint_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ChannelPoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (channelPoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChannelPoint);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelOpenUpdate other) {
      if (other == null) {
        return;
      }
      if (other.channelPoint_ != null) {
        if (channelPoint_ == null) {
          ChannelPoint = new global::Lnrpc.ChannelPoint();
        }
        ChannelPoint.MergeFrom(other.ChannelPoint);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (channelPoint_ == null) {
              ChannelPoint = new global::Lnrpc.ChannelPoint();
            }
            input.ReadMessage(ChannelPoint);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChannelCloseUpdate : pb::IMessage<ChannelCloseUpdate> {
    private static readonly pb::MessageParser<ChannelCloseUpdate> _parser = new pb::MessageParser<ChannelCloseUpdate>(() => new ChannelCloseUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelCloseUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelCloseUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelCloseUpdate(ChannelCloseUpdate other) : this() {
      closingTxid_ = other.closingTxid_;
      success_ = other.success_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelCloseUpdate Clone() {
      return new ChannelCloseUpdate(this);
    }

    /// <summary>Field number for the "closing_txid" field.</summary>
    public const int ClosingTxidFieldNumber = 1;
    private pb::ByteString closingTxid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ClosingTxid {
      get { return closingTxid_; }
      set {
        closingTxid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 2;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelCloseUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelCloseUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ClosingTxid != other.ClosingTxid) return false;
      if (Success != other.Success) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ClosingTxid.Length != 0) hash ^= ClosingTxid.GetHashCode();
      if (Success != false) hash ^= Success.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ClosingTxid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(ClosingTxid);
      }
      if (Success != false) {
        output.WriteRawTag(16);
        output.WriteBool(Success);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ClosingTxid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ClosingTxid);
      }
      if (Success != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelCloseUpdate other) {
      if (other == null) {
        return;
      }
      if (other.ClosingTxid.Length != 0) {
        ClosingTxid = other.ClosingTxid;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ClosingTxid = input.ReadBytes();
            break;
          }
          case 16: {
            Success = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CloseChannelRequest : pb::IMessage<CloseChannelRequest> {
    private static readonly pb::MessageParser<CloseChannelRequest> _parser = new pb::MessageParser<CloseChannelRequest>(() => new CloseChannelRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CloseChannelRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseChannelRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseChannelRequest(CloseChannelRequest other) : this() {
      channelPoint_ = other.channelPoint_ != null ? other.channelPoint_.Clone() : null;
      force_ = other.force_;
      targetConf_ = other.targetConf_;
      satPerByte_ = other.satPerByte_;
      deliveryAddress_ = other.deliveryAddress_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseChannelRequest Clone() {
      return new CloseChannelRequest(this);
    }

    /// <summary>Field number for the "channel_point" field.</summary>
    public const int ChannelPointFieldNumber = 1;
    private global::Lnrpc.ChannelPoint channelPoint_;
    /// <summary>
    ///*
    ///The outpoint (txid:index) of the funding transaction. With this value, Bob
    ///will be able to generate a signature for Alice's version of the commitment
    ///transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.ChannelPoint ChannelPoint {
      get { return channelPoint_; }
      set {
        channelPoint_ = value;
      }
    }

    /// <summary>Field number for the "force" field.</summary>
    public const int ForceFieldNumber = 2;
    private bool force_;
    /// <summary>
    //// If true, then the channel will be closed forcibly. This means the current commitment transaction will be signed and broadcast.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Force {
      get { return force_; }
      set {
        force_ = value;
      }
    }

    /// <summary>Field number for the "target_conf" field.</summary>
    public const int TargetConfFieldNumber = 3;
    private int targetConf_;
    /// <summary>
    //// The target number of blocks that the closure transaction should be confirmed by.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetConf {
      get { return targetConf_; }
      set {
        targetConf_ = value;
      }
    }

    /// <summary>Field number for the "sat_per_byte" field.</summary>
    public const int SatPerByteFieldNumber = 4;
    private long satPerByte_;
    /// <summary>
    //// A manual fee rate set in sat/byte that should be used when crafting the closure transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SatPerByte {
      get { return satPerByte_; }
      set {
        satPerByte_ = value;
      }
    }

    /// <summary>Field number for the "delivery_address" field.</summary>
    public const int DeliveryAddressFieldNumber = 5;
    private string deliveryAddress_ = "";
    /// <summary>
    ///
    ///An optional address to send funds to in the case of a cooperative close.
    ///If the channel was opened with an upfront shutdown script and this field
    ///is set, the request to close will fail because the channel must pay out
    ///to the upfront shutdown addresss.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeliveryAddress {
      get { return deliveryAddress_; }
      set {
        deliveryAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CloseChannelRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CloseChannelRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ChannelPoint, other.ChannelPoint)) return false;
      if (Force != other.Force) return false;
      if (TargetConf != other.TargetConf) return false;
      if (SatPerByte != other.SatPerByte) return false;
      if (DeliveryAddress != other.DeliveryAddress) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (channelPoint_ != null) hash ^= ChannelPoint.GetHashCode();
      if (Force != false) hash ^= Force.GetHashCode();
      if (TargetConf != 0) hash ^= TargetConf.GetHashCode();
      if (SatPerByte != 0L) hash ^= SatPerByte.GetHashCode();
      if (DeliveryAddress.Length != 0) hash ^= DeliveryAddress.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (channelPoint_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ChannelPoint);
      }
      if (Force != false) {
        output.WriteRawTag(16);
        output.WriteBool(Force);
      }
      if (TargetConf != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TargetConf);
      }
      if (SatPerByte != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(SatPerByte);
      }
      if (DeliveryAddress.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DeliveryAddress);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (channelPoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChannelPoint);
      }
      if (Force != false) {
        size += 1 + 1;
      }
      if (TargetConf != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetConf);
      }
      if (SatPerByte != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SatPerByte);
      }
      if (DeliveryAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeliveryAddress);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CloseChannelRequest other) {
      if (other == null) {
        return;
      }
      if (other.channelPoint_ != null) {
        if (channelPoint_ == null) {
          ChannelPoint = new global::Lnrpc.ChannelPoint();
        }
        ChannelPoint.MergeFrom(other.ChannelPoint);
      }
      if (other.Force != false) {
        Force = other.Force;
      }
      if (other.TargetConf != 0) {
        TargetConf = other.TargetConf;
      }
      if (other.SatPerByte != 0L) {
        SatPerByte = other.SatPerByte;
      }
      if (other.DeliveryAddress.Length != 0) {
        DeliveryAddress = other.DeliveryAddress;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (channelPoint_ == null) {
              ChannelPoint = new global::Lnrpc.ChannelPoint();
            }
            input.ReadMessage(ChannelPoint);
            break;
          }
          case 16: {
            Force = input.ReadBool();
            break;
          }
          case 24: {
            TargetConf = input.ReadInt32();
            break;
          }
          case 32: {
            SatPerByte = input.ReadInt64();
            break;
          }
          case 42: {
            DeliveryAddress = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CloseStatusUpdate : pb::IMessage<CloseStatusUpdate> {
    private static readonly pb::MessageParser<CloseStatusUpdate> _parser = new pb::MessageParser<CloseStatusUpdate>(() => new CloseStatusUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CloseStatusUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseStatusUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseStatusUpdate(CloseStatusUpdate other) : this() {
      switch (other.UpdateCase) {
        case UpdateOneofCase.ClosePending:
          ClosePending = other.ClosePending.Clone();
          break;
        case UpdateOneofCase.ChanClose:
          ChanClose = other.ChanClose.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloseStatusUpdate Clone() {
      return new CloseStatusUpdate(this);
    }

    /// <summary>Field number for the "close_pending" field.</summary>
    public const int ClosePendingFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.PendingUpdate ClosePending {
      get { return updateCase_ == UpdateOneofCase.ClosePending ? (global::Lnrpc.PendingUpdate) update_ : null; }
      set {
        update_ = value;
        updateCase_ = value == null ? UpdateOneofCase.None : UpdateOneofCase.ClosePending;
      }
    }

    /// <summary>Field number for the "chan_close" field.</summary>
    public const int ChanCloseFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.ChannelCloseUpdate ChanClose {
      get { return updateCase_ == UpdateOneofCase.ChanClose ? (global::Lnrpc.ChannelCloseUpdate) update_ : null; }
      set {
        update_ = value;
        updateCase_ = value == null ? UpdateOneofCase.None : UpdateOneofCase.ChanClose;
      }
    }

    private object update_;
    /// <summary>Enum of possible cases for the "update" oneof.</summary>
    public enum UpdateOneofCase {
      None = 0,
      ClosePending = 1,
      ChanClose = 3,
    }
    private UpdateOneofCase updateCase_ = UpdateOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateOneofCase UpdateCase {
      get { return updateCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUpdate() {
      updateCase_ = UpdateOneofCase.None;
      update_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CloseStatusUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CloseStatusUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ClosePending, other.ClosePending)) return false;
      if (!object.Equals(ChanClose, other.ChanClose)) return false;
      if (UpdateCase != other.UpdateCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (updateCase_ == UpdateOneofCase.ClosePending) hash ^= ClosePending.GetHashCode();
      if (updateCase_ == UpdateOneofCase.ChanClose) hash ^= ChanClose.GetHashCode();
      hash ^= (int) updateCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (updateCase_ == UpdateOneofCase.ClosePending) {
        output.WriteRawTag(10);
        output.WriteMessage(ClosePending);
      }
      if (updateCase_ == UpdateOneofCase.ChanClose) {
        output.WriteRawTag(26);
        output.WriteMessage(ChanClose);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (updateCase_ == UpdateOneofCase.ClosePending) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClosePending);
      }
      if (updateCase_ == UpdateOneofCase.ChanClose) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChanClose);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CloseStatusUpdate other) {
      if (other == null) {
        return;
      }
      switch (other.UpdateCase) {
        case UpdateOneofCase.ClosePending:
          if (ClosePending == null) {
            ClosePending = new global::Lnrpc.PendingUpdate();
          }
          ClosePending.MergeFrom(other.ClosePending);
          break;
        case UpdateOneofCase.ChanClose:
          if (ChanClose == null) {
            ChanClose = new global::Lnrpc.ChannelCloseUpdate();
          }
          ChanClose.MergeFrom(other.ChanClose);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Lnrpc.PendingUpdate subBuilder = new global::Lnrpc.PendingUpdate();
            if (updateCase_ == UpdateOneofCase.ClosePending) {
              subBuilder.MergeFrom(ClosePending);
            }
            input.ReadMessage(subBuilder);
            ClosePending = subBuilder;
            break;
          }
          case 26: {
            global::Lnrpc.ChannelCloseUpdate subBuilder = new global::Lnrpc.ChannelCloseUpdate();
            if (updateCase_ == UpdateOneofCase.ChanClose) {
              subBuilder.MergeFrom(ChanClose);
            }
            input.ReadMessage(subBuilder);
            ChanClose = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class PendingUpdate : pb::IMessage<PendingUpdate> {
    private static readonly pb::MessageParser<PendingUpdate> _parser = new pb::MessageParser<PendingUpdate>(() => new PendingUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PendingUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PendingUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PendingUpdate(PendingUpdate other) : this() {
      txid_ = other.txid_;
      outputIndex_ = other.outputIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PendingUpdate Clone() {
      return new PendingUpdate(this);
    }

    /// <summary>Field number for the "txid" field.</summary>
    public const int TxidFieldNumber = 1;
    private pb::ByteString txid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Txid {
      get { return txid_; }
      set {
        txid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "output_index" field.</summary>
    public const int OutputIndexFieldNumber = 2;
    private uint outputIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OutputIndex {
      get { return outputIndex_; }
      set {
        outputIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PendingUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PendingUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Txid != other.Txid) return false;
      if (OutputIndex != other.OutputIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Txid.Length != 0) hash ^= Txid.GetHashCode();
      if (OutputIndex != 0) hash ^= OutputIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Txid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Txid);
      }
      if (OutputIndex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(OutputIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Txid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Txid);
      }
      if (OutputIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OutputIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PendingUpdate other) {
      if (other == null) {
        return;
      }
      if (other.Txid.Length != 0) {
        Txid = other.Txid;
      }
      if (other.OutputIndex != 0) {
        OutputIndex = other.OutputIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Txid = input.ReadBytes();
            break;
          }
          case 16: {
            OutputIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OpenChannelRequest : pb::IMessage<OpenChannelRequest> {
    private static readonly pb::MessageParser<OpenChannelRequest> _parser = new pb::MessageParser<OpenChannelRequest>(() => new OpenChannelRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OpenChannelRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenChannelRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenChannelRequest(OpenChannelRequest other) : this() {
      nodePubkey_ = other.nodePubkey_;
      nodePubkeyString_ = other.nodePubkeyString_;
      localFundingAmount_ = other.localFundingAmount_;
      pushSat_ = other.pushSat_;
      targetConf_ = other.targetConf_;
      satPerByte_ = other.satPerByte_;
      private_ = other.private_;
      minHtlcMsat_ = other.minHtlcMsat_;
      remoteCsvDelay_ = other.remoteCsvDelay_;
      minConfs_ = other.minConfs_;
      spendUnconfirmed_ = other.spendUnconfirmed_;
      closeAddress_ = other.closeAddress_;
      fundingShim_ = other.fundingShim_ != null ? other.fundingShim_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenChannelRequest Clone() {
      return new OpenChannelRequest(this);
    }

    /// <summary>Field number for the "node_pubkey" field.</summary>
    public const int NodePubkeyFieldNumber = 2;
    private pb::ByteString nodePubkey_ = pb::ByteString.Empty;
    /// <summary>
    ///*
    ///The pubkey of the node to open a channel with. When using REST, this field
    ///must be encoded as base64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString NodePubkey {
      get { return nodePubkey_; }
      set {
        nodePubkey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "node_pubkey_string" field.</summary>
    public const int NodePubkeyStringFieldNumber = 3;
    private string nodePubkeyString_ = "";
    /// <summary>
    ///*
    ///The hex encoded pubkey of the node to open a channel with. Deprecated now
    ///that the REST gateway supports base64 encoding of bytes fields.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NodePubkeyString {
      get { return nodePubkeyString_; }
      set {
        nodePubkeyString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "local_funding_amount" field.</summary>
    public const int LocalFundingAmountFieldNumber = 4;
    private long localFundingAmount_;
    /// <summary>
    //// The number of satoshis the wallet should commit to the channel
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LocalFundingAmount {
      get { return localFundingAmount_; }
      set {
        localFundingAmount_ = value;
      }
    }

    /// <summary>Field number for the "push_sat" field.</summary>
    public const int PushSatFieldNumber = 5;
    private long pushSat_;
    /// <summary>
    //// The number of satoshis to push to the remote side as part of the initial commitment state
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PushSat {
      get { return pushSat_; }
      set {
        pushSat_ = value;
      }
    }

    /// <summary>Field number for the "target_conf" field.</summary>
    public const int TargetConfFieldNumber = 6;
    private int targetConf_;
    /// <summary>
    //// The target number of blocks that the funding transaction should be confirmed by.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TargetConf {
      get { return targetConf_; }
      set {
        targetConf_ = value;
      }
    }

    /// <summary>Field number for the "sat_per_byte" field.</summary>
    public const int SatPerByteFieldNumber = 7;
    private long satPerByte_;
    /// <summary>
    //// A manual fee rate set in sat/byte that should be used when crafting the funding transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SatPerByte {
      get { return satPerByte_; }
      set {
        satPerByte_ = value;
      }
    }

    /// <summary>Field number for the "private" field.</summary>
    public const int PrivateFieldNumber = 8;
    private bool private_;
    /// <summary>
    //// Whether this channel should be private, not announced to the greater network.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Private {
      get { return private_; }
      set {
        private_ = value;
      }
    }

    /// <summary>Field number for the "min_htlc_msat" field.</summary>
    public const int MinHtlcMsatFieldNumber = 9;
    private long minHtlcMsat_;
    /// <summary>
    //// The minimum value in millisatoshi we will require for incoming HTLCs on the channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MinHtlcMsat {
      get { return minHtlcMsat_; }
      set {
        minHtlcMsat_ = value;
      }
    }

    /// <summary>Field number for the "remote_csv_delay" field.</summary>
    public const int RemoteCsvDelayFieldNumber = 10;
    private uint remoteCsvDelay_;
    /// <summary>
    //// The delay we require on the remote's commitment transaction. If this is not set, it will be scaled automatically with the channel size.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RemoteCsvDelay {
      get { return remoteCsvDelay_; }
      set {
        remoteCsvDelay_ = value;
      }
    }

    /// <summary>Field number for the "min_confs" field.</summary>
    public const int MinConfsFieldNumber = 11;
    private int minConfs_;
    /// <summary>
    //// The minimum number of confirmations each one of your outputs used for the funding transaction must satisfy.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinConfs {
      get { return minConfs_; }
      set {
        minConfs_ = value;
      }
    }

    /// <summary>Field number for the "spend_unconfirmed" field.</summary>
    public const int SpendUnconfirmedFieldNumber = 12;
    private bool spendUnconfirmed_;
    /// <summary>
    //// Whether unconfirmed outputs should be used as inputs for the funding transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SpendUnconfirmed {
      get { return spendUnconfirmed_; }
      set {
        spendUnconfirmed_ = value;
      }
    }

    /// <summary>Field number for the "close_address" field.</summary>
    public const int CloseAddressFieldNumber = 13;
    private string closeAddress_ = "";
    /// <summary>
    ///
    ///Close address is an optional address which specifies the address to which
    ///funds should be paid out to upon cooperative close. This field may only be
    ///set if the peer supports the option upfront feature bit (call listpeers
    ///to check). The remote peer will only accept cooperative closes to this
    ///address if it is set.
    ///
    ///Note: If this value is set on channel creation, you will *not* be able to
    ///cooperatively close out to a different address.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CloseAddress {
      get { return closeAddress_; }
      set {
        closeAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "funding_shim" field.</summary>
    public const int FundingShimFieldNumber = 14;
    private global::Lnrpc.FundingShim fundingShim_;
    /// <summary>
    ///*
    ///Funding shims are an optional argument that allow the caller to intercept
    ///certain funding functionality. For example, a shim can be provided to use a
    ///particular key for the commitment key (ideally cold) rather than use one
    ///that is generated by the wallet as normal, or signal that signing will be
    ///carried out in an interactive manner (PSBT based).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.FundingShim FundingShim {
      get { return fundingShim_; }
      set {
        fundingShim_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OpenChannelRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OpenChannelRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodePubkey != other.NodePubkey) return false;
      if (NodePubkeyString != other.NodePubkeyString) return false;
      if (LocalFundingAmount != other.LocalFundingAmount) return false;
      if (PushSat != other.PushSat) return false;
      if (TargetConf != other.TargetConf) return false;
      if (SatPerByte != other.SatPerByte) return false;
      if (Private != other.Private) return false;
      if (MinHtlcMsat != other.MinHtlcMsat) return false;
      if (RemoteCsvDelay != other.RemoteCsvDelay) return false;
      if (MinConfs != other.MinConfs) return false;
      if (SpendUnconfirmed != other.SpendUnconfirmed) return false;
      if (CloseAddress != other.CloseAddress) return false;
      if (!object.Equals(FundingShim, other.FundingShim)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NodePubkey.Length != 0) hash ^= NodePubkey.GetHashCode();
      if (NodePubkeyString.Length != 0) hash ^= NodePubkeyString.GetHashCode();
      if (LocalFundingAmount != 0L) hash ^= LocalFundingAmount.GetHashCode();
      if (PushSat != 0L) hash ^= PushSat.GetHashCode();
      if (TargetConf != 0) hash ^= TargetConf.GetHashCode();
      if (SatPerByte != 0L) hash ^= SatPerByte.GetHashCode();
      if (Private != false) hash ^= Private.GetHashCode();
      if (MinHtlcMsat != 0L) hash ^= MinHtlcMsat.GetHashCode();
      if (RemoteCsvDelay != 0) hash ^= RemoteCsvDelay.GetHashCode();
      if (MinConfs != 0) hash ^= MinConfs.GetHashCode();
      if (SpendUnconfirmed != false) hash ^= SpendUnconfirmed.GetHashCode();
      if (CloseAddress.Length != 0) hash ^= CloseAddress.GetHashCode();
      if (fundingShim_ != null) hash ^= FundingShim.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NodePubkey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(NodePubkey);
      }
      if (NodePubkeyString.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(NodePubkeyString);
      }
      if (LocalFundingAmount != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(LocalFundingAmount);
      }
      if (PushSat != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(PushSat);
      }
      if (TargetConf != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(TargetConf);
      }
      if (SatPerByte != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(SatPerByte);
      }
      if (Private != false) {
        output.WriteRawTag(64);
        output.WriteBool(Private);
      }
      if (MinHtlcMsat != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(MinHtlcMsat);
      }
      if (RemoteCsvDelay != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(RemoteCsvDelay);
      }
      if (MinConfs != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(MinConfs);
      }
      if (SpendUnconfirmed != false) {
        output.WriteRawTag(96);
        output.WriteBool(SpendUnconfirmed);
      }
      if (CloseAddress.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(CloseAddress);
      }
      if (fundingShim_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(FundingShim);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NodePubkey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(NodePubkey);
      }
      if (NodePubkeyString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NodePubkeyString);
      }
      if (LocalFundingAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LocalFundingAmount);
      }
      if (PushSat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PushSat);
      }
      if (TargetConf != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetConf);
      }
      if (SatPerByte != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SatPerByte);
      }
      if (Private != false) {
        size += 1 + 1;
      }
      if (MinHtlcMsat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MinHtlcMsat);
      }
      if (RemoteCsvDelay != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RemoteCsvDelay);
      }
      if (MinConfs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinConfs);
      }
      if (SpendUnconfirmed != false) {
        size += 1 + 1;
      }
      if (CloseAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CloseAddress);
      }
      if (fundingShim_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FundingShim);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OpenChannelRequest other) {
      if (other == null) {
        return;
      }
      if (other.NodePubkey.Length != 0) {
        NodePubkey = other.NodePubkey;
      }
      if (other.NodePubkeyString.Length != 0) {
        NodePubkeyString = other.NodePubkeyString;
      }
      if (other.LocalFundingAmount != 0L) {
        LocalFundingAmount = other.LocalFundingAmount;
      }
      if (other.PushSat != 0L) {
        PushSat = other.PushSat;
      }
      if (other.TargetConf != 0) {
        TargetConf = other.TargetConf;
      }
      if (other.SatPerByte != 0L) {
        SatPerByte = other.SatPerByte;
      }
      if (other.Private != false) {
        Private = other.Private;
      }
      if (other.MinHtlcMsat != 0L) {
        MinHtlcMsat = other.MinHtlcMsat;
      }
      if (other.RemoteCsvDelay != 0) {
        RemoteCsvDelay = other.RemoteCsvDelay;
      }
      if (other.MinConfs != 0) {
        MinConfs = other.MinConfs;
      }
      if (other.SpendUnconfirmed != false) {
        SpendUnconfirmed = other.SpendUnconfirmed;
      }
      if (other.CloseAddress.Length != 0) {
        CloseAddress = other.CloseAddress;
      }
      if (other.fundingShim_ != null) {
        if (fundingShim_ == null) {
          FundingShim = new global::Lnrpc.FundingShim();
        }
        FundingShim.MergeFrom(other.FundingShim);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            NodePubkey = input.ReadBytes();
            break;
          }
          case 26: {
            NodePubkeyString = input.ReadString();
            break;
          }
          case 32: {
            LocalFundingAmount = input.ReadInt64();
            break;
          }
          case 40: {
            PushSat = input.ReadInt64();
            break;
          }
          case 48: {
            TargetConf = input.ReadInt32();
            break;
          }
          case 56: {
            SatPerByte = input.ReadInt64();
            break;
          }
          case 64: {
            Private = input.ReadBool();
            break;
          }
          case 72: {
            MinHtlcMsat = input.ReadInt64();
            break;
          }
          case 80: {
            RemoteCsvDelay = input.ReadUInt32();
            break;
          }
          case 88: {
            MinConfs = input.ReadInt32();
            break;
          }
          case 96: {
            SpendUnconfirmed = input.ReadBool();
            break;
          }
          case 106: {
            CloseAddress = input.ReadString();
            break;
          }
          case 114: {
            if (fundingShim_ == null) {
              FundingShim = new global::Lnrpc.FundingShim();
            }
            input.ReadMessage(FundingShim);
            break;
          }
        }
      }
    }

  }

  public sealed partial class OpenStatusUpdate : pb::IMessage<OpenStatusUpdate> {
    private static readonly pb::MessageParser<OpenStatusUpdate> _parser = new pb::MessageParser<OpenStatusUpdate>(() => new OpenStatusUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OpenStatusUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenStatusUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenStatusUpdate(OpenStatusUpdate other) : this() {
      pendingChanId_ = other.pendingChanId_;
      switch (other.UpdateCase) {
        case UpdateOneofCase.ChanPending:
          ChanPending = other.ChanPending.Clone();
          break;
        case UpdateOneofCase.ChanOpen:
          ChanOpen = other.ChanOpen.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpenStatusUpdate Clone() {
      return new OpenStatusUpdate(this);
    }

    /// <summary>Field number for the "chan_pending" field.</summary>
    public const int ChanPendingFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.PendingUpdate ChanPending {
      get { return updateCase_ == UpdateOneofCase.ChanPending ? (global::Lnrpc.PendingUpdate) update_ : null; }
      set {
        update_ = value;
        updateCase_ = value == null ? UpdateOneofCase.None : UpdateOneofCase.ChanPending;
      }
    }

    /// <summary>Field number for the "chan_open" field.</summary>
    public const int ChanOpenFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.ChannelOpenUpdate ChanOpen {
      get { return updateCase_ == UpdateOneofCase.ChanOpen ? (global::Lnrpc.ChannelOpenUpdate) update_ : null; }
      set {
        update_ = value;
        updateCase_ = value == null ? UpdateOneofCase.None : UpdateOneofCase.ChanOpen;
      }
    }

    /// <summary>Field number for the "pending_chan_id" field.</summary>
    public const int PendingChanIdFieldNumber = 4;
    private pb::ByteString pendingChanId_ = pb::ByteString.Empty;
    /// <summary>
    ///*
    ///The pending channel ID of the created channel. This value may be used to
    ///further the funding flow manually via the FundingStateStep method.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PendingChanId {
      get { return pendingChanId_; }
      set {
        pendingChanId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private object update_;
    /// <summary>Enum of possible cases for the "update" oneof.</summary>
    public enum UpdateOneofCase {
      None = 0,
      ChanPending = 1,
      ChanOpen = 3,
    }
    private UpdateOneofCase updateCase_ = UpdateOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateOneofCase UpdateCase {
      get { return updateCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUpdate() {
      updateCase_ = UpdateOneofCase.None;
      update_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OpenStatusUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OpenStatusUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ChanPending, other.ChanPending)) return false;
      if (!object.Equals(ChanOpen, other.ChanOpen)) return false;
      if (PendingChanId != other.PendingChanId) return false;
      if (UpdateCase != other.UpdateCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (updateCase_ == UpdateOneofCase.ChanPending) hash ^= ChanPending.GetHashCode();
      if (updateCase_ == UpdateOneofCase.ChanOpen) hash ^= ChanOpen.GetHashCode();
      if (PendingChanId.Length != 0) hash ^= PendingChanId.GetHashCode();
      hash ^= (int) updateCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (updateCase_ == UpdateOneofCase.ChanPending) {
        output.WriteRawTag(10);
        output.WriteMessage(ChanPending);
      }
      if (updateCase_ == UpdateOneofCase.ChanOpen) {
        output.WriteRawTag(26);
        output.WriteMessage(ChanOpen);
      }
      if (PendingChanId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(PendingChanId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (updateCase_ == UpdateOneofCase.ChanPending) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChanPending);
      }
      if (updateCase_ == UpdateOneofCase.ChanOpen) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChanOpen);
      }
      if (PendingChanId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PendingChanId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OpenStatusUpdate other) {
      if (other == null) {
        return;
      }
      if (other.PendingChanId.Length != 0) {
        PendingChanId = other.PendingChanId;
      }
      switch (other.UpdateCase) {
        case UpdateOneofCase.ChanPending:
          if (ChanPending == null) {
            ChanPending = new global::Lnrpc.PendingUpdate();
          }
          ChanPending.MergeFrom(other.ChanPending);
          break;
        case UpdateOneofCase.ChanOpen:
          if (ChanOpen == null) {
            ChanOpen = new global::Lnrpc.ChannelOpenUpdate();
          }
          ChanOpen.MergeFrom(other.ChanOpen);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Lnrpc.PendingUpdate subBuilder = new global::Lnrpc.PendingUpdate();
            if (updateCase_ == UpdateOneofCase.ChanPending) {
              subBuilder.MergeFrom(ChanPending);
            }
            input.ReadMessage(subBuilder);
            ChanPending = subBuilder;
            break;
          }
          case 26: {
            global::Lnrpc.ChannelOpenUpdate subBuilder = new global::Lnrpc.ChannelOpenUpdate();
            if (updateCase_ == UpdateOneofCase.ChanOpen) {
              subBuilder.MergeFrom(ChanOpen);
            }
            input.ReadMessage(subBuilder);
            ChanOpen = subBuilder;
            break;
          }
          case 34: {
            PendingChanId = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class KeyLocator : pb::IMessage<KeyLocator> {
    private static readonly pb::MessageParser<KeyLocator> _parser = new pb::MessageParser<KeyLocator>(() => new KeyLocator());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeyLocator> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyLocator() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyLocator(KeyLocator other) : this() {
      keyFamily_ = other.keyFamily_;
      keyIndex_ = other.keyIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyLocator Clone() {
      return new KeyLocator(this);
    }

    /// <summary>Field number for the "key_family" field.</summary>
    public const int KeyFamilyFieldNumber = 1;
    private int keyFamily_;
    /// <summary>
    //// The family of key being identified.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KeyFamily {
      get { return keyFamily_; }
      set {
        keyFamily_ = value;
      }
    }

    /// <summary>Field number for the "key_index" field.</summary>
    public const int KeyIndexFieldNumber = 2;
    private int keyIndex_;
    /// <summary>
    //// The precise index of the key being identified.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int KeyIndex {
      get { return keyIndex_; }
      set {
        keyIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeyLocator);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeyLocator other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (KeyFamily != other.KeyFamily) return false;
      if (KeyIndex != other.KeyIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (KeyFamily != 0) hash ^= KeyFamily.GetHashCode();
      if (KeyIndex != 0) hash ^= KeyIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (KeyFamily != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(KeyFamily);
      }
      if (KeyIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(KeyIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (KeyFamily != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KeyFamily);
      }
      if (KeyIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KeyIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeyLocator other) {
      if (other == null) {
        return;
      }
      if (other.KeyFamily != 0) {
        KeyFamily = other.KeyFamily;
      }
      if (other.KeyIndex != 0) {
        KeyIndex = other.KeyIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            KeyFamily = input.ReadInt32();
            break;
          }
          case 16: {
            KeyIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class KeyDescriptor : pb::IMessage<KeyDescriptor> {
    private static readonly pb::MessageParser<KeyDescriptor> _parser = new pb::MessageParser<KeyDescriptor>(() => new KeyDescriptor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeyDescriptor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyDescriptor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyDescriptor(KeyDescriptor other) : this() {
      rawKeyBytes_ = other.rawKeyBytes_;
      keyLoc_ = other.keyLoc_ != null ? other.keyLoc_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeyDescriptor Clone() {
      return new KeyDescriptor(this);
    }

    /// <summary>Field number for the "raw_key_bytes" field.</summary>
    public const int RawKeyBytesFieldNumber = 1;
    private pb::ByteString rawKeyBytes_ = pb::ByteString.Empty;
    /// <summary>
    ///*
    ///The raw bytes of the key being identified. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RawKeyBytes {
      get { return rawKeyBytes_; }
      set {
        rawKeyBytes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "key_loc" field.</summary>
    public const int KeyLocFieldNumber = 2;
    private global::Lnrpc.KeyLocator keyLoc_;
    /// <summary>
    ///* 
    ///The key locator that identifies which key to use for signing. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.KeyLocator KeyLoc {
      get { return keyLoc_; }
      set {
        keyLoc_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeyDescriptor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeyDescriptor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RawKeyBytes != other.RawKeyBytes) return false;
      if (!object.Equals(KeyLoc, other.KeyLoc)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RawKeyBytes.Length != 0) hash ^= RawKeyBytes.GetHashCode();
      if (keyLoc_ != null) hash ^= KeyLoc.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RawKeyBytes.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(RawKeyBytes);
      }
      if (keyLoc_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(KeyLoc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RawKeyBytes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RawKeyBytes);
      }
      if (keyLoc_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(KeyLoc);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeyDescriptor other) {
      if (other == null) {
        return;
      }
      if (other.RawKeyBytes.Length != 0) {
        RawKeyBytes = other.RawKeyBytes;
      }
      if (other.keyLoc_ != null) {
        if (keyLoc_ == null) {
          KeyLoc = new global::Lnrpc.KeyLocator();
        }
        KeyLoc.MergeFrom(other.KeyLoc);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RawKeyBytes = input.ReadBytes();
            break;
          }
          case 18: {
            if (keyLoc_ == null) {
              KeyLoc = new global::Lnrpc.KeyLocator();
            }
            input.ReadMessage(KeyLoc);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChanPointShim : pb::IMessage<ChanPointShim> {
    private static readonly pb::MessageParser<ChanPointShim> _parser = new pb::MessageParser<ChanPointShim>(() => new ChanPointShim());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChanPointShim> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChanPointShim() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChanPointShim(ChanPointShim other) : this() {
      amt_ = other.amt_;
      chanPoint_ = other.chanPoint_ != null ? other.chanPoint_.Clone() : null;
      localKey_ = other.localKey_ != null ? other.localKey_.Clone() : null;
      remoteKey_ = other.remoteKey_;
      pendingChanId_ = other.pendingChanId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChanPointShim Clone() {
      return new ChanPointShim(this);
    }

    /// <summary>Field number for the "amt" field.</summary>
    public const int AmtFieldNumber = 1;
    private long amt_;
    /// <summary>
    ///*
    ///The size of the pre-crafted output to be used as the channel point for this
    ///channel funding.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amt {
      get { return amt_; }
      set {
        amt_ = value;
      }
    }

    /// <summary>Field number for the "chan_point" field.</summary>
    public const int ChanPointFieldNumber = 2;
    private global::Lnrpc.ChannelPoint chanPoint_;
    /// <summary>
    //// The target channel point to refrence in created commitment transactions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.ChannelPoint ChanPoint {
      get { return chanPoint_; }
      set {
        chanPoint_ = value;
      }
    }

    /// <summary>Field number for the "local_key" field.</summary>
    public const int LocalKeyFieldNumber = 3;
    private global::Lnrpc.KeyDescriptor localKey_;
    /// <summary>
    //// Our local key to use when creating the multi-sig output.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.KeyDescriptor LocalKey {
      get { return localKey_; }
      set {
        localKey_ = value;
      }
    }

    /// <summary>Field number for the "remote_key" field.</summary>
    public const int RemoteKeyFieldNumber = 4;
    private pb::ByteString remoteKey_ = pb::ByteString.Empty;
    /// <summary>
    //// The key of the remote party to use when creating the multi-sig output.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RemoteKey {
      get { return remoteKey_; }
      set {
        remoteKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pending_chan_id" field.</summary>
    public const int PendingChanIdFieldNumber = 5;
    private pb::ByteString pendingChanId_ = pb::ByteString.Empty;
    /// <summary>
    ///*
    ///If non-zero, then this will be used as the pending channel ID on the wire
    ///protocol to initate the funding request. This is an optional field, and
    ///should only be set if the responder is already expecting a specific pending
    ///channel ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PendingChanId {
      get { return pendingChanId_; }
      set {
        pendingChanId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChanPointShim);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChanPointShim other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Amt != other.Amt) return false;
      if (!object.Equals(ChanPoint, other.ChanPoint)) return false;
      if (!object.Equals(LocalKey, other.LocalKey)) return false;
      if (RemoteKey != other.RemoteKey) return false;
      if (PendingChanId != other.PendingChanId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Amt != 0L) hash ^= Amt.GetHashCode();
      if (chanPoint_ != null) hash ^= ChanPoint.GetHashCode();
      if (localKey_ != null) hash ^= LocalKey.GetHashCode();
      if (RemoteKey.Length != 0) hash ^= RemoteKey.GetHashCode();
      if (PendingChanId.Length != 0) hash ^= PendingChanId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Amt != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Amt);
      }
      if (chanPoint_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ChanPoint);
      }
      if (localKey_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(LocalKey);
      }
      if (RemoteKey.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(RemoteKey);
      }
      if (PendingChanId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(PendingChanId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Amt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amt);
      }
      if (chanPoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChanPoint);
      }
      if (localKey_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LocalKey);
      }
      if (RemoteKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RemoteKey);
      }
      if (PendingChanId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PendingChanId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChanPointShim other) {
      if (other == null) {
        return;
      }
      if (other.Amt != 0L) {
        Amt = other.Amt;
      }
      if (other.chanPoint_ != null) {
        if (chanPoint_ == null) {
          ChanPoint = new global::Lnrpc.ChannelPoint();
        }
        ChanPoint.MergeFrom(other.ChanPoint);
      }
      if (other.localKey_ != null) {
        if (localKey_ == null) {
          LocalKey = new global::Lnrpc.KeyDescriptor();
        }
        LocalKey.MergeFrom(other.LocalKey);
      }
      if (other.RemoteKey.Length != 0) {
        RemoteKey = other.RemoteKey;
      }
      if (other.PendingChanId.Length != 0) {
        PendingChanId = other.PendingChanId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Amt = input.ReadInt64();
            break;
          }
          case 18: {
            if (chanPoint_ == null) {
              ChanPoint = new global::Lnrpc.ChannelPoint();
            }
            input.ReadMessage(ChanPoint);
            break;
          }
          case 26: {
            if (localKey_ == null) {
              LocalKey = new global::Lnrpc.KeyDescriptor();
            }
            input.ReadMessage(LocalKey);
            break;
          }
          case 34: {
            RemoteKey = input.ReadBytes();
            break;
          }
          case 42: {
            PendingChanId = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FundingShim : pb::IMessage<FundingShim> {
    private static readonly pb::MessageParser<FundingShim> _parser = new pb::MessageParser<FundingShim>(() => new FundingShim());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FundingShim> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FundingShim() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FundingShim(FundingShim other) : this() {
      switch (other.ShimCase) {
        case ShimOneofCase.ChanPointShim:
          ChanPointShim = other.ChanPointShim.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FundingShim Clone() {
      return new FundingShim(this);
    }

    /// <summary>Field number for the "chan_point_shim" field.</summary>
    public const int ChanPointShimFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.ChanPointShim ChanPointShim {
      get { return shimCase_ == ShimOneofCase.ChanPointShim ? (global::Lnrpc.ChanPointShim) shim_ : null; }
      set {
        shim_ = value;
        shimCase_ = value == null ? ShimOneofCase.None : ShimOneofCase.ChanPointShim;
      }
    }

    private object shim_;
    /// <summary>Enum of possible cases for the "shim" oneof.</summary>
    public enum ShimOneofCase {
      None = 0,
      ChanPointShim = 1,
    }
    private ShimOneofCase shimCase_ = ShimOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShimOneofCase ShimCase {
      get { return shimCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearShim() {
      shimCase_ = ShimOneofCase.None;
      shim_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FundingShim);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FundingShim other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ChanPointShim, other.ChanPointShim)) return false;
      if (ShimCase != other.ShimCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (shimCase_ == ShimOneofCase.ChanPointShim) hash ^= ChanPointShim.GetHashCode();
      hash ^= (int) shimCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (shimCase_ == ShimOneofCase.ChanPointShim) {
        output.WriteRawTag(10);
        output.WriteMessage(ChanPointShim);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (shimCase_ == ShimOneofCase.ChanPointShim) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChanPointShim);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FundingShim other) {
      if (other == null) {
        return;
      }
      switch (other.ShimCase) {
        case ShimOneofCase.ChanPointShim:
          if (ChanPointShim == null) {
            ChanPointShim = new global::Lnrpc.ChanPointShim();
          }
          ChanPointShim.MergeFrom(other.ChanPointShim);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Lnrpc.ChanPointShim subBuilder = new global::Lnrpc.ChanPointShim();
            if (shimCase_ == ShimOneofCase.ChanPointShim) {
              subBuilder.MergeFrom(ChanPointShim);
            }
            input.ReadMessage(subBuilder);
            ChanPointShim = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class FundingShimCancel : pb::IMessage<FundingShimCancel> {
    private static readonly pb::MessageParser<FundingShimCancel> _parser = new pb::MessageParser<FundingShimCancel>(() => new FundingShimCancel());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FundingShimCancel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FundingShimCancel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FundingShimCancel(FundingShimCancel other) : this() {
      pendingChanId_ = other.pendingChanId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FundingShimCancel Clone() {
      return new FundingShimCancel(this);
    }

    /// <summary>Field number for the "pending_chan_id" field.</summary>
    public const int PendingChanIdFieldNumber = 1;
    private pb::ByteString pendingChanId_ = pb::ByteString.Empty;
    /// <summary>
    //// The pending channel ID of the channel to cancel the funding shim for.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PendingChanId {
      get { return pendingChanId_; }
      set {
        pendingChanId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FundingShimCancel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FundingShimCancel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PendingChanId != other.PendingChanId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PendingChanId.Length != 0) hash ^= PendingChanId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PendingChanId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(PendingChanId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PendingChanId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PendingChanId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FundingShimCancel other) {
      if (other == null) {
        return;
      }
      if (other.PendingChanId.Length != 0) {
        PendingChanId = other.PendingChanId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PendingChanId = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FundingTransitionMsg : pb::IMessage<FundingTransitionMsg> {
    private static readonly pb::MessageParser<FundingTransitionMsg> _parser = new pb::MessageParser<FundingTransitionMsg>(() => new FundingTransitionMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FundingTransitionMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FundingTransitionMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FundingTransitionMsg(FundingTransitionMsg other) : this() {
      switch (other.TriggerCase) {
        case TriggerOneofCase.ShimRegister:
          ShimRegister = other.ShimRegister.Clone();
          break;
        case TriggerOneofCase.ShimCancel:
          ShimCancel = other.ShimCancel.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FundingTransitionMsg Clone() {
      return new FundingTransitionMsg(this);
    }

    /// <summary>Field number for the "shim_register" field.</summary>
    public const int ShimRegisterFieldNumber = 1;
    /// <summary>
    ///*
    ///The funding shim to regsiter. This should be used before any
    ///channel funding has began by the remote party, as it is intended as a
    ///prepatory step for the full channel funding.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.FundingShim ShimRegister {
      get { return triggerCase_ == TriggerOneofCase.ShimRegister ? (global::Lnrpc.FundingShim) trigger_ : null; }
      set {
        trigger_ = value;
        triggerCase_ = value == null ? TriggerOneofCase.None : TriggerOneofCase.ShimRegister;
      }
    }

    /// <summary>Field number for the "shim_cancel" field.</summary>
    public const int ShimCancelFieldNumber = 2;
    /// <summary>
    //// Used to cancel an existing registered funding shim.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.FundingShimCancel ShimCancel {
      get { return triggerCase_ == TriggerOneofCase.ShimCancel ? (global::Lnrpc.FundingShimCancel) trigger_ : null; }
      set {
        trigger_ = value;
        triggerCase_ = value == null ? TriggerOneofCase.None : TriggerOneofCase.ShimCancel;
      }
    }

    private object trigger_;
    /// <summary>Enum of possible cases for the "trigger" oneof.</summary>
    public enum TriggerOneofCase {
      None = 0,
      ShimRegister = 1,
      ShimCancel = 2,
    }
    private TriggerOneofCase triggerCase_ = TriggerOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerOneofCase TriggerCase {
      get { return triggerCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTrigger() {
      triggerCase_ = TriggerOneofCase.None;
      trigger_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FundingTransitionMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FundingTransitionMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ShimRegister, other.ShimRegister)) return false;
      if (!object.Equals(ShimCancel, other.ShimCancel)) return false;
      if (TriggerCase != other.TriggerCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (triggerCase_ == TriggerOneofCase.ShimRegister) hash ^= ShimRegister.GetHashCode();
      if (triggerCase_ == TriggerOneofCase.ShimCancel) hash ^= ShimCancel.GetHashCode();
      hash ^= (int) triggerCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (triggerCase_ == TriggerOneofCase.ShimRegister) {
        output.WriteRawTag(10);
        output.WriteMessage(ShimRegister);
      }
      if (triggerCase_ == TriggerOneofCase.ShimCancel) {
        output.WriteRawTag(18);
        output.WriteMessage(ShimCancel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (triggerCase_ == TriggerOneofCase.ShimRegister) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ShimRegister);
      }
      if (triggerCase_ == TriggerOneofCase.ShimCancel) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ShimCancel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FundingTransitionMsg other) {
      if (other == null) {
        return;
      }
      switch (other.TriggerCase) {
        case TriggerOneofCase.ShimRegister:
          if (ShimRegister == null) {
            ShimRegister = new global::Lnrpc.FundingShim();
          }
          ShimRegister.MergeFrom(other.ShimRegister);
          break;
        case TriggerOneofCase.ShimCancel:
          if (ShimCancel == null) {
            ShimCancel = new global::Lnrpc.FundingShimCancel();
          }
          ShimCancel.MergeFrom(other.ShimCancel);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Lnrpc.FundingShim subBuilder = new global::Lnrpc.FundingShim();
            if (triggerCase_ == TriggerOneofCase.ShimRegister) {
              subBuilder.MergeFrom(ShimRegister);
            }
            input.ReadMessage(subBuilder);
            ShimRegister = subBuilder;
            break;
          }
          case 18: {
            global::Lnrpc.FundingShimCancel subBuilder = new global::Lnrpc.FundingShimCancel();
            if (triggerCase_ == TriggerOneofCase.ShimCancel) {
              subBuilder.MergeFrom(ShimCancel);
            }
            input.ReadMessage(subBuilder);
            ShimCancel = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class FundingStateStepResp : pb::IMessage<FundingStateStepResp> {
    private static readonly pb::MessageParser<FundingStateStepResp> _parser = new pb::MessageParser<FundingStateStepResp>(() => new FundingStateStepResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FundingStateStepResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FundingStateStepResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FundingStateStepResp(FundingStateStepResp other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FundingStateStepResp Clone() {
      return new FundingStateStepResp(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FundingStateStepResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FundingStateStepResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FundingStateStepResp other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class PendingHTLC : pb::IMessage<PendingHTLC> {
    private static readonly pb::MessageParser<PendingHTLC> _parser = new pb::MessageParser<PendingHTLC>(() => new PendingHTLC());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PendingHTLC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PendingHTLC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PendingHTLC(PendingHTLC other) : this() {
      incoming_ = other.incoming_;
      amount_ = other.amount_;
      outpoint_ = other.outpoint_;
      maturityHeight_ = other.maturityHeight_;
      blocksTilMaturity_ = other.blocksTilMaturity_;
      stage_ = other.stage_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PendingHTLC Clone() {
      return new PendingHTLC(this);
    }

    /// <summary>Field number for the "incoming" field.</summary>
    public const int IncomingFieldNumber = 1;
    private bool incoming_;
    /// <summary>
    //// The direction within the channel that the htlc was sent
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Incoming {
      get { return incoming_; }
      set {
        incoming_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    /// <summary>
    //// The total value of the htlc
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "outpoint" field.</summary>
    public const int OutpointFieldNumber = 3;
    private string outpoint_ = "";
    /// <summary>
    //// The final output to be swept back to the user's wallet
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Outpoint {
      get { return outpoint_; }
      set {
        outpoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "maturity_height" field.</summary>
    public const int MaturityHeightFieldNumber = 4;
    private uint maturityHeight_;
    /// <summary>
    //// The next block height at which we can spend the current stage
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaturityHeight {
      get { return maturityHeight_; }
      set {
        maturityHeight_ = value;
      }
    }

    /// <summary>Field number for the "blocks_til_maturity" field.</summary>
    public const int BlocksTilMaturityFieldNumber = 5;
    private int blocksTilMaturity_;
    /// <summary>
    ///*
    ///The number of blocks remaining until the current stage can be swept.
    ///Negative values indicate how many blocks have passed since becoming
    ///mature.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlocksTilMaturity {
      get { return blocksTilMaturity_; }
      set {
        blocksTilMaturity_ = value;
      }
    }

    /// <summary>Field number for the "stage" field.</summary>
    public const int StageFieldNumber = 6;
    private uint stage_;
    /// <summary>
    //// Indicates whether the htlc is in its first or second stage of recovery
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Stage {
      get { return stage_; }
      set {
        stage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PendingHTLC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PendingHTLC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Incoming != other.Incoming) return false;
      if (Amount != other.Amount) return false;
      if (Outpoint != other.Outpoint) return false;
      if (MaturityHeight != other.MaturityHeight) return false;
      if (BlocksTilMaturity != other.BlocksTilMaturity) return false;
      if (Stage != other.Stage) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Incoming != false) hash ^= Incoming.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (Outpoint.Length != 0) hash ^= Outpoint.GetHashCode();
      if (MaturityHeight != 0) hash ^= MaturityHeight.GetHashCode();
      if (BlocksTilMaturity != 0) hash ^= BlocksTilMaturity.GetHashCode();
      if (Stage != 0) hash ^= Stage.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Incoming != false) {
        output.WriteRawTag(8);
        output.WriteBool(Incoming);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Amount);
      }
      if (Outpoint.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Outpoint);
      }
      if (MaturityHeight != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(MaturityHeight);
      }
      if (BlocksTilMaturity != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BlocksTilMaturity);
      }
      if (Stage != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Stage);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Incoming != false) {
        size += 1 + 1;
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (Outpoint.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Outpoint);
      }
      if (MaturityHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaturityHeight);
      }
      if (BlocksTilMaturity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlocksTilMaturity);
      }
      if (Stage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Stage);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PendingHTLC other) {
      if (other == null) {
        return;
      }
      if (other.Incoming != false) {
        Incoming = other.Incoming;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.Outpoint.Length != 0) {
        Outpoint = other.Outpoint;
      }
      if (other.MaturityHeight != 0) {
        MaturityHeight = other.MaturityHeight;
      }
      if (other.BlocksTilMaturity != 0) {
        BlocksTilMaturity = other.BlocksTilMaturity;
      }
      if (other.Stage != 0) {
        Stage = other.Stage;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Incoming = input.ReadBool();
            break;
          }
          case 16: {
            Amount = input.ReadInt64();
            break;
          }
          case 26: {
            Outpoint = input.ReadString();
            break;
          }
          case 32: {
            MaturityHeight = input.ReadUInt32();
            break;
          }
          case 40: {
            BlocksTilMaturity = input.ReadInt32();
            break;
          }
          case 48: {
            Stage = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PendingChannelsRequest : pb::IMessage<PendingChannelsRequest> {
    private static readonly pb::MessageParser<PendingChannelsRequest> _parser = new pb::MessageParser<PendingChannelsRequest>(() => new PendingChannelsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PendingChannelsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PendingChannelsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PendingChannelsRequest(PendingChannelsRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PendingChannelsRequest Clone() {
      return new PendingChannelsRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PendingChannelsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PendingChannelsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PendingChannelsRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class PendingChannelsResponse : pb::IMessage<PendingChannelsResponse> {
    private static readonly pb::MessageParser<PendingChannelsResponse> _parser = new pb::MessageParser<PendingChannelsResponse>(() => new PendingChannelsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PendingChannelsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[71]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PendingChannelsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PendingChannelsResponse(PendingChannelsResponse other) : this() {
      totalLimboBalance_ = other.totalLimboBalance_;
      pendingOpenChannels_ = other.pendingOpenChannels_.Clone();
      pendingClosingChannels_ = other.pendingClosingChannels_.Clone();
      pendingForceClosingChannels_ = other.pendingForceClosingChannels_.Clone();
      waitingCloseChannels_ = other.waitingCloseChannels_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PendingChannelsResponse Clone() {
      return new PendingChannelsResponse(this);
    }

    /// <summary>Field number for the "total_limbo_balance" field.</summary>
    public const int TotalLimboBalanceFieldNumber = 1;
    private long totalLimboBalance_;
    /// <summary>
    //// The balance in satoshis encumbered in pending channels
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalLimboBalance {
      get { return totalLimboBalance_; }
      set {
        totalLimboBalance_ = value;
      }
    }

    /// <summary>Field number for the "pending_open_channels" field.</summary>
    public const int PendingOpenChannelsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Lnrpc.PendingChannelsResponse.Types.PendingOpenChannel> _repeated_pendingOpenChannels_codec
        = pb::FieldCodec.ForMessage(18, global::Lnrpc.PendingChannelsResponse.Types.PendingOpenChannel.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.PendingChannelsResponse.Types.PendingOpenChannel> pendingOpenChannels_ = new pbc::RepeatedField<global::Lnrpc.PendingChannelsResponse.Types.PendingOpenChannel>();
    /// <summary>
    //// Channels pending opening
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.PendingChannelsResponse.Types.PendingOpenChannel> PendingOpenChannels {
      get { return pendingOpenChannels_; }
    }

    /// <summary>Field number for the "pending_closing_channels" field.</summary>
    public const int PendingClosingChannelsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Lnrpc.PendingChannelsResponse.Types.ClosedChannel> _repeated_pendingClosingChannels_codec
        = pb::FieldCodec.ForMessage(26, global::Lnrpc.PendingChannelsResponse.Types.ClosedChannel.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.PendingChannelsResponse.Types.ClosedChannel> pendingClosingChannels_ = new pbc::RepeatedField<global::Lnrpc.PendingChannelsResponse.Types.ClosedChannel>();
    /// <summary>
    //// Channels pending closing
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.PendingChannelsResponse.Types.ClosedChannel> PendingClosingChannels {
      get { return pendingClosingChannels_; }
    }

    /// <summary>Field number for the "pending_force_closing_channels" field.</summary>
    public const int PendingForceClosingChannelsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Lnrpc.PendingChannelsResponse.Types.ForceClosedChannel> _repeated_pendingForceClosingChannels_codec
        = pb::FieldCodec.ForMessage(34, global::Lnrpc.PendingChannelsResponse.Types.ForceClosedChannel.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.PendingChannelsResponse.Types.ForceClosedChannel> pendingForceClosingChannels_ = new pbc::RepeatedField<global::Lnrpc.PendingChannelsResponse.Types.ForceClosedChannel>();
    /// <summary>
    //// Channels pending force closing
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.PendingChannelsResponse.Types.ForceClosedChannel> PendingForceClosingChannels {
      get { return pendingForceClosingChannels_; }
    }

    /// <summary>Field number for the "waiting_close_channels" field.</summary>
    public const int WaitingCloseChannelsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Lnrpc.PendingChannelsResponse.Types.WaitingCloseChannel> _repeated_waitingCloseChannels_codec
        = pb::FieldCodec.ForMessage(42, global::Lnrpc.PendingChannelsResponse.Types.WaitingCloseChannel.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.PendingChannelsResponse.Types.WaitingCloseChannel> waitingCloseChannels_ = new pbc::RepeatedField<global::Lnrpc.PendingChannelsResponse.Types.WaitingCloseChannel>();
    /// <summary>
    //// Channels waiting for closing tx to confirm
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.PendingChannelsResponse.Types.WaitingCloseChannel> WaitingCloseChannels {
      get { return waitingCloseChannels_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PendingChannelsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PendingChannelsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TotalLimboBalance != other.TotalLimboBalance) return false;
      if(!pendingOpenChannels_.Equals(other.pendingOpenChannels_)) return false;
      if(!pendingClosingChannels_.Equals(other.pendingClosingChannels_)) return false;
      if(!pendingForceClosingChannels_.Equals(other.pendingForceClosingChannels_)) return false;
      if(!waitingCloseChannels_.Equals(other.waitingCloseChannels_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TotalLimboBalance != 0L) hash ^= TotalLimboBalance.GetHashCode();
      hash ^= pendingOpenChannels_.GetHashCode();
      hash ^= pendingClosingChannels_.GetHashCode();
      hash ^= pendingForceClosingChannels_.GetHashCode();
      hash ^= waitingCloseChannels_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TotalLimboBalance != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TotalLimboBalance);
      }
      pendingOpenChannels_.WriteTo(output, _repeated_pendingOpenChannels_codec);
      pendingClosingChannels_.WriteTo(output, _repeated_pendingClosingChannels_codec);
      pendingForceClosingChannels_.WriteTo(output, _repeated_pendingForceClosingChannels_codec);
      waitingCloseChannels_.WriteTo(output, _repeated_waitingCloseChannels_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TotalLimboBalance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalLimboBalance);
      }
      size += pendingOpenChannels_.CalculateSize(_repeated_pendingOpenChannels_codec);
      size += pendingClosingChannels_.CalculateSize(_repeated_pendingClosingChannels_codec);
      size += pendingForceClosingChannels_.CalculateSize(_repeated_pendingForceClosingChannels_codec);
      size += waitingCloseChannels_.CalculateSize(_repeated_waitingCloseChannels_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PendingChannelsResponse other) {
      if (other == null) {
        return;
      }
      if (other.TotalLimboBalance != 0L) {
        TotalLimboBalance = other.TotalLimboBalance;
      }
      pendingOpenChannels_.Add(other.pendingOpenChannels_);
      pendingClosingChannels_.Add(other.pendingClosingChannels_);
      pendingForceClosingChannels_.Add(other.pendingForceClosingChannels_);
      waitingCloseChannels_.Add(other.waitingCloseChannels_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TotalLimboBalance = input.ReadInt64();
            break;
          }
          case 18: {
            pendingOpenChannels_.AddEntriesFrom(input, _repeated_pendingOpenChannels_codec);
            break;
          }
          case 26: {
            pendingClosingChannels_.AddEntriesFrom(input, _repeated_pendingClosingChannels_codec);
            break;
          }
          case 34: {
            pendingForceClosingChannels_.AddEntriesFrom(input, _repeated_pendingForceClosingChannels_codec);
            break;
          }
          case 42: {
            waitingCloseChannels_.AddEntriesFrom(input, _repeated_waitingCloseChannels_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PendingChannelsResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class PendingChannel : pb::IMessage<PendingChannel> {
        private static readonly pb::MessageParser<PendingChannel> _parser = new pb::MessageParser<PendingChannel>(() => new PendingChannel());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PendingChannel> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Lnrpc.PendingChannelsResponse.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PendingChannel() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PendingChannel(PendingChannel other) : this() {
          remoteNodePub_ = other.remoteNodePub_;
          channelPoint_ = other.channelPoint_;
          capacity_ = other.capacity_;
          localBalance_ = other.localBalance_;
          remoteBalance_ = other.remoteBalance_;
          localChanReserveSat_ = other.localChanReserveSat_;
          remoteChanReserveSat_ = other.remoteChanReserveSat_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PendingChannel Clone() {
          return new PendingChannel(this);
        }

        /// <summary>Field number for the "remote_node_pub" field.</summary>
        public const int RemoteNodePubFieldNumber = 1;
        private string remoteNodePub_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string RemoteNodePub {
          get { return remoteNodePub_; }
          set {
            remoteNodePub_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "channel_point" field.</summary>
        public const int ChannelPointFieldNumber = 2;
        private string channelPoint_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ChannelPoint {
          get { return channelPoint_; }
          set {
            channelPoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "capacity" field.</summary>
        public const int CapacityFieldNumber = 3;
        private long capacity_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Capacity {
          get { return capacity_; }
          set {
            capacity_ = value;
          }
        }

        /// <summary>Field number for the "local_balance" field.</summary>
        public const int LocalBalanceFieldNumber = 4;
        private long localBalance_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long LocalBalance {
          get { return localBalance_; }
          set {
            localBalance_ = value;
          }
        }

        /// <summary>Field number for the "remote_balance" field.</summary>
        public const int RemoteBalanceFieldNumber = 5;
        private long remoteBalance_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long RemoteBalance {
          get { return remoteBalance_; }
          set {
            remoteBalance_ = value;
          }
        }

        /// <summary>Field number for the "local_chan_reserve_sat" field.</summary>
        public const int LocalChanReserveSatFieldNumber = 6;
        private long localChanReserveSat_;
        /// <summary>
        //// The minimum satoshis this node is required to reserve in its balance.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long LocalChanReserveSat {
          get { return localChanReserveSat_; }
          set {
            localChanReserveSat_ = value;
          }
        }

        /// <summary>Field number for the "remote_chan_reserve_sat" field.</summary>
        public const int RemoteChanReserveSatFieldNumber = 7;
        private long remoteChanReserveSat_;
        /// <summary>
        ///*
        ///The minimum satoshis the other node is required to reserve in its
        ///balance.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long RemoteChanReserveSat {
          get { return remoteChanReserveSat_; }
          set {
            remoteChanReserveSat_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PendingChannel);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PendingChannel other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (RemoteNodePub != other.RemoteNodePub) return false;
          if (ChannelPoint != other.ChannelPoint) return false;
          if (Capacity != other.Capacity) return false;
          if (LocalBalance != other.LocalBalance) return false;
          if (RemoteBalance != other.RemoteBalance) return false;
          if (LocalChanReserveSat != other.LocalChanReserveSat) return false;
          if (RemoteChanReserveSat != other.RemoteChanReserveSat) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (RemoteNodePub.Length != 0) hash ^= RemoteNodePub.GetHashCode();
          if (ChannelPoint.Length != 0) hash ^= ChannelPoint.GetHashCode();
          if (Capacity != 0L) hash ^= Capacity.GetHashCode();
          if (LocalBalance != 0L) hash ^= LocalBalance.GetHashCode();
          if (RemoteBalance != 0L) hash ^= RemoteBalance.GetHashCode();
          if (LocalChanReserveSat != 0L) hash ^= LocalChanReserveSat.GetHashCode();
          if (RemoteChanReserveSat != 0L) hash ^= RemoteChanReserveSat.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (RemoteNodePub.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(RemoteNodePub);
          }
          if (ChannelPoint.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(ChannelPoint);
          }
          if (Capacity != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(Capacity);
          }
          if (LocalBalance != 0L) {
            output.WriteRawTag(32);
            output.WriteInt64(LocalBalance);
          }
          if (RemoteBalance != 0L) {
            output.WriteRawTag(40);
            output.WriteInt64(RemoteBalance);
          }
          if (LocalChanReserveSat != 0L) {
            output.WriteRawTag(48);
            output.WriteInt64(LocalChanReserveSat);
          }
          if (RemoteChanReserveSat != 0L) {
            output.WriteRawTag(56);
            output.WriteInt64(RemoteChanReserveSat);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (RemoteNodePub.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(RemoteNodePub);
          }
          if (ChannelPoint.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelPoint);
          }
          if (Capacity != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Capacity);
          }
          if (LocalBalance != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(LocalBalance);
          }
          if (RemoteBalance != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(RemoteBalance);
          }
          if (LocalChanReserveSat != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(LocalChanReserveSat);
          }
          if (RemoteChanReserveSat != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(RemoteChanReserveSat);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PendingChannel other) {
          if (other == null) {
            return;
          }
          if (other.RemoteNodePub.Length != 0) {
            RemoteNodePub = other.RemoteNodePub;
          }
          if (other.ChannelPoint.Length != 0) {
            ChannelPoint = other.ChannelPoint;
          }
          if (other.Capacity != 0L) {
            Capacity = other.Capacity;
          }
          if (other.LocalBalance != 0L) {
            LocalBalance = other.LocalBalance;
          }
          if (other.RemoteBalance != 0L) {
            RemoteBalance = other.RemoteBalance;
          }
          if (other.LocalChanReserveSat != 0L) {
            LocalChanReserveSat = other.LocalChanReserveSat;
          }
          if (other.RemoteChanReserveSat != 0L) {
            RemoteChanReserveSat = other.RemoteChanReserveSat;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                RemoteNodePub = input.ReadString();
                break;
              }
              case 18: {
                ChannelPoint = input.ReadString();
                break;
              }
              case 24: {
                Capacity = input.ReadInt64();
                break;
              }
              case 32: {
                LocalBalance = input.ReadInt64();
                break;
              }
              case 40: {
                RemoteBalance = input.ReadInt64();
                break;
              }
              case 48: {
                LocalChanReserveSat = input.ReadInt64();
                break;
              }
              case 56: {
                RemoteChanReserveSat = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class PendingOpenChannel : pb::IMessage<PendingOpenChannel> {
        private static readonly pb::MessageParser<PendingOpenChannel> _parser = new pb::MessageParser<PendingOpenChannel>(() => new PendingOpenChannel());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PendingOpenChannel> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Lnrpc.PendingChannelsResponse.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PendingOpenChannel() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PendingOpenChannel(PendingOpenChannel other) : this() {
          channel_ = other.channel_ != null ? other.channel_.Clone() : null;
          confirmationHeight_ = other.confirmationHeight_;
          commitFee_ = other.commitFee_;
          commitWeight_ = other.commitWeight_;
          feePerKw_ = other.feePerKw_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PendingOpenChannel Clone() {
          return new PendingOpenChannel(this);
        }

        /// <summary>Field number for the "channel" field.</summary>
        public const int ChannelFieldNumber = 1;
        private global::Lnrpc.PendingChannelsResponse.Types.PendingChannel channel_;
        /// <summary>
        //// The pending channel
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Lnrpc.PendingChannelsResponse.Types.PendingChannel Channel {
          get { return channel_; }
          set {
            channel_ = value;
          }
        }

        /// <summary>Field number for the "confirmation_height" field.</summary>
        public const int ConfirmationHeightFieldNumber = 2;
        private uint confirmationHeight_;
        /// <summary>
        //// The height at which this channel will be confirmed
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint ConfirmationHeight {
          get { return confirmationHeight_; }
          set {
            confirmationHeight_ = value;
          }
        }

        /// <summary>Field number for the "commit_fee" field.</summary>
        public const int CommitFeeFieldNumber = 4;
        private long commitFee_;
        /// <summary>
        ///*
        ///The amount calculated to be paid in fees for the current set of
        ///commitment transactions. The fee amount is persisted with the channel
        ///in order to allow the fee amount to be removed and recalculated with
        ///each channel state update, including updates that happen after a system
        ///restart.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long CommitFee {
          get { return commitFee_; }
          set {
            commitFee_ = value;
          }
        }

        /// <summary>Field number for the "commit_weight" field.</summary>
        public const int CommitWeightFieldNumber = 5;
        private long commitWeight_;
        /// <summary>
        //// The weight of the commitment transaction
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long CommitWeight {
          get { return commitWeight_; }
          set {
            commitWeight_ = value;
          }
        }

        /// <summary>Field number for the "fee_per_kw" field.</summary>
        public const int FeePerKwFieldNumber = 6;
        private long feePerKw_;
        /// <summary>
        ///*
        ///The required number of satoshis per kilo-weight that the requester will
        ///pay at all times, for both the funding transaction and commitment
        ///transaction. This value can later be updated once the channel is open.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long FeePerKw {
          get { return feePerKw_; }
          set {
            feePerKw_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PendingOpenChannel);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PendingOpenChannel other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Channel, other.Channel)) return false;
          if (ConfirmationHeight != other.ConfirmationHeight) return false;
          if (CommitFee != other.CommitFee) return false;
          if (CommitWeight != other.CommitWeight) return false;
          if (FeePerKw != other.FeePerKw) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (channel_ != null) hash ^= Channel.GetHashCode();
          if (ConfirmationHeight != 0) hash ^= ConfirmationHeight.GetHashCode();
          if (CommitFee != 0L) hash ^= CommitFee.GetHashCode();
          if (CommitWeight != 0L) hash ^= CommitWeight.GetHashCode();
          if (FeePerKw != 0L) hash ^= FeePerKw.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (channel_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Channel);
          }
          if (ConfirmationHeight != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(ConfirmationHeight);
          }
          if (CommitFee != 0L) {
            output.WriteRawTag(32);
            output.WriteInt64(CommitFee);
          }
          if (CommitWeight != 0L) {
            output.WriteRawTag(40);
            output.WriteInt64(CommitWeight);
          }
          if (FeePerKw != 0L) {
            output.WriteRawTag(48);
            output.WriteInt64(FeePerKw);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (channel_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Channel);
          }
          if (ConfirmationHeight != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ConfirmationHeight);
          }
          if (CommitFee != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(CommitFee);
          }
          if (CommitWeight != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(CommitWeight);
          }
          if (FeePerKw != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(FeePerKw);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PendingOpenChannel other) {
          if (other == null) {
            return;
          }
          if (other.channel_ != null) {
            if (channel_ == null) {
              Channel = new global::Lnrpc.PendingChannelsResponse.Types.PendingChannel();
            }
            Channel.MergeFrom(other.Channel);
          }
          if (other.ConfirmationHeight != 0) {
            ConfirmationHeight = other.ConfirmationHeight;
          }
          if (other.CommitFee != 0L) {
            CommitFee = other.CommitFee;
          }
          if (other.CommitWeight != 0L) {
            CommitWeight = other.CommitWeight;
          }
          if (other.FeePerKw != 0L) {
            FeePerKw = other.FeePerKw;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (channel_ == null) {
                  Channel = new global::Lnrpc.PendingChannelsResponse.Types.PendingChannel();
                }
                input.ReadMessage(Channel);
                break;
              }
              case 16: {
                ConfirmationHeight = input.ReadUInt32();
                break;
              }
              case 32: {
                CommitFee = input.ReadInt64();
                break;
              }
              case 40: {
                CommitWeight = input.ReadInt64();
                break;
              }
              case 48: {
                FeePerKw = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class WaitingCloseChannel : pb::IMessage<WaitingCloseChannel> {
        private static readonly pb::MessageParser<WaitingCloseChannel> _parser = new pb::MessageParser<WaitingCloseChannel>(() => new WaitingCloseChannel());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<WaitingCloseChannel> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Lnrpc.PendingChannelsResponse.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WaitingCloseChannel() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WaitingCloseChannel(WaitingCloseChannel other) : this() {
          channel_ = other.channel_ != null ? other.channel_.Clone() : null;
          limboBalance_ = other.limboBalance_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public WaitingCloseChannel Clone() {
          return new WaitingCloseChannel(this);
        }

        /// <summary>Field number for the "channel" field.</summary>
        public const int ChannelFieldNumber = 1;
        private global::Lnrpc.PendingChannelsResponse.Types.PendingChannel channel_;
        /// <summary>
        //// The pending channel waiting for closing tx to confirm
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Lnrpc.PendingChannelsResponse.Types.PendingChannel Channel {
          get { return channel_; }
          set {
            channel_ = value;
          }
        }

        /// <summary>Field number for the "limbo_balance" field.</summary>
        public const int LimboBalanceFieldNumber = 2;
        private long limboBalance_;
        /// <summary>
        //// The balance in satoshis encumbered in this channel
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long LimboBalance {
          get { return limboBalance_; }
          set {
            limboBalance_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as WaitingCloseChannel);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(WaitingCloseChannel other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Channel, other.Channel)) return false;
          if (LimboBalance != other.LimboBalance) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (channel_ != null) hash ^= Channel.GetHashCode();
          if (LimboBalance != 0L) hash ^= LimboBalance.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (channel_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Channel);
          }
          if (LimboBalance != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(LimboBalance);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (channel_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Channel);
          }
          if (LimboBalance != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(LimboBalance);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(WaitingCloseChannel other) {
          if (other == null) {
            return;
          }
          if (other.channel_ != null) {
            if (channel_ == null) {
              Channel = new global::Lnrpc.PendingChannelsResponse.Types.PendingChannel();
            }
            Channel.MergeFrom(other.Channel);
          }
          if (other.LimboBalance != 0L) {
            LimboBalance = other.LimboBalance;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (channel_ == null) {
                  Channel = new global::Lnrpc.PendingChannelsResponse.Types.PendingChannel();
                }
                input.ReadMessage(Channel);
                break;
              }
              case 16: {
                LimboBalance = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ClosedChannel : pb::IMessage<ClosedChannel> {
        private static readonly pb::MessageParser<ClosedChannel> _parser = new pb::MessageParser<ClosedChannel>(() => new ClosedChannel());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ClosedChannel> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Lnrpc.PendingChannelsResponse.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClosedChannel() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClosedChannel(ClosedChannel other) : this() {
          channel_ = other.channel_ != null ? other.channel_.Clone() : null;
          closingTxid_ = other.closingTxid_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ClosedChannel Clone() {
          return new ClosedChannel(this);
        }

        /// <summary>Field number for the "channel" field.</summary>
        public const int ChannelFieldNumber = 1;
        private global::Lnrpc.PendingChannelsResponse.Types.PendingChannel channel_;
        /// <summary>
        //// The pending channel to be closed
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Lnrpc.PendingChannelsResponse.Types.PendingChannel Channel {
          get { return channel_; }
          set {
            channel_ = value;
          }
        }

        /// <summary>Field number for the "closing_txid" field.</summary>
        public const int ClosingTxidFieldNumber = 2;
        private string closingTxid_ = "";
        /// <summary>
        //// The transaction id of the closing transaction
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ClosingTxid {
          get { return closingTxid_; }
          set {
            closingTxid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ClosedChannel);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ClosedChannel other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Channel, other.Channel)) return false;
          if (ClosingTxid != other.ClosingTxid) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (channel_ != null) hash ^= Channel.GetHashCode();
          if (ClosingTxid.Length != 0) hash ^= ClosingTxid.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (channel_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Channel);
          }
          if (ClosingTxid.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(ClosingTxid);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (channel_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Channel);
          }
          if (ClosingTxid.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ClosingTxid);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ClosedChannel other) {
          if (other == null) {
            return;
          }
          if (other.channel_ != null) {
            if (channel_ == null) {
              Channel = new global::Lnrpc.PendingChannelsResponse.Types.PendingChannel();
            }
            Channel.MergeFrom(other.Channel);
          }
          if (other.ClosingTxid.Length != 0) {
            ClosingTxid = other.ClosingTxid;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (channel_ == null) {
                  Channel = new global::Lnrpc.PendingChannelsResponse.Types.PendingChannel();
                }
                input.ReadMessage(Channel);
                break;
              }
              case 18: {
                ClosingTxid = input.ReadString();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ForceClosedChannel : pb::IMessage<ForceClosedChannel> {
        private static readonly pb::MessageParser<ForceClosedChannel> _parser = new pb::MessageParser<ForceClosedChannel>(() => new ForceClosedChannel());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ForceClosedChannel> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Lnrpc.PendingChannelsResponse.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ForceClosedChannel() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ForceClosedChannel(ForceClosedChannel other) : this() {
          channel_ = other.channel_ != null ? other.channel_.Clone() : null;
          closingTxid_ = other.closingTxid_;
          limboBalance_ = other.limboBalance_;
          maturityHeight_ = other.maturityHeight_;
          blocksTilMaturity_ = other.blocksTilMaturity_;
          recoveredBalance_ = other.recoveredBalance_;
          pendingHtlcs_ = other.pendingHtlcs_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ForceClosedChannel Clone() {
          return new ForceClosedChannel(this);
        }

        /// <summary>Field number for the "channel" field.</summary>
        public const int ChannelFieldNumber = 1;
        private global::Lnrpc.PendingChannelsResponse.Types.PendingChannel channel_;
        /// <summary>
        //// The pending channel to be force closed
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Lnrpc.PendingChannelsResponse.Types.PendingChannel Channel {
          get { return channel_; }
          set {
            channel_ = value;
          }
        }

        /// <summary>Field number for the "closing_txid" field.</summary>
        public const int ClosingTxidFieldNumber = 2;
        private string closingTxid_ = "";
        /// <summary>
        //// The transaction id of the closing transaction
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string ClosingTxid {
          get { return closingTxid_; }
          set {
            closingTxid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "limbo_balance" field.</summary>
        public const int LimboBalanceFieldNumber = 3;
        private long limboBalance_;
        /// <summary>
        //// The balance in satoshis encumbered in this pending channel
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long LimboBalance {
          get { return limboBalance_; }
          set {
            limboBalance_ = value;
          }
        }

        /// <summary>Field number for the "maturity_height" field.</summary>
        public const int MaturityHeightFieldNumber = 4;
        private uint maturityHeight_;
        /// <summary>
        //// The height at which funds can be swept into the wallet
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint MaturityHeight {
          get { return maturityHeight_; }
          set {
            maturityHeight_ = value;
          }
        }

        /// <summary>Field number for the "blocks_til_maturity" field.</summary>
        public const int BlocksTilMaturityFieldNumber = 5;
        private int blocksTilMaturity_;
        /// <summary>
        ///
        ///Remaining # of blocks until the commitment output can be swept.
        ///Negative values indicate how many blocks have passed since becoming
        ///mature.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int BlocksTilMaturity {
          get { return blocksTilMaturity_; }
          set {
            blocksTilMaturity_ = value;
          }
        }

        /// <summary>Field number for the "recovered_balance" field.</summary>
        public const int RecoveredBalanceFieldNumber = 6;
        private long recoveredBalance_;
        /// <summary>
        //// The total value of funds successfully recovered from this channel
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long RecoveredBalance {
          get { return recoveredBalance_; }
          set {
            recoveredBalance_ = value;
          }
        }

        /// <summary>Field number for the "pending_htlcs" field.</summary>
        public const int PendingHtlcsFieldNumber = 8;
        private static readonly pb::FieldCodec<global::Lnrpc.PendingHTLC> _repeated_pendingHtlcs_codec
            = pb::FieldCodec.ForMessage(66, global::Lnrpc.PendingHTLC.Parser);
        private readonly pbc::RepeatedField<global::Lnrpc.PendingHTLC> pendingHtlcs_ = new pbc::RepeatedField<global::Lnrpc.PendingHTLC>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Lnrpc.PendingHTLC> PendingHtlcs {
          get { return pendingHtlcs_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ForceClosedChannel);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ForceClosedChannel other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Channel, other.Channel)) return false;
          if (ClosingTxid != other.ClosingTxid) return false;
          if (LimboBalance != other.LimboBalance) return false;
          if (MaturityHeight != other.MaturityHeight) return false;
          if (BlocksTilMaturity != other.BlocksTilMaturity) return false;
          if (RecoveredBalance != other.RecoveredBalance) return false;
          if(!pendingHtlcs_.Equals(other.pendingHtlcs_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (channel_ != null) hash ^= Channel.GetHashCode();
          if (ClosingTxid.Length != 0) hash ^= ClosingTxid.GetHashCode();
          if (LimboBalance != 0L) hash ^= LimboBalance.GetHashCode();
          if (MaturityHeight != 0) hash ^= MaturityHeight.GetHashCode();
          if (BlocksTilMaturity != 0) hash ^= BlocksTilMaturity.GetHashCode();
          if (RecoveredBalance != 0L) hash ^= RecoveredBalance.GetHashCode();
          hash ^= pendingHtlcs_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (channel_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Channel);
          }
          if (ClosingTxid.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(ClosingTxid);
          }
          if (LimboBalance != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(LimboBalance);
          }
          if (MaturityHeight != 0) {
            output.WriteRawTag(32);
            output.WriteUInt32(MaturityHeight);
          }
          if (BlocksTilMaturity != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(BlocksTilMaturity);
          }
          if (RecoveredBalance != 0L) {
            output.WriteRawTag(48);
            output.WriteInt64(RecoveredBalance);
          }
          pendingHtlcs_.WriteTo(output, _repeated_pendingHtlcs_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (channel_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Channel);
          }
          if (ClosingTxid.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(ClosingTxid);
          }
          if (LimboBalance != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(LimboBalance);
          }
          if (MaturityHeight != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaturityHeight);
          }
          if (BlocksTilMaturity != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlocksTilMaturity);
          }
          if (RecoveredBalance != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(RecoveredBalance);
          }
          size += pendingHtlcs_.CalculateSize(_repeated_pendingHtlcs_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ForceClosedChannel other) {
          if (other == null) {
            return;
          }
          if (other.channel_ != null) {
            if (channel_ == null) {
              Channel = new global::Lnrpc.PendingChannelsResponse.Types.PendingChannel();
            }
            Channel.MergeFrom(other.Channel);
          }
          if (other.ClosingTxid.Length != 0) {
            ClosingTxid = other.ClosingTxid;
          }
          if (other.LimboBalance != 0L) {
            LimboBalance = other.LimboBalance;
          }
          if (other.MaturityHeight != 0) {
            MaturityHeight = other.MaturityHeight;
          }
          if (other.BlocksTilMaturity != 0) {
            BlocksTilMaturity = other.BlocksTilMaturity;
          }
          if (other.RecoveredBalance != 0L) {
            RecoveredBalance = other.RecoveredBalance;
          }
          pendingHtlcs_.Add(other.pendingHtlcs_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (channel_ == null) {
                  Channel = new global::Lnrpc.PendingChannelsResponse.Types.PendingChannel();
                }
                input.ReadMessage(Channel);
                break;
              }
              case 18: {
                ClosingTxid = input.ReadString();
                break;
              }
              case 24: {
                LimboBalance = input.ReadInt64();
                break;
              }
              case 32: {
                MaturityHeight = input.ReadUInt32();
                break;
              }
              case 40: {
                BlocksTilMaturity = input.ReadInt32();
                break;
              }
              case 48: {
                RecoveredBalance = input.ReadInt64();
                break;
              }
              case 66: {
                pendingHtlcs_.AddEntriesFrom(input, _repeated_pendingHtlcs_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class ChannelEventSubscription : pb::IMessage<ChannelEventSubscription> {
    private static readonly pb::MessageParser<ChannelEventSubscription> _parser = new pb::MessageParser<ChannelEventSubscription>(() => new ChannelEventSubscription());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelEventSubscription> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[72]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelEventSubscription() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelEventSubscription(ChannelEventSubscription other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelEventSubscription Clone() {
      return new ChannelEventSubscription(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelEventSubscription);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelEventSubscription other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelEventSubscription other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class ChannelEventUpdate : pb::IMessage<ChannelEventUpdate> {
    private static readonly pb::MessageParser<ChannelEventUpdate> _parser = new pb::MessageParser<ChannelEventUpdate>(() => new ChannelEventUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelEventUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[73]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelEventUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelEventUpdate(ChannelEventUpdate other) : this() {
      type_ = other.type_;
      switch (other.ChannelCase) {
        case ChannelOneofCase.OpenChannel:
          OpenChannel = other.OpenChannel.Clone();
          break;
        case ChannelOneofCase.ClosedChannel:
          ClosedChannel = other.ClosedChannel.Clone();
          break;
        case ChannelOneofCase.ActiveChannel:
          ActiveChannel = other.ActiveChannel.Clone();
          break;
        case ChannelOneofCase.InactiveChannel:
          InactiveChannel = other.InactiveChannel.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelEventUpdate Clone() {
      return new ChannelEventUpdate(this);
    }

    /// <summary>Field number for the "open_channel" field.</summary>
    public const int OpenChannelFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.Channel OpenChannel {
      get { return channelCase_ == ChannelOneofCase.OpenChannel ? (global::Lnrpc.Channel) channel_ : null; }
      set {
        channel_ = value;
        channelCase_ = value == null ? ChannelOneofCase.None : ChannelOneofCase.OpenChannel;
      }
    }

    /// <summary>Field number for the "closed_channel" field.</summary>
    public const int ClosedChannelFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.ChannelCloseSummary ClosedChannel {
      get { return channelCase_ == ChannelOneofCase.ClosedChannel ? (global::Lnrpc.ChannelCloseSummary) channel_ : null; }
      set {
        channel_ = value;
        channelCase_ = value == null ? ChannelOneofCase.None : ChannelOneofCase.ClosedChannel;
      }
    }

    /// <summary>Field number for the "active_channel" field.</summary>
    public const int ActiveChannelFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.ChannelPoint ActiveChannel {
      get { return channelCase_ == ChannelOneofCase.ActiveChannel ? (global::Lnrpc.ChannelPoint) channel_ : null; }
      set {
        channel_ = value;
        channelCase_ = value == null ? ChannelOneofCase.None : ChannelOneofCase.ActiveChannel;
      }
    }

    /// <summary>Field number for the "inactive_channel" field.</summary>
    public const int InactiveChannelFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.ChannelPoint InactiveChannel {
      get { return channelCase_ == ChannelOneofCase.InactiveChannel ? (global::Lnrpc.ChannelPoint) channel_ : null; }
      set {
        channel_ = value;
        channelCase_ = value == null ? ChannelOneofCase.None : ChannelOneofCase.InactiveChannel;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 5;
    private global::Lnrpc.ChannelEventUpdate.Types.UpdateType type_ = global::Lnrpc.ChannelEventUpdate.Types.UpdateType.OpenChannel;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.ChannelEventUpdate.Types.UpdateType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    private object channel_;
    /// <summary>Enum of possible cases for the "channel" oneof.</summary>
    public enum ChannelOneofCase {
      None = 0,
      OpenChannel = 1,
      ClosedChannel = 2,
      ActiveChannel = 3,
      InactiveChannel = 4,
    }
    private ChannelOneofCase channelCase_ = ChannelOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelOneofCase ChannelCase {
      get { return channelCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearChannel() {
      channelCase_ = ChannelOneofCase.None;
      channel_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelEventUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelEventUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(OpenChannel, other.OpenChannel)) return false;
      if (!object.Equals(ClosedChannel, other.ClosedChannel)) return false;
      if (!object.Equals(ActiveChannel, other.ActiveChannel)) return false;
      if (!object.Equals(InactiveChannel, other.InactiveChannel)) return false;
      if (Type != other.Type) return false;
      if (ChannelCase != other.ChannelCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (channelCase_ == ChannelOneofCase.OpenChannel) hash ^= OpenChannel.GetHashCode();
      if (channelCase_ == ChannelOneofCase.ClosedChannel) hash ^= ClosedChannel.GetHashCode();
      if (channelCase_ == ChannelOneofCase.ActiveChannel) hash ^= ActiveChannel.GetHashCode();
      if (channelCase_ == ChannelOneofCase.InactiveChannel) hash ^= InactiveChannel.GetHashCode();
      if (Type != global::Lnrpc.ChannelEventUpdate.Types.UpdateType.OpenChannel) hash ^= Type.GetHashCode();
      hash ^= (int) channelCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (channelCase_ == ChannelOneofCase.OpenChannel) {
        output.WriteRawTag(10);
        output.WriteMessage(OpenChannel);
      }
      if (channelCase_ == ChannelOneofCase.ClosedChannel) {
        output.WriteRawTag(18);
        output.WriteMessage(ClosedChannel);
      }
      if (channelCase_ == ChannelOneofCase.ActiveChannel) {
        output.WriteRawTag(26);
        output.WriteMessage(ActiveChannel);
      }
      if (channelCase_ == ChannelOneofCase.InactiveChannel) {
        output.WriteRawTag(34);
        output.WriteMessage(InactiveChannel);
      }
      if (Type != global::Lnrpc.ChannelEventUpdate.Types.UpdateType.OpenChannel) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (channelCase_ == ChannelOneofCase.OpenChannel) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OpenChannel);
      }
      if (channelCase_ == ChannelOneofCase.ClosedChannel) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClosedChannel);
      }
      if (channelCase_ == ChannelOneofCase.ActiveChannel) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActiveChannel);
      }
      if (channelCase_ == ChannelOneofCase.InactiveChannel) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InactiveChannel);
      }
      if (Type != global::Lnrpc.ChannelEventUpdate.Types.UpdateType.OpenChannel) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelEventUpdate other) {
      if (other == null) {
        return;
      }
      if (other.Type != global::Lnrpc.ChannelEventUpdate.Types.UpdateType.OpenChannel) {
        Type = other.Type;
      }
      switch (other.ChannelCase) {
        case ChannelOneofCase.OpenChannel:
          if (OpenChannel == null) {
            OpenChannel = new global::Lnrpc.Channel();
          }
          OpenChannel.MergeFrom(other.OpenChannel);
          break;
        case ChannelOneofCase.ClosedChannel:
          if (ClosedChannel == null) {
            ClosedChannel = new global::Lnrpc.ChannelCloseSummary();
          }
          ClosedChannel.MergeFrom(other.ClosedChannel);
          break;
        case ChannelOneofCase.ActiveChannel:
          if (ActiveChannel == null) {
            ActiveChannel = new global::Lnrpc.ChannelPoint();
          }
          ActiveChannel.MergeFrom(other.ActiveChannel);
          break;
        case ChannelOneofCase.InactiveChannel:
          if (InactiveChannel == null) {
            InactiveChannel = new global::Lnrpc.ChannelPoint();
          }
          InactiveChannel.MergeFrom(other.InactiveChannel);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Lnrpc.Channel subBuilder = new global::Lnrpc.Channel();
            if (channelCase_ == ChannelOneofCase.OpenChannel) {
              subBuilder.MergeFrom(OpenChannel);
            }
            input.ReadMessage(subBuilder);
            OpenChannel = subBuilder;
            break;
          }
          case 18: {
            global::Lnrpc.ChannelCloseSummary subBuilder = new global::Lnrpc.ChannelCloseSummary();
            if (channelCase_ == ChannelOneofCase.ClosedChannel) {
              subBuilder.MergeFrom(ClosedChannel);
            }
            input.ReadMessage(subBuilder);
            ClosedChannel = subBuilder;
            break;
          }
          case 26: {
            global::Lnrpc.ChannelPoint subBuilder = new global::Lnrpc.ChannelPoint();
            if (channelCase_ == ChannelOneofCase.ActiveChannel) {
              subBuilder.MergeFrom(ActiveChannel);
            }
            input.ReadMessage(subBuilder);
            ActiveChannel = subBuilder;
            break;
          }
          case 34: {
            global::Lnrpc.ChannelPoint subBuilder = new global::Lnrpc.ChannelPoint();
            if (channelCase_ == ChannelOneofCase.InactiveChannel) {
              subBuilder.MergeFrom(InactiveChannel);
            }
            input.ReadMessage(subBuilder);
            InactiveChannel = subBuilder;
            break;
          }
          case 40: {
            Type = (global::Lnrpc.ChannelEventUpdate.Types.UpdateType) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ChannelEventUpdate message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum UpdateType {
        [pbr::OriginalName("OPEN_CHANNEL")] OpenChannel = 0,
        [pbr::OriginalName("CLOSED_CHANNEL")] ClosedChannel = 1,
        [pbr::OriginalName("ACTIVE_CHANNEL")] ActiveChannel = 2,
        [pbr::OriginalName("INACTIVE_CHANNEL")] InactiveChannel = 3,
      }

    }
    #endregion

  }

  public sealed partial class WalletBalanceRequest : pb::IMessage<WalletBalanceRequest> {
    private static readonly pb::MessageParser<WalletBalanceRequest> _parser = new pb::MessageParser<WalletBalanceRequest>(() => new WalletBalanceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WalletBalanceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[74]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WalletBalanceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WalletBalanceRequest(WalletBalanceRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WalletBalanceRequest Clone() {
      return new WalletBalanceRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WalletBalanceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WalletBalanceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WalletBalanceRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class WalletBalanceResponse : pb::IMessage<WalletBalanceResponse> {
    private static readonly pb::MessageParser<WalletBalanceResponse> _parser = new pb::MessageParser<WalletBalanceResponse>(() => new WalletBalanceResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WalletBalanceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[75]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WalletBalanceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WalletBalanceResponse(WalletBalanceResponse other) : this() {
      totalBalance_ = other.totalBalance_;
      confirmedBalance_ = other.confirmedBalance_;
      unconfirmedBalance_ = other.unconfirmedBalance_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WalletBalanceResponse Clone() {
      return new WalletBalanceResponse(this);
    }

    /// <summary>Field number for the "total_balance" field.</summary>
    public const int TotalBalanceFieldNumber = 1;
    private long totalBalance_;
    /// <summary>
    //// The balance of the wallet
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalBalance {
      get { return totalBalance_; }
      set {
        totalBalance_ = value;
      }
    }

    /// <summary>Field number for the "confirmed_balance" field.</summary>
    public const int ConfirmedBalanceFieldNumber = 2;
    private long confirmedBalance_;
    /// <summary>
    //// The confirmed balance of a wallet(with >= 1 confirmations)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ConfirmedBalance {
      get { return confirmedBalance_; }
      set {
        confirmedBalance_ = value;
      }
    }

    /// <summary>Field number for the "unconfirmed_balance" field.</summary>
    public const int UnconfirmedBalanceFieldNumber = 3;
    private long unconfirmedBalance_;
    /// <summary>
    //// The unconfirmed balance of a wallet(with 0 confirmations)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UnconfirmedBalance {
      get { return unconfirmedBalance_; }
      set {
        unconfirmedBalance_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WalletBalanceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WalletBalanceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TotalBalance != other.TotalBalance) return false;
      if (ConfirmedBalance != other.ConfirmedBalance) return false;
      if (UnconfirmedBalance != other.UnconfirmedBalance) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TotalBalance != 0L) hash ^= TotalBalance.GetHashCode();
      if (ConfirmedBalance != 0L) hash ^= ConfirmedBalance.GetHashCode();
      if (UnconfirmedBalance != 0L) hash ^= UnconfirmedBalance.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TotalBalance != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TotalBalance);
      }
      if (ConfirmedBalance != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ConfirmedBalance);
      }
      if (UnconfirmedBalance != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(UnconfirmedBalance);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TotalBalance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalBalance);
      }
      if (ConfirmedBalance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ConfirmedBalance);
      }
      if (UnconfirmedBalance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnconfirmedBalance);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WalletBalanceResponse other) {
      if (other == null) {
        return;
      }
      if (other.TotalBalance != 0L) {
        TotalBalance = other.TotalBalance;
      }
      if (other.ConfirmedBalance != 0L) {
        ConfirmedBalance = other.ConfirmedBalance;
      }
      if (other.UnconfirmedBalance != 0L) {
        UnconfirmedBalance = other.UnconfirmedBalance;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TotalBalance = input.ReadInt64();
            break;
          }
          case 16: {
            ConfirmedBalance = input.ReadInt64();
            break;
          }
          case 24: {
            UnconfirmedBalance = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChannelBalanceRequest : pb::IMessage<ChannelBalanceRequest> {
    private static readonly pb::MessageParser<ChannelBalanceRequest> _parser = new pb::MessageParser<ChannelBalanceRequest>(() => new ChannelBalanceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelBalanceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[76]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelBalanceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelBalanceRequest(ChannelBalanceRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelBalanceRequest Clone() {
      return new ChannelBalanceRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelBalanceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelBalanceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelBalanceRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class ChannelBalanceResponse : pb::IMessage<ChannelBalanceResponse> {
    private static readonly pb::MessageParser<ChannelBalanceResponse> _parser = new pb::MessageParser<ChannelBalanceResponse>(() => new ChannelBalanceResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelBalanceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[77]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelBalanceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelBalanceResponse(ChannelBalanceResponse other) : this() {
      balance_ = other.balance_;
      pendingOpenBalance_ = other.pendingOpenBalance_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelBalanceResponse Clone() {
      return new ChannelBalanceResponse(this);
    }

    /// <summary>Field number for the "balance" field.</summary>
    public const int BalanceFieldNumber = 1;
    private long balance_;
    /// <summary>
    //// Sum of channels balances denominated in satoshis
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Balance {
      get { return balance_; }
      set {
        balance_ = value;
      }
    }

    /// <summary>Field number for the "pending_open_balance" field.</summary>
    public const int PendingOpenBalanceFieldNumber = 2;
    private long pendingOpenBalance_;
    /// <summary>
    //// Sum of channels pending balances denominated in satoshis
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PendingOpenBalance {
      get { return pendingOpenBalance_; }
      set {
        pendingOpenBalance_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelBalanceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelBalanceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Balance != other.Balance) return false;
      if (PendingOpenBalance != other.PendingOpenBalance) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Balance != 0L) hash ^= Balance.GetHashCode();
      if (PendingOpenBalance != 0L) hash ^= PendingOpenBalance.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Balance != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Balance);
      }
      if (PendingOpenBalance != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(PendingOpenBalance);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Balance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Balance);
      }
      if (PendingOpenBalance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PendingOpenBalance);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelBalanceResponse other) {
      if (other == null) {
        return;
      }
      if (other.Balance != 0L) {
        Balance = other.Balance;
      }
      if (other.PendingOpenBalance != 0L) {
        PendingOpenBalance = other.PendingOpenBalance;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Balance = input.ReadInt64();
            break;
          }
          case 16: {
            PendingOpenBalance = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class QueryRoutesRequest : pb::IMessage<QueryRoutesRequest> {
    private static readonly pb::MessageParser<QueryRoutesRequest> _parser = new pb::MessageParser<QueryRoutesRequest>(() => new QueryRoutesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryRoutesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[78]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryRoutesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryRoutesRequest(QueryRoutesRequest other) : this() {
      pubKey_ = other.pubKey_;
      amt_ = other.amt_;
      amtMsat_ = other.amtMsat_;
      finalCltvDelta_ = other.finalCltvDelta_;
      feeLimit_ = other.feeLimit_ != null ? other.feeLimit_.Clone() : null;
      ignoredNodes_ = other.ignoredNodes_.Clone();
      ignoredEdges_ = other.ignoredEdges_.Clone();
      sourcePubKey_ = other.sourcePubKey_;
      useMissionControl_ = other.useMissionControl_;
      ignoredPairs_ = other.ignoredPairs_.Clone();
      cltvLimit_ = other.cltvLimit_;
      destCustomRecords_ = other.destCustomRecords_.Clone();
      outgoingChanId_ = other.outgoingChanId_;
      lastHopPubkey_ = other.lastHopPubkey_;
      routeHints_ = other.routeHints_.Clone();
      destFeatures_ = other.destFeatures_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryRoutesRequest Clone() {
      return new QueryRoutesRequest(this);
    }

    /// <summary>Field number for the "pub_key" field.</summary>
    public const int PubKeyFieldNumber = 1;
    private string pubKey_ = "";
    /// <summary>
    //// The 33-byte hex-encoded public key for the payment destination
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PubKey {
      get { return pubKey_; }
      set {
        pubKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amt" field.</summary>
    public const int AmtFieldNumber = 2;
    private long amt_;
    /// <summary>
    ///*
    ///The amount to send expressed in satoshis.
    ///
    ///The fields amt and amt_msat are mutually exclusive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amt {
      get { return amt_; }
      set {
        amt_ = value;
      }
    }

    /// <summary>Field number for the "amt_msat" field.</summary>
    public const int AmtMsatFieldNumber = 12;
    private long amtMsat_;
    /// <summary>
    ///*
    ///The amount to send expressed in millisatoshis.
    ///
    ///The fields amt and amt_msat are mutually exclusive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmtMsat {
      get { return amtMsat_; }
      set {
        amtMsat_ = value;
      }
    }

    /// <summary>Field number for the "final_cltv_delta" field.</summary>
    public const int FinalCltvDeltaFieldNumber = 4;
    private int finalCltvDelta_;
    /// <summary>
    ///*
    ///An optional CLTV delta from the current height that should be used for the
    ///timelock of the final hop. Note that unlike SendPayment, QueryRoutes does
    ///not add any additional block padding on top of final_ctlv_delta. This
    ///padding of a few blocks needs to be added manually or otherwise failures may
    ///happen when a block comes in while the payment is in flight.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FinalCltvDelta {
      get { return finalCltvDelta_; }
      set {
        finalCltvDelta_ = value;
      }
    }

    /// <summary>Field number for the "fee_limit" field.</summary>
    public const int FeeLimitFieldNumber = 5;
    private global::Lnrpc.FeeLimit feeLimit_;
    /// <summary>
    ///*
    ///The maximum number of satoshis that will be paid as a fee of the payment.
    ///This value can be represented either as a percentage of the amount being
    ///sent, or as a fixed amount of the maximum fee the user is willing the pay to
    ///send the payment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.FeeLimit FeeLimit {
      get { return feeLimit_; }
      set {
        feeLimit_ = value;
      }
    }

    /// <summary>Field number for the "ignored_nodes" field.</summary>
    public const int IgnoredNodesFieldNumber = 6;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_ignoredNodes_codec
        = pb::FieldCodec.ForBytes(50);
    private readonly pbc::RepeatedField<pb::ByteString> ignoredNodes_ = new pbc::RepeatedField<pb::ByteString>();
    /// <summary>
    ///*
    ///A list of nodes to ignore during path finding. When using REST, these fields
    ///must be encoded as base64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> IgnoredNodes {
      get { return ignoredNodes_; }
    }

    /// <summary>Field number for the "ignored_edges" field.</summary>
    public const int IgnoredEdgesFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Lnrpc.EdgeLocator> _repeated_ignoredEdges_codec
        = pb::FieldCodec.ForMessage(58, global::Lnrpc.EdgeLocator.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.EdgeLocator> ignoredEdges_ = new pbc::RepeatedField<global::Lnrpc.EdgeLocator>();
    /// <summary>
    ///*
    ///Deprecated. A list of edges to ignore during path finding.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.EdgeLocator> IgnoredEdges {
      get { return ignoredEdges_; }
    }

    /// <summary>Field number for the "source_pub_key" field.</summary>
    public const int SourcePubKeyFieldNumber = 8;
    private string sourcePubKey_ = "";
    /// <summary>
    ///*
    ///The source node where the request route should originated from. If empty,
    ///self is assumed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SourcePubKey {
      get { return sourcePubKey_; }
      set {
        sourcePubKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "use_mission_control" field.</summary>
    public const int UseMissionControlFieldNumber = 9;
    private bool useMissionControl_;
    /// <summary>
    ///*
    ///If set to true, edge probabilities from mission control will be used to get
    ///the optimal route.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseMissionControl {
      get { return useMissionControl_; }
      set {
        useMissionControl_ = value;
      }
    }

    /// <summary>Field number for the "ignored_pairs" field.</summary>
    public const int IgnoredPairsFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Lnrpc.NodePair> _repeated_ignoredPairs_codec
        = pb::FieldCodec.ForMessage(82, global::Lnrpc.NodePair.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.NodePair> ignoredPairs_ = new pbc::RepeatedField<global::Lnrpc.NodePair>();
    /// <summary>
    ///*
    ///A list of directed node pairs that will be ignored during path finding.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.NodePair> IgnoredPairs {
      get { return ignoredPairs_; }
    }

    /// <summary>Field number for the "cltv_limit" field.</summary>
    public const int CltvLimitFieldNumber = 11;
    private uint cltvLimit_;
    /// <summary>
    ///* 
    ///An optional maximum total time lock for the route. If the source is empty or
    ///ourselves, this should not exceed lnd's `--max-cltv-expiry` setting. If
    ///zero, then the value of `--max-cltv-expiry` is used as the limit.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CltvLimit {
      get { return cltvLimit_; }
      set {
        cltvLimit_ = value;
      }
    }

    /// <summary>Field number for the "dest_custom_records" field.</summary>
    public const int DestCustomRecordsFieldNumber = 13;
    private static readonly pbc::MapField<ulong, pb::ByteString>.Codec _map_destCustomRecords_codec
        = new pbc::MapField<ulong, pb::ByteString>.Codec(pb::FieldCodec.ForUInt64(8, 0UL), pb::FieldCodec.ForBytes(18, pb::ByteString.Empty), 106);
    private readonly pbc::MapField<ulong, pb::ByteString> destCustomRecords_ = new pbc::MapField<ulong, pb::ByteString>();
    /// <summary>
    ///* 
    ///An optional field that can be used to pass an arbitrary set of TLV records
    ///to a peer which understands the new records. This can be used to pass
    ///application specific data during the payment attempt. If the destination
    ///does not support the specified recrods, and error will be returned.
    ///Record types are required to be in the custom range >= 65536. When using
    ///REST, the values must be encoded as base64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<ulong, pb::ByteString> DestCustomRecords {
      get { return destCustomRecords_; }
    }

    /// <summary>Field number for the "outgoing_chan_id" field.</summary>
    public const int OutgoingChanIdFieldNumber = 14;
    private ulong outgoingChanId_;
    /// <summary>
    ///*
    ///The channel id of the channel that must be taken to the first hop. If zero,
    ///any channel may be used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong OutgoingChanId {
      get { return outgoingChanId_; }
      set {
        outgoingChanId_ = value;
      }
    }

    /// <summary>Field number for the "last_hop_pubkey" field.</summary>
    public const int LastHopPubkeyFieldNumber = 15;
    private pb::ByteString lastHopPubkey_ = pb::ByteString.Empty;
    /// <summary>
    ///*
    ///The pubkey of the last hop of the route. If empty, any hop may be used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString LastHopPubkey {
      get { return lastHopPubkey_; }
      set {
        lastHopPubkey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "route_hints" field.</summary>
    public const int RouteHintsFieldNumber = 16;
    private static readonly pb::FieldCodec<global::Lnrpc.RouteHint> _repeated_routeHints_codec
        = pb::FieldCodec.ForMessage(130, global::Lnrpc.RouteHint.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.RouteHint> routeHints_ = new pbc::RepeatedField<global::Lnrpc.RouteHint>();
    /// <summary>
    ///*
    ///Optional route hints to reach the destination through private channels.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.RouteHint> RouteHints {
      get { return routeHints_; }
    }

    /// <summary>Field number for the "dest_features" field.</summary>
    public const int DestFeaturesFieldNumber = 17;
    private static readonly pb::FieldCodec<global::Lnrpc.FeatureBit> _repeated_destFeatures_codec
        = pb::FieldCodec.ForEnum(138, x => (int) x, x => (global::Lnrpc.FeatureBit) x);
    private readonly pbc::RepeatedField<global::Lnrpc.FeatureBit> destFeatures_ = new pbc::RepeatedField<global::Lnrpc.FeatureBit>();
    /// <summary>
    ///*
    ///Features assumed to be supported by the final node. All transitive feature
    ///depdencies must also be set properly. For a given feature bit pair, either
    ///optional or remote may be set, but not both. If this field is nil or empty,
    ///the router will try to load destination features from the graph as a
    ///fallback.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.FeatureBit> DestFeatures {
      get { return destFeatures_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryRoutesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryRoutesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PubKey != other.PubKey) return false;
      if (Amt != other.Amt) return false;
      if (AmtMsat != other.AmtMsat) return false;
      if (FinalCltvDelta != other.FinalCltvDelta) return false;
      if (!object.Equals(FeeLimit, other.FeeLimit)) return false;
      if(!ignoredNodes_.Equals(other.ignoredNodes_)) return false;
      if(!ignoredEdges_.Equals(other.ignoredEdges_)) return false;
      if (SourcePubKey != other.SourcePubKey) return false;
      if (UseMissionControl != other.UseMissionControl) return false;
      if(!ignoredPairs_.Equals(other.ignoredPairs_)) return false;
      if (CltvLimit != other.CltvLimit) return false;
      if (!DestCustomRecords.Equals(other.DestCustomRecords)) return false;
      if (OutgoingChanId != other.OutgoingChanId) return false;
      if (LastHopPubkey != other.LastHopPubkey) return false;
      if(!routeHints_.Equals(other.routeHints_)) return false;
      if(!destFeatures_.Equals(other.destFeatures_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PubKey.Length != 0) hash ^= PubKey.GetHashCode();
      if (Amt != 0L) hash ^= Amt.GetHashCode();
      if (AmtMsat != 0L) hash ^= AmtMsat.GetHashCode();
      if (FinalCltvDelta != 0) hash ^= FinalCltvDelta.GetHashCode();
      if (feeLimit_ != null) hash ^= FeeLimit.GetHashCode();
      hash ^= ignoredNodes_.GetHashCode();
      hash ^= ignoredEdges_.GetHashCode();
      if (SourcePubKey.Length != 0) hash ^= SourcePubKey.GetHashCode();
      if (UseMissionControl != false) hash ^= UseMissionControl.GetHashCode();
      hash ^= ignoredPairs_.GetHashCode();
      if (CltvLimit != 0) hash ^= CltvLimit.GetHashCode();
      hash ^= DestCustomRecords.GetHashCode();
      if (OutgoingChanId != 0UL) hash ^= OutgoingChanId.GetHashCode();
      if (LastHopPubkey.Length != 0) hash ^= LastHopPubkey.GetHashCode();
      hash ^= routeHints_.GetHashCode();
      hash ^= destFeatures_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PubKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PubKey);
      }
      if (Amt != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Amt);
      }
      if (FinalCltvDelta != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FinalCltvDelta);
      }
      if (feeLimit_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(FeeLimit);
      }
      ignoredNodes_.WriteTo(output, _repeated_ignoredNodes_codec);
      ignoredEdges_.WriteTo(output, _repeated_ignoredEdges_codec);
      if (SourcePubKey.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(SourcePubKey);
      }
      if (UseMissionControl != false) {
        output.WriteRawTag(72);
        output.WriteBool(UseMissionControl);
      }
      ignoredPairs_.WriteTo(output, _repeated_ignoredPairs_codec);
      if (CltvLimit != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(CltvLimit);
      }
      if (AmtMsat != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(AmtMsat);
      }
      destCustomRecords_.WriteTo(output, _map_destCustomRecords_codec);
      if (OutgoingChanId != 0UL) {
        output.WriteRawTag(112);
        output.WriteUInt64(OutgoingChanId);
      }
      if (LastHopPubkey.Length != 0) {
        output.WriteRawTag(122);
        output.WriteBytes(LastHopPubkey);
      }
      routeHints_.WriteTo(output, _repeated_routeHints_codec);
      destFeatures_.WriteTo(output, _repeated_destFeatures_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PubKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PubKey);
      }
      if (Amt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amt);
      }
      if (AmtMsat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AmtMsat);
      }
      if (FinalCltvDelta != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FinalCltvDelta);
      }
      if (feeLimit_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FeeLimit);
      }
      size += ignoredNodes_.CalculateSize(_repeated_ignoredNodes_codec);
      size += ignoredEdges_.CalculateSize(_repeated_ignoredEdges_codec);
      if (SourcePubKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SourcePubKey);
      }
      if (UseMissionControl != false) {
        size += 1 + 1;
      }
      size += ignoredPairs_.CalculateSize(_repeated_ignoredPairs_codec);
      if (CltvLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CltvLimit);
      }
      size += destCustomRecords_.CalculateSize(_map_destCustomRecords_codec);
      if (OutgoingChanId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(OutgoingChanId);
      }
      if (LastHopPubkey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(LastHopPubkey);
      }
      size += routeHints_.CalculateSize(_repeated_routeHints_codec);
      size += destFeatures_.CalculateSize(_repeated_destFeatures_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryRoutesRequest other) {
      if (other == null) {
        return;
      }
      if (other.PubKey.Length != 0) {
        PubKey = other.PubKey;
      }
      if (other.Amt != 0L) {
        Amt = other.Amt;
      }
      if (other.AmtMsat != 0L) {
        AmtMsat = other.AmtMsat;
      }
      if (other.FinalCltvDelta != 0) {
        FinalCltvDelta = other.FinalCltvDelta;
      }
      if (other.feeLimit_ != null) {
        if (feeLimit_ == null) {
          FeeLimit = new global::Lnrpc.FeeLimit();
        }
        FeeLimit.MergeFrom(other.FeeLimit);
      }
      ignoredNodes_.Add(other.ignoredNodes_);
      ignoredEdges_.Add(other.ignoredEdges_);
      if (other.SourcePubKey.Length != 0) {
        SourcePubKey = other.SourcePubKey;
      }
      if (other.UseMissionControl != false) {
        UseMissionControl = other.UseMissionControl;
      }
      ignoredPairs_.Add(other.ignoredPairs_);
      if (other.CltvLimit != 0) {
        CltvLimit = other.CltvLimit;
      }
      destCustomRecords_.Add(other.destCustomRecords_);
      if (other.OutgoingChanId != 0UL) {
        OutgoingChanId = other.OutgoingChanId;
      }
      if (other.LastHopPubkey.Length != 0) {
        LastHopPubkey = other.LastHopPubkey;
      }
      routeHints_.Add(other.routeHints_);
      destFeatures_.Add(other.destFeatures_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PubKey = input.ReadString();
            break;
          }
          case 16: {
            Amt = input.ReadInt64();
            break;
          }
          case 32: {
            FinalCltvDelta = input.ReadInt32();
            break;
          }
          case 42: {
            if (feeLimit_ == null) {
              FeeLimit = new global::Lnrpc.FeeLimit();
            }
            input.ReadMessage(FeeLimit);
            break;
          }
          case 50: {
            ignoredNodes_.AddEntriesFrom(input, _repeated_ignoredNodes_codec);
            break;
          }
          case 58: {
            ignoredEdges_.AddEntriesFrom(input, _repeated_ignoredEdges_codec);
            break;
          }
          case 66: {
            SourcePubKey = input.ReadString();
            break;
          }
          case 72: {
            UseMissionControl = input.ReadBool();
            break;
          }
          case 82: {
            ignoredPairs_.AddEntriesFrom(input, _repeated_ignoredPairs_codec);
            break;
          }
          case 88: {
            CltvLimit = input.ReadUInt32();
            break;
          }
          case 96: {
            AmtMsat = input.ReadInt64();
            break;
          }
          case 106: {
            destCustomRecords_.AddEntriesFrom(input, _map_destCustomRecords_codec);
            break;
          }
          case 112: {
            OutgoingChanId = input.ReadUInt64();
            break;
          }
          case 122: {
            LastHopPubkey = input.ReadBytes();
            break;
          }
          case 130: {
            routeHints_.AddEntriesFrom(input, _repeated_routeHints_codec);
            break;
          }
          case 138:
          case 136: {
            destFeatures_.AddEntriesFrom(input, _repeated_destFeatures_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NodePair : pb::IMessage<NodePair> {
    private static readonly pb::MessageParser<NodePair> _parser = new pb::MessageParser<NodePair>(() => new NodePair());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodePair> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[79]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodePair() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodePair(NodePair other) : this() {
      from_ = other.from_;
      to_ = other.to_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodePair Clone() {
      return new NodePair(this);
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 1;
    private pb::ByteString from_ = pb::ByteString.Empty;
    /// <summary>
    ///*
    ///The sending node of the pair. When using REST, this field must be encoded as
    ///base64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString From {
      get { return from_; }
      set {
        from_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 2;
    private pb::ByteString to_ = pb::ByteString.Empty;
    /// <summary>
    ///*
    ///The receiving node of the pair. When using REST, this field must be encoded
    ///as base64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString To {
      get { return to_; }
      set {
        to_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodePair);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodePair other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (From != other.From) return false;
      if (To != other.To) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (From.Length != 0) hash ^= From.GetHashCode();
      if (To.Length != 0) hash ^= To.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (From.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(From);
      }
      if (To.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(To);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (From.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(From);
      }
      if (To.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(To);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodePair other) {
      if (other == null) {
        return;
      }
      if (other.From.Length != 0) {
        From = other.From;
      }
      if (other.To.Length != 0) {
        To = other.To;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            From = input.ReadBytes();
            break;
          }
          case 18: {
            To = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EdgeLocator : pb::IMessage<EdgeLocator> {
    private static readonly pb::MessageParser<EdgeLocator> _parser = new pb::MessageParser<EdgeLocator>(() => new EdgeLocator());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EdgeLocator> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[80]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EdgeLocator() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EdgeLocator(EdgeLocator other) : this() {
      channelId_ = other.channelId_;
      directionReverse_ = other.directionReverse_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EdgeLocator Clone() {
      return new EdgeLocator(this);
    }

    /// <summary>Field number for the "channel_id" field.</summary>
    public const int ChannelIdFieldNumber = 1;
    private ulong channelId_;
    /// <summary>
    //// The short channel id of this edge.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ChannelId {
      get { return channelId_; }
      set {
        channelId_ = value;
      }
    }

    /// <summary>Field number for the "direction_reverse" field.</summary>
    public const int DirectionReverseFieldNumber = 2;
    private bool directionReverse_;
    /// <summary>
    ///*
    ///The direction of this edge. If direction_reverse is false, the direction
    ///of this edge is from the channel endpoint with the lexicographically smaller
    ///pub key to the endpoint with the larger pub key. If direction_reverse is
    ///is true, the edge goes the other way.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DirectionReverse {
      get { return directionReverse_; }
      set {
        directionReverse_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EdgeLocator);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EdgeLocator other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChannelId != other.ChannelId) return false;
      if (DirectionReverse != other.DirectionReverse) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChannelId != 0UL) hash ^= ChannelId.GetHashCode();
      if (DirectionReverse != false) hash ^= DirectionReverse.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChannelId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ChannelId);
      }
      if (DirectionReverse != false) {
        output.WriteRawTag(16);
        output.WriteBool(DirectionReverse);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChannelId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ChannelId);
      }
      if (DirectionReverse != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EdgeLocator other) {
      if (other == null) {
        return;
      }
      if (other.ChannelId != 0UL) {
        ChannelId = other.ChannelId;
      }
      if (other.DirectionReverse != false) {
        DirectionReverse = other.DirectionReverse;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChannelId = input.ReadUInt64();
            break;
          }
          case 16: {
            DirectionReverse = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class QueryRoutesResponse : pb::IMessage<QueryRoutesResponse> {
    private static readonly pb::MessageParser<QueryRoutesResponse> _parser = new pb::MessageParser<QueryRoutesResponse>(() => new QueryRoutesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryRoutesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[81]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryRoutesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryRoutesResponse(QueryRoutesResponse other) : this() {
      routes_ = other.routes_.Clone();
      successProb_ = other.successProb_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryRoutesResponse Clone() {
      return new QueryRoutesResponse(this);
    }

    /// <summary>Field number for the "routes" field.</summary>
    public const int RoutesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Lnrpc.Route> _repeated_routes_codec
        = pb::FieldCodec.ForMessage(10, global::Lnrpc.Route.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.Route> routes_ = new pbc::RepeatedField<global::Lnrpc.Route>();
    /// <summary>
    ///*
    ///The route that results from the path finding operation. This is still a
    ///repeated field to retain backwards compatibility.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.Route> Routes {
      get { return routes_; }
    }

    /// <summary>Field number for the "success_prob" field.</summary>
    public const int SuccessProbFieldNumber = 2;
    private double successProb_;
    /// <summary>
    ///*
    ///The success probability of the returned route based on the current mission
    ///control state. [EXPERIMENTAL]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double SuccessProb {
      get { return successProb_; }
      set {
        successProb_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryRoutesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryRoutesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!routes_.Equals(other.routes_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SuccessProb, other.SuccessProb)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= routes_.GetHashCode();
      if (SuccessProb != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SuccessProb);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      routes_.WriteTo(output, _repeated_routes_codec);
      if (SuccessProb != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(SuccessProb);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += routes_.CalculateSize(_repeated_routes_codec);
      if (SuccessProb != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryRoutesResponse other) {
      if (other == null) {
        return;
      }
      routes_.Add(other.routes_);
      if (other.SuccessProb != 0D) {
        SuccessProb = other.SuccessProb;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            routes_.AddEntriesFrom(input, _repeated_routes_codec);
            break;
          }
          case 17: {
            SuccessProb = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Hop : pb::IMessage<Hop> {
    private static readonly pb::MessageParser<Hop> _parser = new pb::MessageParser<Hop>(() => new Hop());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Hop> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[82]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hop() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hop(Hop other) : this() {
      chanId_ = other.chanId_;
      chanCapacity_ = other.chanCapacity_;
      amtToForward_ = other.amtToForward_;
      fee_ = other.fee_;
      expiry_ = other.expiry_;
      amtToForwardMsat_ = other.amtToForwardMsat_;
      feeMsat_ = other.feeMsat_;
      pubKey_ = other.pubKey_;
      tlvPayload_ = other.tlvPayload_;
      mppRecord_ = other.mppRecord_ != null ? other.mppRecord_.Clone() : null;
      customRecords_ = other.customRecords_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Hop Clone() {
      return new Hop(this);
    }

    /// <summary>Field number for the "chan_id" field.</summary>
    public const int ChanIdFieldNumber = 1;
    private ulong chanId_;
    /// <summary>
    ///*
    ///The unique channel ID for the channel. The first 3 bytes are the block
    ///height, the next 3 the index within the block, and the last 2 bytes are the
    ///output index for the channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ChanId {
      get { return chanId_; }
      set {
        chanId_ = value;
      }
    }

    /// <summary>Field number for the "chan_capacity" field.</summary>
    public const int ChanCapacityFieldNumber = 2;
    private long chanCapacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ChanCapacity {
      get { return chanCapacity_; }
      set {
        chanCapacity_ = value;
      }
    }

    /// <summary>Field number for the "amt_to_forward" field.</summary>
    public const int AmtToForwardFieldNumber = 3;
    private long amtToForward_;
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmtToForward {
      get { return amtToForward_; }
      set {
        amtToForward_ = value;
      }
    }

    /// <summary>Field number for the "fee" field.</summary>
    public const int FeeFieldNumber = 4;
    private long fee_;
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Fee {
      get { return fee_; }
      set {
        fee_ = value;
      }
    }

    /// <summary>Field number for the "expiry" field.</summary>
    public const int ExpiryFieldNumber = 5;
    private uint expiry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Expiry {
      get { return expiry_; }
      set {
        expiry_ = value;
      }
    }

    /// <summary>Field number for the "amt_to_forward_msat" field.</summary>
    public const int AmtToForwardMsatFieldNumber = 6;
    private long amtToForwardMsat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmtToForwardMsat {
      get { return amtToForwardMsat_; }
      set {
        amtToForwardMsat_ = value;
      }
    }

    /// <summary>Field number for the "fee_msat" field.</summary>
    public const int FeeMsatFieldNumber = 7;
    private long feeMsat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FeeMsat {
      get { return feeMsat_; }
      set {
        feeMsat_ = value;
      }
    }

    /// <summary>Field number for the "pub_key" field.</summary>
    public const int PubKeyFieldNumber = 8;
    private string pubKey_ = "";
    /// <summary>
    ///*
    ///An optional public key of the hop. If the public key is given, the payment
    ///can be executed without relying on a copy of the channel graph.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PubKey {
      get { return pubKey_; }
      set {
        pubKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tlv_payload" field.</summary>
    public const int TlvPayloadFieldNumber = 9;
    private bool tlvPayload_;
    /// <summary>
    ///* 
    ///If set to true, then this hop will be encoded using the new variable length
    ///TLV format. Note that if any custom tlv_records below are specified, then
    ///this field MUST be set to true for them to be encoded properly.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TlvPayload {
      get { return tlvPayload_; }
      set {
        tlvPayload_ = value;
      }
    }

    /// <summary>Field number for the "mpp_record" field.</summary>
    public const int MppRecordFieldNumber = 10;
    private global::Lnrpc.MPPRecord mppRecord_;
    /// <summary>
    ///*
    ///An optional TLV record tha singals the use of an MPP payment. If present,
    ///the receiver will enforce that that the same mpp_record is included in the
    ///final hop payload of all non-zero payments in the HTLC set. If empty, a
    ///regular single-shot payment is or was attempted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.MPPRecord MppRecord {
      get { return mppRecord_; }
      set {
        mppRecord_ = value;
      }
    }

    /// <summary>Field number for the "custom_records" field.</summary>
    public const int CustomRecordsFieldNumber = 11;
    private static readonly pbc::MapField<ulong, pb::ByteString>.Codec _map_customRecords_codec
        = new pbc::MapField<ulong, pb::ByteString>.Codec(pb::FieldCodec.ForUInt64(8, 0UL), pb::FieldCodec.ForBytes(18, pb::ByteString.Empty), 90);
    private readonly pbc::MapField<ulong, pb::ByteString> customRecords_ = new pbc::MapField<ulong, pb::ByteString>();
    /// <summary>
    ///*
    ///An optional set of key-value TLV records. This is useful within the context
    ///of the SendToRoute call as it allows callers to specify arbitrary K-V pairs
    ///to drop off at each hop within the onion.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<ulong, pb::ByteString> CustomRecords {
      get { return customRecords_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Hop);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Hop other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChanId != other.ChanId) return false;
      if (ChanCapacity != other.ChanCapacity) return false;
      if (AmtToForward != other.AmtToForward) return false;
      if (Fee != other.Fee) return false;
      if (Expiry != other.Expiry) return false;
      if (AmtToForwardMsat != other.AmtToForwardMsat) return false;
      if (FeeMsat != other.FeeMsat) return false;
      if (PubKey != other.PubKey) return false;
      if (TlvPayload != other.TlvPayload) return false;
      if (!object.Equals(MppRecord, other.MppRecord)) return false;
      if (!CustomRecords.Equals(other.CustomRecords)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChanId != 0UL) hash ^= ChanId.GetHashCode();
      if (ChanCapacity != 0L) hash ^= ChanCapacity.GetHashCode();
      if (AmtToForward != 0L) hash ^= AmtToForward.GetHashCode();
      if (Fee != 0L) hash ^= Fee.GetHashCode();
      if (Expiry != 0) hash ^= Expiry.GetHashCode();
      if (AmtToForwardMsat != 0L) hash ^= AmtToForwardMsat.GetHashCode();
      if (FeeMsat != 0L) hash ^= FeeMsat.GetHashCode();
      if (PubKey.Length != 0) hash ^= PubKey.GetHashCode();
      if (TlvPayload != false) hash ^= TlvPayload.GetHashCode();
      if (mppRecord_ != null) hash ^= MppRecord.GetHashCode();
      hash ^= CustomRecords.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChanId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ChanId);
      }
      if (ChanCapacity != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ChanCapacity);
      }
      if (AmtToForward != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(AmtToForward);
      }
      if (Fee != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Fee);
      }
      if (Expiry != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Expiry);
      }
      if (AmtToForwardMsat != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(AmtToForwardMsat);
      }
      if (FeeMsat != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(FeeMsat);
      }
      if (PubKey.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(PubKey);
      }
      if (TlvPayload != false) {
        output.WriteRawTag(72);
        output.WriteBool(TlvPayload);
      }
      if (mppRecord_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(MppRecord);
      }
      customRecords_.WriteTo(output, _map_customRecords_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChanId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ChanId);
      }
      if (ChanCapacity != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ChanCapacity);
      }
      if (AmtToForward != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AmtToForward);
      }
      if (Fee != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Fee);
      }
      if (Expiry != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Expiry);
      }
      if (AmtToForwardMsat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AmtToForwardMsat);
      }
      if (FeeMsat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FeeMsat);
      }
      if (PubKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PubKey);
      }
      if (TlvPayload != false) {
        size += 1 + 1;
      }
      if (mppRecord_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MppRecord);
      }
      size += customRecords_.CalculateSize(_map_customRecords_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Hop other) {
      if (other == null) {
        return;
      }
      if (other.ChanId != 0UL) {
        ChanId = other.ChanId;
      }
      if (other.ChanCapacity != 0L) {
        ChanCapacity = other.ChanCapacity;
      }
      if (other.AmtToForward != 0L) {
        AmtToForward = other.AmtToForward;
      }
      if (other.Fee != 0L) {
        Fee = other.Fee;
      }
      if (other.Expiry != 0) {
        Expiry = other.Expiry;
      }
      if (other.AmtToForwardMsat != 0L) {
        AmtToForwardMsat = other.AmtToForwardMsat;
      }
      if (other.FeeMsat != 0L) {
        FeeMsat = other.FeeMsat;
      }
      if (other.PubKey.Length != 0) {
        PubKey = other.PubKey;
      }
      if (other.TlvPayload != false) {
        TlvPayload = other.TlvPayload;
      }
      if (other.mppRecord_ != null) {
        if (mppRecord_ == null) {
          MppRecord = new global::Lnrpc.MPPRecord();
        }
        MppRecord.MergeFrom(other.MppRecord);
      }
      customRecords_.Add(other.customRecords_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChanId = input.ReadUInt64();
            break;
          }
          case 16: {
            ChanCapacity = input.ReadInt64();
            break;
          }
          case 24: {
            AmtToForward = input.ReadInt64();
            break;
          }
          case 32: {
            Fee = input.ReadInt64();
            break;
          }
          case 40: {
            Expiry = input.ReadUInt32();
            break;
          }
          case 48: {
            AmtToForwardMsat = input.ReadInt64();
            break;
          }
          case 56: {
            FeeMsat = input.ReadInt64();
            break;
          }
          case 66: {
            PubKey = input.ReadString();
            break;
          }
          case 72: {
            TlvPayload = input.ReadBool();
            break;
          }
          case 82: {
            if (mppRecord_ == null) {
              MppRecord = new global::Lnrpc.MPPRecord();
            }
            input.ReadMessage(MppRecord);
            break;
          }
          case 90: {
            customRecords_.AddEntriesFrom(input, _map_customRecords_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MPPRecord : pb::IMessage<MPPRecord> {
    private static readonly pb::MessageParser<MPPRecord> _parser = new pb::MessageParser<MPPRecord>(() => new MPPRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MPPRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[83]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MPPRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MPPRecord(MPPRecord other) : this() {
      paymentAddr_ = other.paymentAddr_;
      totalAmtMsat_ = other.totalAmtMsat_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MPPRecord Clone() {
      return new MPPRecord(this);
    }

    /// <summary>Field number for the "payment_addr" field.</summary>
    public const int PaymentAddrFieldNumber = 11;
    private pb::ByteString paymentAddr_ = pb::ByteString.Empty;
    /// <summary>
    ///*
    ///A unique, random identifier used to authenticate the sender as the intended
    ///payer of a multi-path payment. The payment_addr must be the same for all
    ///subpayments, and match the payment_addr provided in the receiver's invoice.
    ///The same payment_addr must be used on all subpayments.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PaymentAddr {
      get { return paymentAddr_; }
      set {
        paymentAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "total_amt_msat" field.</summary>
    public const int TotalAmtMsatFieldNumber = 10;
    private long totalAmtMsat_;
    /// <summary>
    ///*
    ///The total amount in milli-satoshis being sent as part of a larger multi-path
    ///payment. The caller is responsible for ensuring subpayments to the same node
    ///and payment_hash sum exactly to total_amt_msat. The same
    ///total_amt_msat must be used on all subpayments.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalAmtMsat {
      get { return totalAmtMsat_; }
      set {
        totalAmtMsat_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MPPRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MPPRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PaymentAddr != other.PaymentAddr) return false;
      if (TotalAmtMsat != other.TotalAmtMsat) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PaymentAddr.Length != 0) hash ^= PaymentAddr.GetHashCode();
      if (TotalAmtMsat != 0L) hash ^= TotalAmtMsat.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TotalAmtMsat != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(TotalAmtMsat);
      }
      if (PaymentAddr.Length != 0) {
        output.WriteRawTag(90);
        output.WriteBytes(PaymentAddr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PaymentAddr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PaymentAddr);
      }
      if (TotalAmtMsat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalAmtMsat);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MPPRecord other) {
      if (other == null) {
        return;
      }
      if (other.PaymentAddr.Length != 0) {
        PaymentAddr = other.PaymentAddr;
      }
      if (other.TotalAmtMsat != 0L) {
        TotalAmtMsat = other.TotalAmtMsat;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 80: {
            TotalAmtMsat = input.ReadInt64();
            break;
          }
          case 90: {
            PaymentAddr = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  ///A path through the channel graph which runs over one or more channels in
  ///succession. This struct carries all the information required to craft the
  ///Sphinx onion packet, and send the payment along the first hop in the path. A
  ///route is only selected as valid if all the channels have sufficient capacity to
  ///carry the initial payment amount after fees are accounted for.
  /// </summary>
  public sealed partial class Route : pb::IMessage<Route> {
    private static readonly pb::MessageParser<Route> _parser = new pb::MessageParser<Route>(() => new Route());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Route> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[84]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Route() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Route(Route other) : this() {
      totalTimeLock_ = other.totalTimeLock_;
      totalFees_ = other.totalFees_;
      totalAmt_ = other.totalAmt_;
      hops_ = other.hops_.Clone();
      totalFeesMsat_ = other.totalFeesMsat_;
      totalAmtMsat_ = other.totalAmtMsat_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Route Clone() {
      return new Route(this);
    }

    /// <summary>Field number for the "total_time_lock" field.</summary>
    public const int TotalTimeLockFieldNumber = 1;
    private uint totalTimeLock_;
    /// <summary>
    ///*
    ///The cumulative (final) time lock across the entire route. This is the CLTV
    ///value that should be extended to the first hop in the route. All other hops
    ///will decrement the time-lock as advertised, leaving enough time for all
    ///hops to wait for or present the payment preimage to complete the payment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalTimeLock {
      get { return totalTimeLock_; }
      set {
        totalTimeLock_ = value;
      }
    }

    /// <summary>Field number for the "total_fees" field.</summary>
    public const int TotalFeesFieldNumber = 2;
    private long totalFees_;
    /// <summary>
    ///*
    ///The sum of the fees paid at each hop within the final route. In the case
    ///of a one-hop payment, this value will be zero as we don't need to pay a fee
    ///to ourselves.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalFees {
      get { return totalFees_; }
      set {
        totalFees_ = value;
      }
    }

    /// <summary>Field number for the "total_amt" field.</summary>
    public const int TotalAmtFieldNumber = 3;
    private long totalAmt_;
    /// <summary>
    ///*
    ///The total amount of funds required to complete a payment over this route.
    ///This value includes the cumulative fees at each hop. As a result, the HTLC
    ///extended to the first-hop in the route will need to have at least this many
    ///satoshis, otherwise the route will fail at an intermediate node due to an
    ///insufficient amount of fees.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalAmt {
      get { return totalAmt_; }
      set {
        totalAmt_ = value;
      }
    }

    /// <summary>Field number for the "hops" field.</summary>
    public const int HopsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Lnrpc.Hop> _repeated_hops_codec
        = pb::FieldCodec.ForMessage(34, global::Lnrpc.Hop.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.Hop> hops_ = new pbc::RepeatedField<global::Lnrpc.Hop>();
    /// <summary>
    ///*
    ///Contains details concerning the specific forwarding details at each hop.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.Hop> Hops {
      get { return hops_; }
    }

    /// <summary>Field number for the "total_fees_msat" field.</summary>
    public const int TotalFeesMsatFieldNumber = 5;
    private long totalFeesMsat_;
    /// <summary>
    ///*
    ///The total fees in millisatoshis.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalFeesMsat {
      get { return totalFeesMsat_; }
      set {
        totalFeesMsat_ = value;
      }
    }

    /// <summary>Field number for the "total_amt_msat" field.</summary>
    public const int TotalAmtMsatFieldNumber = 6;
    private long totalAmtMsat_;
    /// <summary>
    ///*
    ///The total amount in millisatoshis.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalAmtMsat {
      get { return totalAmtMsat_; }
      set {
        totalAmtMsat_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Route);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Route other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TotalTimeLock != other.TotalTimeLock) return false;
      if (TotalFees != other.TotalFees) return false;
      if (TotalAmt != other.TotalAmt) return false;
      if(!hops_.Equals(other.hops_)) return false;
      if (TotalFeesMsat != other.TotalFeesMsat) return false;
      if (TotalAmtMsat != other.TotalAmtMsat) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TotalTimeLock != 0) hash ^= TotalTimeLock.GetHashCode();
      if (TotalFees != 0L) hash ^= TotalFees.GetHashCode();
      if (TotalAmt != 0L) hash ^= TotalAmt.GetHashCode();
      hash ^= hops_.GetHashCode();
      if (TotalFeesMsat != 0L) hash ^= TotalFeesMsat.GetHashCode();
      if (TotalAmtMsat != 0L) hash ^= TotalAmtMsat.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TotalTimeLock != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TotalTimeLock);
      }
      if (TotalFees != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TotalFees);
      }
      if (TotalAmt != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TotalAmt);
      }
      hops_.WriteTo(output, _repeated_hops_codec);
      if (TotalFeesMsat != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(TotalFeesMsat);
      }
      if (TotalAmtMsat != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(TotalAmtMsat);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TotalTimeLock != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalTimeLock);
      }
      if (TotalFees != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalFees);
      }
      if (TotalAmt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalAmt);
      }
      size += hops_.CalculateSize(_repeated_hops_codec);
      if (TotalFeesMsat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalFeesMsat);
      }
      if (TotalAmtMsat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalAmtMsat);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Route other) {
      if (other == null) {
        return;
      }
      if (other.TotalTimeLock != 0) {
        TotalTimeLock = other.TotalTimeLock;
      }
      if (other.TotalFees != 0L) {
        TotalFees = other.TotalFees;
      }
      if (other.TotalAmt != 0L) {
        TotalAmt = other.TotalAmt;
      }
      hops_.Add(other.hops_);
      if (other.TotalFeesMsat != 0L) {
        TotalFeesMsat = other.TotalFeesMsat;
      }
      if (other.TotalAmtMsat != 0L) {
        TotalAmtMsat = other.TotalAmtMsat;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TotalTimeLock = input.ReadUInt32();
            break;
          }
          case 16: {
            TotalFees = input.ReadInt64();
            break;
          }
          case 24: {
            TotalAmt = input.ReadInt64();
            break;
          }
          case 34: {
            hops_.AddEntriesFrom(input, _repeated_hops_codec);
            break;
          }
          case 40: {
            TotalFeesMsat = input.ReadInt64();
            break;
          }
          case 48: {
            TotalAmtMsat = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NodeInfoRequest : pb::IMessage<NodeInfoRequest> {
    private static readonly pb::MessageParser<NodeInfoRequest> _parser = new pb::MessageParser<NodeInfoRequest>(() => new NodeInfoRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeInfoRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[85]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeInfoRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeInfoRequest(NodeInfoRequest other) : this() {
      pubKey_ = other.pubKey_;
      includeChannels_ = other.includeChannels_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeInfoRequest Clone() {
      return new NodeInfoRequest(this);
    }

    /// <summary>Field number for the "pub_key" field.</summary>
    public const int PubKeyFieldNumber = 1;
    private string pubKey_ = "";
    /// <summary>
    //// The 33-byte hex-encoded compressed public of the target node 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PubKey {
      get { return pubKey_; }
      set {
        pubKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "include_channels" field.</summary>
    public const int IncludeChannelsFieldNumber = 2;
    private bool includeChannels_;
    /// <summary>
    //// If true, will include all known channels associated with the node.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludeChannels {
      get { return includeChannels_; }
      set {
        includeChannels_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeInfoRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeInfoRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PubKey != other.PubKey) return false;
      if (IncludeChannels != other.IncludeChannels) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PubKey.Length != 0) hash ^= PubKey.GetHashCode();
      if (IncludeChannels != false) hash ^= IncludeChannels.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PubKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PubKey);
      }
      if (IncludeChannels != false) {
        output.WriteRawTag(16);
        output.WriteBool(IncludeChannels);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PubKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PubKey);
      }
      if (IncludeChannels != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeInfoRequest other) {
      if (other == null) {
        return;
      }
      if (other.PubKey.Length != 0) {
        PubKey = other.PubKey;
      }
      if (other.IncludeChannels != false) {
        IncludeChannels = other.IncludeChannels;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PubKey = input.ReadString();
            break;
          }
          case 16: {
            IncludeChannels = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NodeInfo : pb::IMessage<NodeInfo> {
    private static readonly pb::MessageParser<NodeInfo> _parser = new pb::MessageParser<NodeInfo>(() => new NodeInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[86]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeInfo(NodeInfo other) : this() {
      node_ = other.node_ != null ? other.node_.Clone() : null;
      numChannels_ = other.numChannels_;
      totalCapacity_ = other.totalCapacity_;
      channels_ = other.channels_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeInfo Clone() {
      return new NodeInfo(this);
    }

    /// <summary>Field number for the "node" field.</summary>
    public const int NodeFieldNumber = 1;
    private global::Lnrpc.LightningNode node_;
    /// <summary>
    ///*
    ///An individual vertex/node within the channel graph. A node is
    ///connected to other nodes by one or more channel edges emanating from it. As
    ///the graph is directed, a node will also have an incoming edge attached to
    ///it for each outgoing edge.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.LightningNode Node {
      get { return node_; }
      set {
        node_ = value;
      }
    }

    /// <summary>Field number for the "num_channels" field.</summary>
    public const int NumChannelsFieldNumber = 2;
    private uint numChannels_;
    /// <summary>
    //// The total number of channels for the node.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumChannels {
      get { return numChannels_; }
      set {
        numChannels_ = value;
      }
    }

    /// <summary>Field number for the "total_capacity" field.</summary>
    public const int TotalCapacityFieldNumber = 3;
    private long totalCapacity_;
    /// <summary>
    //// The sum of all channels capacity for the node, denominated in satoshis.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalCapacity {
      get { return totalCapacity_; }
      set {
        totalCapacity_ = value;
      }
    }

    /// <summary>Field number for the "channels" field.</summary>
    public const int ChannelsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Lnrpc.ChannelEdge> _repeated_channels_codec
        = pb::FieldCodec.ForMessage(34, global::Lnrpc.ChannelEdge.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.ChannelEdge> channels_ = new pbc::RepeatedField<global::Lnrpc.ChannelEdge>();
    /// <summary>
    //// A list of all public channels for the node.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.ChannelEdge> Channels {
      get { return channels_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Node, other.Node)) return false;
      if (NumChannels != other.NumChannels) return false;
      if (TotalCapacity != other.TotalCapacity) return false;
      if(!channels_.Equals(other.channels_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (node_ != null) hash ^= Node.GetHashCode();
      if (NumChannels != 0) hash ^= NumChannels.GetHashCode();
      if (TotalCapacity != 0L) hash ^= TotalCapacity.GetHashCode();
      hash ^= channels_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (node_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Node);
      }
      if (NumChannels != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(NumChannels);
      }
      if (TotalCapacity != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TotalCapacity);
      }
      channels_.WriteTo(output, _repeated_channels_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (node_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Node);
      }
      if (NumChannels != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumChannels);
      }
      if (TotalCapacity != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalCapacity);
      }
      size += channels_.CalculateSize(_repeated_channels_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeInfo other) {
      if (other == null) {
        return;
      }
      if (other.node_ != null) {
        if (node_ == null) {
          Node = new global::Lnrpc.LightningNode();
        }
        Node.MergeFrom(other.Node);
      }
      if (other.NumChannels != 0) {
        NumChannels = other.NumChannels;
      }
      if (other.TotalCapacity != 0L) {
        TotalCapacity = other.TotalCapacity;
      }
      channels_.Add(other.channels_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (node_ == null) {
              Node = new global::Lnrpc.LightningNode();
            }
            input.ReadMessage(Node);
            break;
          }
          case 16: {
            NumChannels = input.ReadUInt32();
            break;
          }
          case 24: {
            TotalCapacity = input.ReadInt64();
            break;
          }
          case 34: {
            channels_.AddEntriesFrom(input, _repeated_channels_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  ///An individual vertex/node within the channel graph. A node is
  ///connected to other nodes by one or more channel edges emanating from it. As the
  ///graph is directed, a node will also have an incoming edge attached to it for
  ///each outgoing edge.
  /// </summary>
  public sealed partial class LightningNode : pb::IMessage<LightningNode> {
    private static readonly pb::MessageParser<LightningNode> _parser = new pb::MessageParser<LightningNode>(() => new LightningNode());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LightningNode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[87]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LightningNode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LightningNode(LightningNode other) : this() {
      lastUpdate_ = other.lastUpdate_;
      pubKey_ = other.pubKey_;
      alias_ = other.alias_;
      addresses_ = other.addresses_.Clone();
      color_ = other.color_;
      features_ = other.features_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LightningNode Clone() {
      return new LightningNode(this);
    }

    /// <summary>Field number for the "last_update" field.</summary>
    public const int LastUpdateFieldNumber = 1;
    private uint lastUpdate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastUpdate {
      get { return lastUpdate_; }
      set {
        lastUpdate_ = value;
      }
    }

    /// <summary>Field number for the "pub_key" field.</summary>
    public const int PubKeyFieldNumber = 2;
    private string pubKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PubKey {
      get { return pubKey_; }
      set {
        pubKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "alias" field.</summary>
    public const int AliasFieldNumber = 3;
    private string alias_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Alias {
      get { return alias_; }
      set {
        alias_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "addresses" field.</summary>
    public const int AddressesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Lnrpc.NodeAddress> _repeated_addresses_codec
        = pb::FieldCodec.ForMessage(34, global::Lnrpc.NodeAddress.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.NodeAddress> addresses_ = new pbc::RepeatedField<global::Lnrpc.NodeAddress>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.NodeAddress> Addresses {
      get { return addresses_; }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 5;
    private string color_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Color {
      get { return color_; }
      set {
        color_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "features" field.</summary>
    public const int FeaturesFieldNumber = 6;
    private static readonly pbc::MapField<uint, global::Lnrpc.Feature>.Codec _map_features_codec
        = new pbc::MapField<uint, global::Lnrpc.Feature>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForMessage(18, global::Lnrpc.Feature.Parser), 50);
    private readonly pbc::MapField<uint, global::Lnrpc.Feature> features_ = new pbc::MapField<uint, global::Lnrpc.Feature>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, global::Lnrpc.Feature> Features {
      get { return features_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LightningNode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LightningNode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LastUpdate != other.LastUpdate) return false;
      if (PubKey != other.PubKey) return false;
      if (Alias != other.Alias) return false;
      if(!addresses_.Equals(other.addresses_)) return false;
      if (Color != other.Color) return false;
      if (!Features.Equals(other.Features)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LastUpdate != 0) hash ^= LastUpdate.GetHashCode();
      if (PubKey.Length != 0) hash ^= PubKey.GetHashCode();
      if (Alias.Length != 0) hash ^= Alias.GetHashCode();
      hash ^= addresses_.GetHashCode();
      if (Color.Length != 0) hash ^= Color.GetHashCode();
      hash ^= Features.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LastUpdate != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(LastUpdate);
      }
      if (PubKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PubKey);
      }
      if (Alias.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Alias);
      }
      addresses_.WriteTo(output, _repeated_addresses_codec);
      if (Color.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Color);
      }
      features_.WriteTo(output, _map_features_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LastUpdate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastUpdate);
      }
      if (PubKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PubKey);
      }
      if (Alias.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Alias);
      }
      size += addresses_.CalculateSize(_repeated_addresses_codec);
      if (Color.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Color);
      }
      size += features_.CalculateSize(_map_features_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LightningNode other) {
      if (other == null) {
        return;
      }
      if (other.LastUpdate != 0) {
        LastUpdate = other.LastUpdate;
      }
      if (other.PubKey.Length != 0) {
        PubKey = other.PubKey;
      }
      if (other.Alias.Length != 0) {
        Alias = other.Alias;
      }
      addresses_.Add(other.addresses_);
      if (other.Color.Length != 0) {
        Color = other.Color;
      }
      features_.Add(other.features_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LastUpdate = input.ReadUInt32();
            break;
          }
          case 18: {
            PubKey = input.ReadString();
            break;
          }
          case 26: {
            Alias = input.ReadString();
            break;
          }
          case 34: {
            addresses_.AddEntriesFrom(input, _repeated_addresses_codec);
            break;
          }
          case 42: {
            Color = input.ReadString();
            break;
          }
          case 50: {
            features_.AddEntriesFrom(input, _map_features_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NodeAddress : pb::IMessage<NodeAddress> {
    private static readonly pb::MessageParser<NodeAddress> _parser = new pb::MessageParser<NodeAddress>(() => new NodeAddress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeAddress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[88]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeAddress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeAddress(NodeAddress other) : this() {
      network_ = other.network_;
      addr_ = other.addr_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeAddress Clone() {
      return new NodeAddress(this);
    }

    /// <summary>Field number for the "network" field.</summary>
    public const int NetworkFieldNumber = 1;
    private string network_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Network {
      get { return network_; }
      set {
        network_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "addr" field.</summary>
    public const int AddrFieldNumber = 2;
    private string addr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Addr {
      get { return addr_; }
      set {
        addr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeAddress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeAddress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Network != other.Network) return false;
      if (Addr != other.Addr) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Network.Length != 0) hash ^= Network.GetHashCode();
      if (Addr.Length != 0) hash ^= Addr.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Network.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Network);
      }
      if (Addr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Addr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Network.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Network);
      }
      if (Addr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Addr);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeAddress other) {
      if (other == null) {
        return;
      }
      if (other.Network.Length != 0) {
        Network = other.Network;
      }
      if (other.Addr.Length != 0) {
        Addr = other.Addr;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Network = input.ReadString();
            break;
          }
          case 18: {
            Addr = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoutingPolicy : pb::IMessage<RoutingPolicy> {
    private static readonly pb::MessageParser<RoutingPolicy> _parser = new pb::MessageParser<RoutingPolicy>(() => new RoutingPolicy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoutingPolicy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[89]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoutingPolicy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoutingPolicy(RoutingPolicy other) : this() {
      timeLockDelta_ = other.timeLockDelta_;
      minHtlc_ = other.minHtlc_;
      feeBaseMsat_ = other.feeBaseMsat_;
      feeRateMilliMsat_ = other.feeRateMilliMsat_;
      disabled_ = other.disabled_;
      maxHtlcMsat_ = other.maxHtlcMsat_;
      lastUpdate_ = other.lastUpdate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoutingPolicy Clone() {
      return new RoutingPolicy(this);
    }

    /// <summary>Field number for the "time_lock_delta" field.</summary>
    public const int TimeLockDeltaFieldNumber = 1;
    private uint timeLockDelta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeLockDelta {
      get { return timeLockDelta_; }
      set {
        timeLockDelta_ = value;
      }
    }

    /// <summary>Field number for the "min_htlc" field.</summary>
    public const int MinHtlcFieldNumber = 2;
    private long minHtlc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MinHtlc {
      get { return minHtlc_; }
      set {
        minHtlc_ = value;
      }
    }

    /// <summary>Field number for the "fee_base_msat" field.</summary>
    public const int FeeBaseMsatFieldNumber = 3;
    private long feeBaseMsat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FeeBaseMsat {
      get { return feeBaseMsat_; }
      set {
        feeBaseMsat_ = value;
      }
    }

    /// <summary>Field number for the "fee_rate_milli_msat" field.</summary>
    public const int FeeRateMilliMsatFieldNumber = 4;
    private long feeRateMilliMsat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FeeRateMilliMsat {
      get { return feeRateMilliMsat_; }
      set {
        feeRateMilliMsat_ = value;
      }
    }

    /// <summary>Field number for the "disabled" field.</summary>
    public const int DisabledFieldNumber = 5;
    private bool disabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Disabled {
      get { return disabled_; }
      set {
        disabled_ = value;
      }
    }

    /// <summary>Field number for the "max_htlc_msat" field.</summary>
    public const int MaxHtlcMsatFieldNumber = 6;
    private ulong maxHtlcMsat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MaxHtlcMsat {
      get { return maxHtlcMsat_; }
      set {
        maxHtlcMsat_ = value;
      }
    }

    /// <summary>Field number for the "last_update" field.</summary>
    public const int LastUpdateFieldNumber = 7;
    private uint lastUpdate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastUpdate {
      get { return lastUpdate_; }
      set {
        lastUpdate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoutingPolicy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoutingPolicy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TimeLockDelta != other.TimeLockDelta) return false;
      if (MinHtlc != other.MinHtlc) return false;
      if (FeeBaseMsat != other.FeeBaseMsat) return false;
      if (FeeRateMilliMsat != other.FeeRateMilliMsat) return false;
      if (Disabled != other.Disabled) return false;
      if (MaxHtlcMsat != other.MaxHtlcMsat) return false;
      if (LastUpdate != other.LastUpdate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TimeLockDelta != 0) hash ^= TimeLockDelta.GetHashCode();
      if (MinHtlc != 0L) hash ^= MinHtlc.GetHashCode();
      if (FeeBaseMsat != 0L) hash ^= FeeBaseMsat.GetHashCode();
      if (FeeRateMilliMsat != 0L) hash ^= FeeRateMilliMsat.GetHashCode();
      if (Disabled != false) hash ^= Disabled.GetHashCode();
      if (MaxHtlcMsat != 0UL) hash ^= MaxHtlcMsat.GetHashCode();
      if (LastUpdate != 0) hash ^= LastUpdate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TimeLockDelta != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TimeLockDelta);
      }
      if (MinHtlc != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(MinHtlc);
      }
      if (FeeBaseMsat != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(FeeBaseMsat);
      }
      if (FeeRateMilliMsat != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(FeeRateMilliMsat);
      }
      if (Disabled != false) {
        output.WriteRawTag(40);
        output.WriteBool(Disabled);
      }
      if (MaxHtlcMsat != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(MaxHtlcMsat);
      }
      if (LastUpdate != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(LastUpdate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TimeLockDelta != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeLockDelta);
      }
      if (MinHtlc != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MinHtlc);
      }
      if (FeeBaseMsat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FeeBaseMsat);
      }
      if (FeeRateMilliMsat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FeeRateMilliMsat);
      }
      if (Disabled != false) {
        size += 1 + 1;
      }
      if (MaxHtlcMsat != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MaxHtlcMsat);
      }
      if (LastUpdate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastUpdate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoutingPolicy other) {
      if (other == null) {
        return;
      }
      if (other.TimeLockDelta != 0) {
        TimeLockDelta = other.TimeLockDelta;
      }
      if (other.MinHtlc != 0L) {
        MinHtlc = other.MinHtlc;
      }
      if (other.FeeBaseMsat != 0L) {
        FeeBaseMsat = other.FeeBaseMsat;
      }
      if (other.FeeRateMilliMsat != 0L) {
        FeeRateMilliMsat = other.FeeRateMilliMsat;
      }
      if (other.Disabled != false) {
        Disabled = other.Disabled;
      }
      if (other.MaxHtlcMsat != 0UL) {
        MaxHtlcMsat = other.MaxHtlcMsat;
      }
      if (other.LastUpdate != 0) {
        LastUpdate = other.LastUpdate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TimeLockDelta = input.ReadUInt32();
            break;
          }
          case 16: {
            MinHtlc = input.ReadInt64();
            break;
          }
          case 24: {
            FeeBaseMsat = input.ReadInt64();
            break;
          }
          case 32: {
            FeeRateMilliMsat = input.ReadInt64();
            break;
          }
          case 40: {
            Disabled = input.ReadBool();
            break;
          }
          case 48: {
            MaxHtlcMsat = input.ReadUInt64();
            break;
          }
          case 56: {
            LastUpdate = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  ///A fully authenticated channel along with all its unique attributes.
  ///Once an authenticated channel announcement has been processed on the network,
  ///then an instance of ChannelEdgeInfo encapsulating the channels attributes is
  ///stored. The other portions relevant to routing policy of a channel are stored
  ///within a ChannelEdgePolicy for each direction of the channel.
  /// </summary>
  public sealed partial class ChannelEdge : pb::IMessage<ChannelEdge> {
    private static readonly pb::MessageParser<ChannelEdge> _parser = new pb::MessageParser<ChannelEdge>(() => new ChannelEdge());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelEdge> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[90]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelEdge() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelEdge(ChannelEdge other) : this() {
      channelId_ = other.channelId_;
      chanPoint_ = other.chanPoint_;
      lastUpdate_ = other.lastUpdate_;
      node1Pub_ = other.node1Pub_;
      node2Pub_ = other.node2Pub_;
      capacity_ = other.capacity_;
      node1Policy_ = other.node1Policy_ != null ? other.node1Policy_.Clone() : null;
      node2Policy_ = other.node2Policy_ != null ? other.node2Policy_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelEdge Clone() {
      return new ChannelEdge(this);
    }

    /// <summary>Field number for the "channel_id" field.</summary>
    public const int ChannelIdFieldNumber = 1;
    private ulong channelId_;
    /// <summary>
    ///*
    ///The unique channel ID for the channel. The first 3 bytes are the block
    ///height, the next 3 the index within the block, and the last 2 bytes are the
    ///output index for the channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ChannelId {
      get { return channelId_; }
      set {
        channelId_ = value;
      }
    }

    /// <summary>Field number for the "chan_point" field.</summary>
    public const int ChanPointFieldNumber = 2;
    private string chanPoint_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChanPoint {
      get { return chanPoint_; }
      set {
        chanPoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "last_update" field.</summary>
    public const int LastUpdateFieldNumber = 3;
    private uint lastUpdate_;
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastUpdate {
      get { return lastUpdate_; }
      set {
        lastUpdate_ = value;
      }
    }

    /// <summary>Field number for the "node1_pub" field.</summary>
    public const int Node1PubFieldNumber = 4;
    private string node1Pub_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Node1Pub {
      get { return node1Pub_; }
      set {
        node1Pub_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "node2_pub" field.</summary>
    public const int Node2PubFieldNumber = 5;
    private string node2Pub_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Node2Pub {
      get { return node2Pub_; }
      set {
        node2Pub_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "capacity" field.</summary>
    public const int CapacityFieldNumber = 6;
    private long capacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Capacity {
      get { return capacity_; }
      set {
        capacity_ = value;
      }
    }

    /// <summary>Field number for the "node1_policy" field.</summary>
    public const int Node1PolicyFieldNumber = 7;
    private global::Lnrpc.RoutingPolicy node1Policy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.RoutingPolicy Node1Policy {
      get { return node1Policy_; }
      set {
        node1Policy_ = value;
      }
    }

    /// <summary>Field number for the "node2_policy" field.</summary>
    public const int Node2PolicyFieldNumber = 8;
    private global::Lnrpc.RoutingPolicy node2Policy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.RoutingPolicy Node2Policy {
      get { return node2Policy_; }
      set {
        node2Policy_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelEdge);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelEdge other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChannelId != other.ChannelId) return false;
      if (ChanPoint != other.ChanPoint) return false;
      if (LastUpdate != other.LastUpdate) return false;
      if (Node1Pub != other.Node1Pub) return false;
      if (Node2Pub != other.Node2Pub) return false;
      if (Capacity != other.Capacity) return false;
      if (!object.Equals(Node1Policy, other.Node1Policy)) return false;
      if (!object.Equals(Node2Policy, other.Node2Policy)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChannelId != 0UL) hash ^= ChannelId.GetHashCode();
      if (ChanPoint.Length != 0) hash ^= ChanPoint.GetHashCode();
      if (LastUpdate != 0) hash ^= LastUpdate.GetHashCode();
      if (Node1Pub.Length != 0) hash ^= Node1Pub.GetHashCode();
      if (Node2Pub.Length != 0) hash ^= Node2Pub.GetHashCode();
      if (Capacity != 0L) hash ^= Capacity.GetHashCode();
      if (node1Policy_ != null) hash ^= Node1Policy.GetHashCode();
      if (node2Policy_ != null) hash ^= Node2Policy.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChannelId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ChannelId);
      }
      if (ChanPoint.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ChanPoint);
      }
      if (LastUpdate != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(LastUpdate);
      }
      if (Node1Pub.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Node1Pub);
      }
      if (Node2Pub.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Node2Pub);
      }
      if (Capacity != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Capacity);
      }
      if (node1Policy_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Node1Policy);
      }
      if (node2Policy_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Node2Policy);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChannelId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ChannelId);
      }
      if (ChanPoint.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChanPoint);
      }
      if (LastUpdate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastUpdate);
      }
      if (Node1Pub.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Node1Pub);
      }
      if (Node2Pub.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Node2Pub);
      }
      if (Capacity != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Capacity);
      }
      if (node1Policy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Node1Policy);
      }
      if (node2Policy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Node2Policy);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelEdge other) {
      if (other == null) {
        return;
      }
      if (other.ChannelId != 0UL) {
        ChannelId = other.ChannelId;
      }
      if (other.ChanPoint.Length != 0) {
        ChanPoint = other.ChanPoint;
      }
      if (other.LastUpdate != 0) {
        LastUpdate = other.LastUpdate;
      }
      if (other.Node1Pub.Length != 0) {
        Node1Pub = other.Node1Pub;
      }
      if (other.Node2Pub.Length != 0) {
        Node2Pub = other.Node2Pub;
      }
      if (other.Capacity != 0L) {
        Capacity = other.Capacity;
      }
      if (other.node1Policy_ != null) {
        if (node1Policy_ == null) {
          Node1Policy = new global::Lnrpc.RoutingPolicy();
        }
        Node1Policy.MergeFrom(other.Node1Policy);
      }
      if (other.node2Policy_ != null) {
        if (node2Policy_ == null) {
          Node2Policy = new global::Lnrpc.RoutingPolicy();
        }
        Node2Policy.MergeFrom(other.Node2Policy);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChannelId = input.ReadUInt64();
            break;
          }
          case 18: {
            ChanPoint = input.ReadString();
            break;
          }
          case 24: {
            LastUpdate = input.ReadUInt32();
            break;
          }
          case 34: {
            Node1Pub = input.ReadString();
            break;
          }
          case 42: {
            Node2Pub = input.ReadString();
            break;
          }
          case 48: {
            Capacity = input.ReadInt64();
            break;
          }
          case 58: {
            if (node1Policy_ == null) {
              Node1Policy = new global::Lnrpc.RoutingPolicy();
            }
            input.ReadMessage(Node1Policy);
            break;
          }
          case 66: {
            if (node2Policy_ == null) {
              Node2Policy = new global::Lnrpc.RoutingPolicy();
            }
            input.ReadMessage(Node2Policy);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChannelGraphRequest : pb::IMessage<ChannelGraphRequest> {
    private static readonly pb::MessageParser<ChannelGraphRequest> _parser = new pb::MessageParser<ChannelGraphRequest>(() => new ChannelGraphRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelGraphRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[91]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelGraphRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelGraphRequest(ChannelGraphRequest other) : this() {
      includeUnannounced_ = other.includeUnannounced_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelGraphRequest Clone() {
      return new ChannelGraphRequest(this);
    }

    /// <summary>Field number for the "include_unannounced" field.</summary>
    public const int IncludeUnannouncedFieldNumber = 1;
    private bool includeUnannounced_;
    /// <summary>
    ///*
    ///Whether unannounced channels are included in the response or not. If set,
    ///unannounced channels are included. Unannounced channels are both private
    ///channels, and public channels that are not yet announced to the network.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludeUnannounced {
      get { return includeUnannounced_; }
      set {
        includeUnannounced_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelGraphRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelGraphRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IncludeUnannounced != other.IncludeUnannounced) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IncludeUnannounced != false) hash ^= IncludeUnannounced.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IncludeUnannounced != false) {
        output.WriteRawTag(8);
        output.WriteBool(IncludeUnannounced);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IncludeUnannounced != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelGraphRequest other) {
      if (other == null) {
        return;
      }
      if (other.IncludeUnannounced != false) {
        IncludeUnannounced = other.IncludeUnannounced;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IncludeUnannounced = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// Returns a new instance of the directed channel graph.
  /// </summary>
  public sealed partial class ChannelGraph : pb::IMessage<ChannelGraph> {
    private static readonly pb::MessageParser<ChannelGraph> _parser = new pb::MessageParser<ChannelGraph>(() => new ChannelGraph());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelGraph> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[92]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelGraph() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelGraph(ChannelGraph other) : this() {
      nodes_ = other.nodes_.Clone();
      edges_ = other.edges_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelGraph Clone() {
      return new ChannelGraph(this);
    }

    /// <summary>Field number for the "nodes" field.</summary>
    public const int NodesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Lnrpc.LightningNode> _repeated_nodes_codec
        = pb::FieldCodec.ForMessage(10, global::Lnrpc.LightningNode.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.LightningNode> nodes_ = new pbc::RepeatedField<global::Lnrpc.LightningNode>();
    /// <summary>
    //// The list of `LightningNode`s in this channel graph
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.LightningNode> Nodes {
      get { return nodes_; }
    }

    /// <summary>Field number for the "edges" field.</summary>
    public const int EdgesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Lnrpc.ChannelEdge> _repeated_edges_codec
        = pb::FieldCodec.ForMessage(18, global::Lnrpc.ChannelEdge.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.ChannelEdge> edges_ = new pbc::RepeatedField<global::Lnrpc.ChannelEdge>();
    /// <summary>
    //// The list of `ChannelEdge`s in this channel graph
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.ChannelEdge> Edges {
      get { return edges_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelGraph);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelGraph other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!nodes_.Equals(other.nodes_)) return false;
      if(!edges_.Equals(other.edges_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= nodes_.GetHashCode();
      hash ^= edges_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      nodes_.WriteTo(output, _repeated_nodes_codec);
      edges_.WriteTo(output, _repeated_edges_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += nodes_.CalculateSize(_repeated_nodes_codec);
      size += edges_.CalculateSize(_repeated_edges_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelGraph other) {
      if (other == null) {
        return;
      }
      nodes_.Add(other.nodes_);
      edges_.Add(other.edges_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            nodes_.AddEntriesFrom(input, _repeated_nodes_codec);
            break;
          }
          case 18: {
            edges_.AddEntriesFrom(input, _repeated_edges_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChanInfoRequest : pb::IMessage<ChanInfoRequest> {
    private static readonly pb::MessageParser<ChanInfoRequest> _parser = new pb::MessageParser<ChanInfoRequest>(() => new ChanInfoRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChanInfoRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[93]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChanInfoRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChanInfoRequest(ChanInfoRequest other) : this() {
      chanId_ = other.chanId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChanInfoRequest Clone() {
      return new ChanInfoRequest(this);
    }

    /// <summary>Field number for the "chan_id" field.</summary>
    public const int ChanIdFieldNumber = 1;
    private ulong chanId_;
    /// <summary>
    ///*
    ///The unique channel ID for the channel. The first 3 bytes are the block
    ///height, the next 3 the index within the block, and the last 2 bytes are the
    ///output index for the channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ChanId {
      get { return chanId_; }
      set {
        chanId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChanInfoRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChanInfoRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChanId != other.ChanId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChanId != 0UL) hash ^= ChanId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChanId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ChanId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChanId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ChanId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChanInfoRequest other) {
      if (other == null) {
        return;
      }
      if (other.ChanId != 0UL) {
        ChanId = other.ChanId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChanId = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NetworkInfoRequest : pb::IMessage<NetworkInfoRequest> {
    private static readonly pb::MessageParser<NetworkInfoRequest> _parser = new pb::MessageParser<NetworkInfoRequest>(() => new NetworkInfoRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetworkInfoRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[94]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkInfoRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkInfoRequest(NetworkInfoRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkInfoRequest Clone() {
      return new NetworkInfoRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetworkInfoRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetworkInfoRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetworkInfoRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class NetworkInfo : pb::IMessage<NetworkInfo> {
    private static readonly pb::MessageParser<NetworkInfo> _parser = new pb::MessageParser<NetworkInfo>(() => new NetworkInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetworkInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[95]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkInfo(NetworkInfo other) : this() {
      graphDiameter_ = other.graphDiameter_;
      avgOutDegree_ = other.avgOutDegree_;
      maxOutDegree_ = other.maxOutDegree_;
      numNodes_ = other.numNodes_;
      numChannels_ = other.numChannels_;
      totalNetworkCapacity_ = other.totalNetworkCapacity_;
      avgChannelSize_ = other.avgChannelSize_;
      minChannelSize_ = other.minChannelSize_;
      maxChannelSize_ = other.maxChannelSize_;
      medianChannelSizeSat_ = other.medianChannelSizeSat_;
      numZombieChans_ = other.numZombieChans_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkInfo Clone() {
      return new NetworkInfo(this);
    }

    /// <summary>Field number for the "graph_diameter" field.</summary>
    public const int GraphDiameterFieldNumber = 1;
    private uint graphDiameter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GraphDiameter {
      get { return graphDiameter_; }
      set {
        graphDiameter_ = value;
      }
    }

    /// <summary>Field number for the "avg_out_degree" field.</summary>
    public const int AvgOutDegreeFieldNumber = 2;
    private double avgOutDegree_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AvgOutDegree {
      get { return avgOutDegree_; }
      set {
        avgOutDegree_ = value;
      }
    }

    /// <summary>Field number for the "max_out_degree" field.</summary>
    public const int MaxOutDegreeFieldNumber = 3;
    private uint maxOutDegree_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxOutDegree {
      get { return maxOutDegree_; }
      set {
        maxOutDegree_ = value;
      }
    }

    /// <summary>Field number for the "num_nodes" field.</summary>
    public const int NumNodesFieldNumber = 4;
    private uint numNodes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumNodes {
      get { return numNodes_; }
      set {
        numNodes_ = value;
      }
    }

    /// <summary>Field number for the "num_channels" field.</summary>
    public const int NumChannelsFieldNumber = 5;
    private uint numChannels_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumChannels {
      get { return numChannels_; }
      set {
        numChannels_ = value;
      }
    }

    /// <summary>Field number for the "total_network_capacity" field.</summary>
    public const int TotalNetworkCapacityFieldNumber = 6;
    private long totalNetworkCapacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalNetworkCapacity {
      get { return totalNetworkCapacity_; }
      set {
        totalNetworkCapacity_ = value;
      }
    }

    /// <summary>Field number for the "avg_channel_size" field.</summary>
    public const int AvgChannelSizeFieldNumber = 7;
    private double avgChannelSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double AvgChannelSize {
      get { return avgChannelSize_; }
      set {
        avgChannelSize_ = value;
      }
    }

    /// <summary>Field number for the "min_channel_size" field.</summary>
    public const int MinChannelSizeFieldNumber = 8;
    private long minChannelSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MinChannelSize {
      get { return minChannelSize_; }
      set {
        minChannelSize_ = value;
      }
    }

    /// <summary>Field number for the "max_channel_size" field.</summary>
    public const int MaxChannelSizeFieldNumber = 9;
    private long maxChannelSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MaxChannelSize {
      get { return maxChannelSize_; }
      set {
        maxChannelSize_ = value;
      }
    }

    /// <summary>Field number for the "median_channel_size_sat" field.</summary>
    public const int MedianChannelSizeSatFieldNumber = 10;
    private long medianChannelSizeSat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MedianChannelSizeSat {
      get { return medianChannelSizeSat_; }
      set {
        medianChannelSizeSat_ = value;
      }
    }

    /// <summary>Field number for the "num_zombie_chans" field.</summary>
    public const int NumZombieChansFieldNumber = 11;
    private ulong numZombieChans_;
    /// <summary>
    /// The number of edges marked as zombies.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NumZombieChans {
      get { return numZombieChans_; }
      set {
        numZombieChans_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetworkInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetworkInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GraphDiameter != other.GraphDiameter) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AvgOutDegree, other.AvgOutDegree)) return false;
      if (MaxOutDegree != other.MaxOutDegree) return false;
      if (NumNodes != other.NumNodes) return false;
      if (NumChannels != other.NumChannels) return false;
      if (TotalNetworkCapacity != other.TotalNetworkCapacity) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AvgChannelSize, other.AvgChannelSize)) return false;
      if (MinChannelSize != other.MinChannelSize) return false;
      if (MaxChannelSize != other.MaxChannelSize) return false;
      if (MedianChannelSizeSat != other.MedianChannelSizeSat) return false;
      if (NumZombieChans != other.NumZombieChans) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GraphDiameter != 0) hash ^= GraphDiameter.GetHashCode();
      if (AvgOutDegree != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AvgOutDegree);
      if (MaxOutDegree != 0) hash ^= MaxOutDegree.GetHashCode();
      if (NumNodes != 0) hash ^= NumNodes.GetHashCode();
      if (NumChannels != 0) hash ^= NumChannels.GetHashCode();
      if (TotalNetworkCapacity != 0L) hash ^= TotalNetworkCapacity.GetHashCode();
      if (AvgChannelSize != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AvgChannelSize);
      if (MinChannelSize != 0L) hash ^= MinChannelSize.GetHashCode();
      if (MaxChannelSize != 0L) hash ^= MaxChannelSize.GetHashCode();
      if (MedianChannelSizeSat != 0L) hash ^= MedianChannelSizeSat.GetHashCode();
      if (NumZombieChans != 0UL) hash ^= NumZombieChans.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GraphDiameter != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GraphDiameter);
      }
      if (AvgOutDegree != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(AvgOutDegree);
      }
      if (MaxOutDegree != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(MaxOutDegree);
      }
      if (NumNodes != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(NumNodes);
      }
      if (NumChannels != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(NumChannels);
      }
      if (TotalNetworkCapacity != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(TotalNetworkCapacity);
      }
      if (AvgChannelSize != 0D) {
        output.WriteRawTag(57);
        output.WriteDouble(AvgChannelSize);
      }
      if (MinChannelSize != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(MinChannelSize);
      }
      if (MaxChannelSize != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(MaxChannelSize);
      }
      if (MedianChannelSizeSat != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(MedianChannelSizeSat);
      }
      if (NumZombieChans != 0UL) {
        output.WriteRawTag(88);
        output.WriteUInt64(NumZombieChans);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GraphDiameter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GraphDiameter);
      }
      if (AvgOutDegree != 0D) {
        size += 1 + 8;
      }
      if (MaxOutDegree != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxOutDegree);
      }
      if (NumNodes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumNodes);
      }
      if (NumChannels != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumChannels);
      }
      if (TotalNetworkCapacity != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalNetworkCapacity);
      }
      if (AvgChannelSize != 0D) {
        size += 1 + 8;
      }
      if (MinChannelSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MinChannelSize);
      }
      if (MaxChannelSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxChannelSize);
      }
      if (MedianChannelSizeSat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MedianChannelSizeSat);
      }
      if (NumZombieChans != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NumZombieChans);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetworkInfo other) {
      if (other == null) {
        return;
      }
      if (other.GraphDiameter != 0) {
        GraphDiameter = other.GraphDiameter;
      }
      if (other.AvgOutDegree != 0D) {
        AvgOutDegree = other.AvgOutDegree;
      }
      if (other.MaxOutDegree != 0) {
        MaxOutDegree = other.MaxOutDegree;
      }
      if (other.NumNodes != 0) {
        NumNodes = other.NumNodes;
      }
      if (other.NumChannels != 0) {
        NumChannels = other.NumChannels;
      }
      if (other.TotalNetworkCapacity != 0L) {
        TotalNetworkCapacity = other.TotalNetworkCapacity;
      }
      if (other.AvgChannelSize != 0D) {
        AvgChannelSize = other.AvgChannelSize;
      }
      if (other.MinChannelSize != 0L) {
        MinChannelSize = other.MinChannelSize;
      }
      if (other.MaxChannelSize != 0L) {
        MaxChannelSize = other.MaxChannelSize;
      }
      if (other.MedianChannelSizeSat != 0L) {
        MedianChannelSizeSat = other.MedianChannelSizeSat;
      }
      if (other.NumZombieChans != 0UL) {
        NumZombieChans = other.NumZombieChans;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GraphDiameter = input.ReadUInt32();
            break;
          }
          case 17: {
            AvgOutDegree = input.ReadDouble();
            break;
          }
          case 24: {
            MaxOutDegree = input.ReadUInt32();
            break;
          }
          case 32: {
            NumNodes = input.ReadUInt32();
            break;
          }
          case 40: {
            NumChannels = input.ReadUInt32();
            break;
          }
          case 48: {
            TotalNetworkCapacity = input.ReadInt64();
            break;
          }
          case 57: {
            AvgChannelSize = input.ReadDouble();
            break;
          }
          case 64: {
            MinChannelSize = input.ReadInt64();
            break;
          }
          case 72: {
            MaxChannelSize = input.ReadInt64();
            break;
          }
          case 80: {
            MedianChannelSizeSat = input.ReadInt64();
            break;
          }
          case 88: {
            NumZombieChans = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StopRequest : pb::IMessage<StopRequest> {
    private static readonly pb::MessageParser<StopRequest> _parser = new pb::MessageParser<StopRequest>(() => new StopRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StopRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[96]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopRequest(StopRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopRequest Clone() {
      return new StopRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StopRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StopRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StopRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class StopResponse : pb::IMessage<StopResponse> {
    private static readonly pb::MessageParser<StopResponse> _parser = new pb::MessageParser<StopResponse>(() => new StopResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StopResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[97]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopResponse(StopResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopResponse Clone() {
      return new StopResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StopResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StopResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StopResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class GraphTopologySubscription : pb::IMessage<GraphTopologySubscription> {
    private static readonly pb::MessageParser<GraphTopologySubscription> _parser = new pb::MessageParser<GraphTopologySubscription>(() => new GraphTopologySubscription());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GraphTopologySubscription> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[98]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GraphTopologySubscription() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GraphTopologySubscription(GraphTopologySubscription other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GraphTopologySubscription Clone() {
      return new GraphTopologySubscription(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GraphTopologySubscription);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GraphTopologySubscription other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GraphTopologySubscription other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class GraphTopologyUpdate : pb::IMessage<GraphTopologyUpdate> {
    private static readonly pb::MessageParser<GraphTopologyUpdate> _parser = new pb::MessageParser<GraphTopologyUpdate>(() => new GraphTopologyUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GraphTopologyUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[99]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GraphTopologyUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GraphTopologyUpdate(GraphTopologyUpdate other) : this() {
      nodeUpdates_ = other.nodeUpdates_.Clone();
      channelUpdates_ = other.channelUpdates_.Clone();
      closedChans_ = other.closedChans_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GraphTopologyUpdate Clone() {
      return new GraphTopologyUpdate(this);
    }

    /// <summary>Field number for the "node_updates" field.</summary>
    public const int NodeUpdatesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Lnrpc.NodeUpdate> _repeated_nodeUpdates_codec
        = pb::FieldCodec.ForMessage(10, global::Lnrpc.NodeUpdate.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.NodeUpdate> nodeUpdates_ = new pbc::RepeatedField<global::Lnrpc.NodeUpdate>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.NodeUpdate> NodeUpdates {
      get { return nodeUpdates_; }
    }

    /// <summary>Field number for the "channel_updates" field.</summary>
    public const int ChannelUpdatesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Lnrpc.ChannelEdgeUpdate> _repeated_channelUpdates_codec
        = pb::FieldCodec.ForMessage(18, global::Lnrpc.ChannelEdgeUpdate.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.ChannelEdgeUpdate> channelUpdates_ = new pbc::RepeatedField<global::Lnrpc.ChannelEdgeUpdate>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.ChannelEdgeUpdate> ChannelUpdates {
      get { return channelUpdates_; }
    }

    /// <summary>Field number for the "closed_chans" field.</summary>
    public const int ClosedChansFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Lnrpc.ClosedChannelUpdate> _repeated_closedChans_codec
        = pb::FieldCodec.ForMessage(26, global::Lnrpc.ClosedChannelUpdate.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.ClosedChannelUpdate> closedChans_ = new pbc::RepeatedField<global::Lnrpc.ClosedChannelUpdate>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.ClosedChannelUpdate> ClosedChans {
      get { return closedChans_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GraphTopologyUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GraphTopologyUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!nodeUpdates_.Equals(other.nodeUpdates_)) return false;
      if(!channelUpdates_.Equals(other.channelUpdates_)) return false;
      if(!closedChans_.Equals(other.closedChans_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= nodeUpdates_.GetHashCode();
      hash ^= channelUpdates_.GetHashCode();
      hash ^= closedChans_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      nodeUpdates_.WriteTo(output, _repeated_nodeUpdates_codec);
      channelUpdates_.WriteTo(output, _repeated_channelUpdates_codec);
      closedChans_.WriteTo(output, _repeated_closedChans_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += nodeUpdates_.CalculateSize(_repeated_nodeUpdates_codec);
      size += channelUpdates_.CalculateSize(_repeated_channelUpdates_codec);
      size += closedChans_.CalculateSize(_repeated_closedChans_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GraphTopologyUpdate other) {
      if (other == null) {
        return;
      }
      nodeUpdates_.Add(other.nodeUpdates_);
      channelUpdates_.Add(other.channelUpdates_);
      closedChans_.Add(other.closedChans_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            nodeUpdates_.AddEntriesFrom(input, _repeated_nodeUpdates_codec);
            break;
          }
          case 18: {
            channelUpdates_.AddEntriesFrom(input, _repeated_channelUpdates_codec);
            break;
          }
          case 26: {
            closedChans_.AddEntriesFrom(input, _repeated_closedChans_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NodeUpdate : pb::IMessage<NodeUpdate> {
    private static readonly pb::MessageParser<NodeUpdate> _parser = new pb::MessageParser<NodeUpdate>(() => new NodeUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[100]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeUpdate(NodeUpdate other) : this() {
      addresses_ = other.addresses_.Clone();
      identityKey_ = other.identityKey_;
      globalFeatures_ = other.globalFeatures_;
      alias_ = other.alias_;
      color_ = other.color_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeUpdate Clone() {
      return new NodeUpdate(this);
    }

    /// <summary>Field number for the "addresses" field.</summary>
    public const int AddressesFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_addresses_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> addresses_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Addresses {
      get { return addresses_; }
    }

    /// <summary>Field number for the "identity_key" field.</summary>
    public const int IdentityKeyFieldNumber = 2;
    private string identityKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IdentityKey {
      get { return identityKey_; }
      set {
        identityKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "global_features" field.</summary>
    public const int GlobalFeaturesFieldNumber = 3;
    private pb::ByteString globalFeatures_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString GlobalFeatures {
      get { return globalFeatures_; }
      set {
        globalFeatures_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "alias" field.</summary>
    public const int AliasFieldNumber = 4;
    private string alias_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Alias {
      get { return alias_; }
      set {
        alias_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 5;
    private string color_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Color {
      get { return color_; }
      set {
        color_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!addresses_.Equals(other.addresses_)) return false;
      if (IdentityKey != other.IdentityKey) return false;
      if (GlobalFeatures != other.GlobalFeatures) return false;
      if (Alias != other.Alias) return false;
      if (Color != other.Color) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= addresses_.GetHashCode();
      if (IdentityKey.Length != 0) hash ^= IdentityKey.GetHashCode();
      if (GlobalFeatures.Length != 0) hash ^= GlobalFeatures.GetHashCode();
      if (Alias.Length != 0) hash ^= Alias.GetHashCode();
      if (Color.Length != 0) hash ^= Color.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      addresses_.WriteTo(output, _repeated_addresses_codec);
      if (IdentityKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(IdentityKey);
      }
      if (GlobalFeatures.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(GlobalFeatures);
      }
      if (Alias.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Alias);
      }
      if (Color.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Color);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += addresses_.CalculateSize(_repeated_addresses_codec);
      if (IdentityKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IdentityKey);
      }
      if (GlobalFeatures.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(GlobalFeatures);
      }
      if (Alias.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Alias);
      }
      if (Color.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Color);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeUpdate other) {
      if (other == null) {
        return;
      }
      addresses_.Add(other.addresses_);
      if (other.IdentityKey.Length != 0) {
        IdentityKey = other.IdentityKey;
      }
      if (other.GlobalFeatures.Length != 0) {
        GlobalFeatures = other.GlobalFeatures;
      }
      if (other.Alias.Length != 0) {
        Alias = other.Alias;
      }
      if (other.Color.Length != 0) {
        Color = other.Color;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            addresses_.AddEntriesFrom(input, _repeated_addresses_codec);
            break;
          }
          case 18: {
            IdentityKey = input.ReadString();
            break;
          }
          case 26: {
            GlobalFeatures = input.ReadBytes();
            break;
          }
          case 34: {
            Alias = input.ReadString();
            break;
          }
          case 42: {
            Color = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChannelEdgeUpdate : pb::IMessage<ChannelEdgeUpdate> {
    private static readonly pb::MessageParser<ChannelEdgeUpdate> _parser = new pb::MessageParser<ChannelEdgeUpdate>(() => new ChannelEdgeUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelEdgeUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[101]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelEdgeUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelEdgeUpdate(ChannelEdgeUpdate other) : this() {
      chanId_ = other.chanId_;
      chanPoint_ = other.chanPoint_ != null ? other.chanPoint_.Clone() : null;
      capacity_ = other.capacity_;
      routingPolicy_ = other.routingPolicy_ != null ? other.routingPolicy_.Clone() : null;
      advertisingNode_ = other.advertisingNode_;
      connectingNode_ = other.connectingNode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelEdgeUpdate Clone() {
      return new ChannelEdgeUpdate(this);
    }

    /// <summary>Field number for the "chan_id" field.</summary>
    public const int ChanIdFieldNumber = 1;
    private ulong chanId_;
    /// <summary>
    ///*
    ///The unique channel ID for the channel. The first 3 bytes are the block
    ///height, the next 3 the index within the block, and the last 2 bytes are the
    ///output index for the channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ChanId {
      get { return chanId_; }
      set {
        chanId_ = value;
      }
    }

    /// <summary>Field number for the "chan_point" field.</summary>
    public const int ChanPointFieldNumber = 2;
    private global::Lnrpc.ChannelPoint chanPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.ChannelPoint ChanPoint {
      get { return chanPoint_; }
      set {
        chanPoint_ = value;
      }
    }

    /// <summary>Field number for the "capacity" field.</summary>
    public const int CapacityFieldNumber = 3;
    private long capacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Capacity {
      get { return capacity_; }
      set {
        capacity_ = value;
      }
    }

    /// <summary>Field number for the "routing_policy" field.</summary>
    public const int RoutingPolicyFieldNumber = 4;
    private global::Lnrpc.RoutingPolicy routingPolicy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.RoutingPolicy RoutingPolicy {
      get { return routingPolicy_; }
      set {
        routingPolicy_ = value;
      }
    }

    /// <summary>Field number for the "advertising_node" field.</summary>
    public const int AdvertisingNodeFieldNumber = 5;
    private string advertisingNode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AdvertisingNode {
      get { return advertisingNode_; }
      set {
        advertisingNode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "connecting_node" field.</summary>
    public const int ConnectingNodeFieldNumber = 6;
    private string connectingNode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ConnectingNode {
      get { return connectingNode_; }
      set {
        connectingNode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelEdgeUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelEdgeUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChanId != other.ChanId) return false;
      if (!object.Equals(ChanPoint, other.ChanPoint)) return false;
      if (Capacity != other.Capacity) return false;
      if (!object.Equals(RoutingPolicy, other.RoutingPolicy)) return false;
      if (AdvertisingNode != other.AdvertisingNode) return false;
      if (ConnectingNode != other.ConnectingNode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChanId != 0UL) hash ^= ChanId.GetHashCode();
      if (chanPoint_ != null) hash ^= ChanPoint.GetHashCode();
      if (Capacity != 0L) hash ^= Capacity.GetHashCode();
      if (routingPolicy_ != null) hash ^= RoutingPolicy.GetHashCode();
      if (AdvertisingNode.Length != 0) hash ^= AdvertisingNode.GetHashCode();
      if (ConnectingNode.Length != 0) hash ^= ConnectingNode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChanId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ChanId);
      }
      if (chanPoint_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ChanPoint);
      }
      if (Capacity != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Capacity);
      }
      if (routingPolicy_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(RoutingPolicy);
      }
      if (AdvertisingNode.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(AdvertisingNode);
      }
      if (ConnectingNode.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ConnectingNode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChanId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ChanId);
      }
      if (chanPoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChanPoint);
      }
      if (Capacity != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Capacity);
      }
      if (routingPolicy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoutingPolicy);
      }
      if (AdvertisingNode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AdvertisingNode);
      }
      if (ConnectingNode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ConnectingNode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelEdgeUpdate other) {
      if (other == null) {
        return;
      }
      if (other.ChanId != 0UL) {
        ChanId = other.ChanId;
      }
      if (other.chanPoint_ != null) {
        if (chanPoint_ == null) {
          ChanPoint = new global::Lnrpc.ChannelPoint();
        }
        ChanPoint.MergeFrom(other.ChanPoint);
      }
      if (other.Capacity != 0L) {
        Capacity = other.Capacity;
      }
      if (other.routingPolicy_ != null) {
        if (routingPolicy_ == null) {
          RoutingPolicy = new global::Lnrpc.RoutingPolicy();
        }
        RoutingPolicy.MergeFrom(other.RoutingPolicy);
      }
      if (other.AdvertisingNode.Length != 0) {
        AdvertisingNode = other.AdvertisingNode;
      }
      if (other.ConnectingNode.Length != 0) {
        ConnectingNode = other.ConnectingNode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChanId = input.ReadUInt64();
            break;
          }
          case 18: {
            if (chanPoint_ == null) {
              ChanPoint = new global::Lnrpc.ChannelPoint();
            }
            input.ReadMessage(ChanPoint);
            break;
          }
          case 24: {
            Capacity = input.ReadInt64();
            break;
          }
          case 34: {
            if (routingPolicy_ == null) {
              RoutingPolicy = new global::Lnrpc.RoutingPolicy();
            }
            input.ReadMessage(RoutingPolicy);
            break;
          }
          case 42: {
            AdvertisingNode = input.ReadString();
            break;
          }
          case 50: {
            ConnectingNode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClosedChannelUpdate : pb::IMessage<ClosedChannelUpdate> {
    private static readonly pb::MessageParser<ClosedChannelUpdate> _parser = new pb::MessageParser<ClosedChannelUpdate>(() => new ClosedChannelUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClosedChannelUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[102]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClosedChannelUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClosedChannelUpdate(ClosedChannelUpdate other) : this() {
      chanId_ = other.chanId_;
      capacity_ = other.capacity_;
      closedHeight_ = other.closedHeight_;
      chanPoint_ = other.chanPoint_ != null ? other.chanPoint_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClosedChannelUpdate Clone() {
      return new ClosedChannelUpdate(this);
    }

    /// <summary>Field number for the "chan_id" field.</summary>
    public const int ChanIdFieldNumber = 1;
    private ulong chanId_;
    /// <summary>
    ///*
    ///The unique channel ID for the channel. The first 3 bytes are the block
    ///height, the next 3 the index within the block, and the last 2 bytes are the
    ///output index for the channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ChanId {
      get { return chanId_; }
      set {
        chanId_ = value;
      }
    }

    /// <summary>Field number for the "capacity" field.</summary>
    public const int CapacityFieldNumber = 2;
    private long capacity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Capacity {
      get { return capacity_; }
      set {
        capacity_ = value;
      }
    }

    /// <summary>Field number for the "closed_height" field.</summary>
    public const int ClosedHeightFieldNumber = 3;
    private uint closedHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ClosedHeight {
      get { return closedHeight_; }
      set {
        closedHeight_ = value;
      }
    }

    /// <summary>Field number for the "chan_point" field.</summary>
    public const int ChanPointFieldNumber = 4;
    private global::Lnrpc.ChannelPoint chanPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.ChannelPoint ChanPoint {
      get { return chanPoint_; }
      set {
        chanPoint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClosedChannelUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClosedChannelUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChanId != other.ChanId) return false;
      if (Capacity != other.Capacity) return false;
      if (ClosedHeight != other.ClosedHeight) return false;
      if (!object.Equals(ChanPoint, other.ChanPoint)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChanId != 0UL) hash ^= ChanId.GetHashCode();
      if (Capacity != 0L) hash ^= Capacity.GetHashCode();
      if (ClosedHeight != 0) hash ^= ClosedHeight.GetHashCode();
      if (chanPoint_ != null) hash ^= ChanPoint.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChanId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ChanId);
      }
      if (Capacity != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Capacity);
      }
      if (ClosedHeight != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ClosedHeight);
      }
      if (chanPoint_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ChanPoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChanId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ChanId);
      }
      if (Capacity != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Capacity);
      }
      if (ClosedHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ClosedHeight);
      }
      if (chanPoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChanPoint);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClosedChannelUpdate other) {
      if (other == null) {
        return;
      }
      if (other.ChanId != 0UL) {
        ChanId = other.ChanId;
      }
      if (other.Capacity != 0L) {
        Capacity = other.Capacity;
      }
      if (other.ClosedHeight != 0) {
        ClosedHeight = other.ClosedHeight;
      }
      if (other.chanPoint_ != null) {
        if (chanPoint_ == null) {
          ChanPoint = new global::Lnrpc.ChannelPoint();
        }
        ChanPoint.MergeFrom(other.ChanPoint);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChanId = input.ReadUInt64();
            break;
          }
          case 16: {
            Capacity = input.ReadInt64();
            break;
          }
          case 24: {
            ClosedHeight = input.ReadUInt32();
            break;
          }
          case 34: {
            if (chanPoint_ == null) {
              ChanPoint = new global::Lnrpc.ChannelPoint();
            }
            input.ReadMessage(ChanPoint);
            break;
          }
        }
      }
    }

  }

  public sealed partial class HopHint : pb::IMessage<HopHint> {
    private static readonly pb::MessageParser<HopHint> _parser = new pb::MessageParser<HopHint>(() => new HopHint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HopHint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[103]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HopHint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HopHint(HopHint other) : this() {
      nodeId_ = other.nodeId_;
      chanId_ = other.chanId_;
      feeBaseMsat_ = other.feeBaseMsat_;
      feeProportionalMillionths_ = other.feeProportionalMillionths_;
      cltvExpiryDelta_ = other.cltvExpiryDelta_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HopHint Clone() {
      return new HopHint(this);
    }

    /// <summary>Field number for the "node_id" field.</summary>
    public const int NodeIdFieldNumber = 1;
    private string nodeId_ = "";
    /// <summary>
    //// The public key of the node at the start of the channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NodeId {
      get { return nodeId_; }
      set {
        nodeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "chan_id" field.</summary>
    public const int ChanIdFieldNumber = 2;
    private ulong chanId_;
    /// <summary>
    //// The unique identifier of the channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ChanId {
      get { return chanId_; }
      set {
        chanId_ = value;
      }
    }

    /// <summary>Field number for the "fee_base_msat" field.</summary>
    public const int FeeBaseMsatFieldNumber = 3;
    private uint feeBaseMsat_;
    /// <summary>
    //// The base fee of the channel denominated in millisatoshis.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FeeBaseMsat {
      get { return feeBaseMsat_; }
      set {
        feeBaseMsat_ = value;
      }
    }

    /// <summary>Field number for the "fee_proportional_millionths" field.</summary>
    public const int FeeProportionalMillionthsFieldNumber = 4;
    private uint feeProportionalMillionths_;
    /// <summary>
    ///*
    ///The fee rate of the channel for sending one satoshi across it denominated in
    ///millionths of a satoshi.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FeeProportionalMillionths {
      get { return feeProportionalMillionths_; }
      set {
        feeProportionalMillionths_ = value;
      }
    }

    /// <summary>Field number for the "cltv_expiry_delta" field.</summary>
    public const int CltvExpiryDeltaFieldNumber = 5;
    private uint cltvExpiryDelta_;
    /// <summary>
    //// The time-lock delta of the channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CltvExpiryDelta {
      get { return cltvExpiryDelta_; }
      set {
        cltvExpiryDelta_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HopHint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HopHint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodeId != other.NodeId) return false;
      if (ChanId != other.ChanId) return false;
      if (FeeBaseMsat != other.FeeBaseMsat) return false;
      if (FeeProportionalMillionths != other.FeeProportionalMillionths) return false;
      if (CltvExpiryDelta != other.CltvExpiryDelta) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NodeId.Length != 0) hash ^= NodeId.GetHashCode();
      if (ChanId != 0UL) hash ^= ChanId.GetHashCode();
      if (FeeBaseMsat != 0) hash ^= FeeBaseMsat.GetHashCode();
      if (FeeProportionalMillionths != 0) hash ^= FeeProportionalMillionths.GetHashCode();
      if (CltvExpiryDelta != 0) hash ^= CltvExpiryDelta.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NodeId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NodeId);
      }
      if (ChanId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ChanId);
      }
      if (FeeBaseMsat != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(FeeBaseMsat);
      }
      if (FeeProportionalMillionths != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(FeeProportionalMillionths);
      }
      if (CltvExpiryDelta != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(CltvExpiryDelta);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NodeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NodeId);
      }
      if (ChanId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ChanId);
      }
      if (FeeBaseMsat != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FeeBaseMsat);
      }
      if (FeeProportionalMillionths != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FeeProportionalMillionths);
      }
      if (CltvExpiryDelta != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CltvExpiryDelta);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HopHint other) {
      if (other == null) {
        return;
      }
      if (other.NodeId.Length != 0) {
        NodeId = other.NodeId;
      }
      if (other.ChanId != 0UL) {
        ChanId = other.ChanId;
      }
      if (other.FeeBaseMsat != 0) {
        FeeBaseMsat = other.FeeBaseMsat;
      }
      if (other.FeeProportionalMillionths != 0) {
        FeeProportionalMillionths = other.FeeProportionalMillionths;
      }
      if (other.CltvExpiryDelta != 0) {
        CltvExpiryDelta = other.CltvExpiryDelta;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            NodeId = input.ReadString();
            break;
          }
          case 16: {
            ChanId = input.ReadUInt64();
            break;
          }
          case 24: {
            FeeBaseMsat = input.ReadUInt32();
            break;
          }
          case 32: {
            FeeProportionalMillionths = input.ReadUInt32();
            break;
          }
          case 40: {
            CltvExpiryDelta = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RouteHint : pb::IMessage<RouteHint> {
    private static readonly pb::MessageParser<RouteHint> _parser = new pb::MessageParser<RouteHint>(() => new RouteHint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RouteHint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[104]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RouteHint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RouteHint(RouteHint other) : this() {
      hopHints_ = other.hopHints_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RouteHint Clone() {
      return new RouteHint(this);
    }

    /// <summary>Field number for the "hop_hints" field.</summary>
    public const int HopHintsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Lnrpc.HopHint> _repeated_hopHints_codec
        = pb::FieldCodec.ForMessage(10, global::Lnrpc.HopHint.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.HopHint> hopHints_ = new pbc::RepeatedField<global::Lnrpc.HopHint>();
    /// <summary>
    ///*
    ///A list of hop hints that when chained together can assist in reaching a
    ///specific destination.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.HopHint> HopHints {
      get { return hopHints_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RouteHint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RouteHint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!hopHints_.Equals(other.hopHints_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= hopHints_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      hopHints_.WriteTo(output, _repeated_hopHints_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += hopHints_.CalculateSize(_repeated_hopHints_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RouteHint other) {
      if (other == null) {
        return;
      }
      hopHints_.Add(other.hopHints_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            hopHints_.AddEntriesFrom(input, _repeated_hopHints_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Invoice : pb::IMessage<Invoice> {
    private static readonly pb::MessageParser<Invoice> _parser = new pb::MessageParser<Invoice>(() => new Invoice());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Invoice> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[105]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Invoice() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Invoice(Invoice other) : this() {
      memo_ = other.memo_;
      rPreimage_ = other.rPreimage_;
      rHash_ = other.rHash_;
      value_ = other.value_;
      valueMsat_ = other.valueMsat_;
      settled_ = other.settled_;
      creationDate_ = other.creationDate_;
      settleDate_ = other.settleDate_;
      paymentRequest_ = other.paymentRequest_;
      descriptionHash_ = other.descriptionHash_;
      expiry_ = other.expiry_;
      fallbackAddr_ = other.fallbackAddr_;
      cltvExpiry_ = other.cltvExpiry_;
      routeHints_ = other.routeHints_.Clone();
      private_ = other.private_;
      addIndex_ = other.addIndex_;
      settleIndex_ = other.settleIndex_;
      amtPaid_ = other.amtPaid_;
      amtPaidSat_ = other.amtPaidSat_;
      amtPaidMsat_ = other.amtPaidMsat_;
      state_ = other.state_;
      htlcs_ = other.htlcs_.Clone();
      features_ = other.features_.Clone();
      isKeysend_ = other.isKeysend_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Invoice Clone() {
      return new Invoice(this);
    }

    /// <summary>Field number for the "memo" field.</summary>
    public const int MemoFieldNumber = 1;
    private string memo_ = "";
    /// <summary>
    ///*
    ///An optional memo to attach along with the invoice. Used for record keeping
    ///purposes for the invoice's creator, and will also be set in the description
    ///field of the encoded payment request if the description_hash field is not
    ///being used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Memo {
      get { return memo_; }
      set {
        memo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "r_preimage" field.</summary>
    public const int RPreimageFieldNumber = 3;
    private pb::ByteString rPreimage_ = pb::ByteString.Empty;
    /// <summary>
    ///*
    ///The hex-encoded preimage (32 byte) which will allow settling an incoming
    ///HTLC payable to this preimage. When using REST, this field must be encoded
    ///as base64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RPreimage {
      get { return rPreimage_; }
      set {
        rPreimage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "r_hash" field.</summary>
    public const int RHashFieldNumber = 4;
    private pb::ByteString rHash_ = pb::ByteString.Empty;
    /// <summary>
    ///*
    ///The hash of the preimage. When using REST, this field must be encoded as
    ///base64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RHash {
      get { return rHash_; }
      set {
        rHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 5;
    private long value_;
    /// <summary>
    ///*
    ///The value of this invoice in satoshis
    ///
    ///The fields value and value_msat are mutually exclusive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "value_msat" field.</summary>
    public const int ValueMsatFieldNumber = 23;
    private long valueMsat_;
    /// <summary>
    ///*
    ///The value of this invoice in millisatoshis
    ///
    ///The fields value and value_msat are mutually exclusive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ValueMsat {
      get { return valueMsat_; }
      set {
        valueMsat_ = value;
      }
    }

    /// <summary>Field number for the "settled" field.</summary>
    public const int SettledFieldNumber = 6;
    private bool settled_;
    /// <summary>
    //// Whether this invoice has been fulfilled
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Settled {
      get { return settled_; }
      set {
        settled_ = value;
      }
    }

    /// <summary>Field number for the "creation_date" field.</summary>
    public const int CreationDateFieldNumber = 7;
    private long creationDate_;
    /// <summary>
    //// When this invoice was created
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreationDate {
      get { return creationDate_; }
      set {
        creationDate_ = value;
      }
    }

    /// <summary>Field number for the "settle_date" field.</summary>
    public const int SettleDateFieldNumber = 8;
    private long settleDate_;
    /// <summary>
    //// When this invoice was settled
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SettleDate {
      get { return settleDate_; }
      set {
        settleDate_ = value;
      }
    }

    /// <summary>Field number for the "payment_request" field.</summary>
    public const int PaymentRequestFieldNumber = 9;
    private string paymentRequest_ = "";
    /// <summary>
    ///*
    ///A bare-bones invoice for a payment within the Lightning Network. With the
    ///details of the invoice, the sender has all the data necessary to send a
    ///payment to the recipient.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PaymentRequest {
      get { return paymentRequest_; }
      set {
        paymentRequest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description_hash" field.</summary>
    public const int DescriptionHashFieldNumber = 10;
    private pb::ByteString descriptionHash_ = pb::ByteString.Empty;
    /// <summary>
    ///*
    ///Hash (SHA-256) of a description of the payment. Used if the description of
    ///payment (memo) is too long to naturally fit within the description field
    ///of an encoded payment request. When using REST, this field must be encoded
    ///as base64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DescriptionHash {
      get { return descriptionHash_; }
      set {
        descriptionHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "expiry" field.</summary>
    public const int ExpiryFieldNumber = 11;
    private long expiry_;
    /// <summary>
    //// Payment request expiry time in seconds. Default is 3600 (1 hour).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Expiry {
      get { return expiry_; }
      set {
        expiry_ = value;
      }
    }

    /// <summary>Field number for the "fallback_addr" field.</summary>
    public const int FallbackAddrFieldNumber = 12;
    private string fallbackAddr_ = "";
    /// <summary>
    //// Fallback on-chain address.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FallbackAddr {
      get { return fallbackAddr_; }
      set {
        fallbackAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cltv_expiry" field.</summary>
    public const int CltvExpiryFieldNumber = 13;
    private ulong cltvExpiry_;
    /// <summary>
    //// Delta to use for the time-lock of the CLTV extended to the final hop.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CltvExpiry {
      get { return cltvExpiry_; }
      set {
        cltvExpiry_ = value;
      }
    }

    /// <summary>Field number for the "route_hints" field.</summary>
    public const int RouteHintsFieldNumber = 14;
    private static readonly pb::FieldCodec<global::Lnrpc.RouteHint> _repeated_routeHints_codec
        = pb::FieldCodec.ForMessage(114, global::Lnrpc.RouteHint.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.RouteHint> routeHints_ = new pbc::RepeatedField<global::Lnrpc.RouteHint>();
    /// <summary>
    ///*
    ///Route hints that can each be individually used to assist in reaching the
    ///invoice's destination.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.RouteHint> RouteHints {
      get { return routeHints_; }
    }

    /// <summary>Field number for the "private" field.</summary>
    public const int PrivateFieldNumber = 15;
    private bool private_;
    /// <summary>
    //// Whether this invoice should include routing hints for private channels.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Private {
      get { return private_; }
      set {
        private_ = value;
      }
    }

    /// <summary>Field number for the "add_index" field.</summary>
    public const int AddIndexFieldNumber = 16;
    private ulong addIndex_;
    /// <summary>
    ///*
    ///The "add" index of this invoice. Each newly created invoice will increment
    ///this index making it monotonically increasing. Callers to the
    ///SubscribeInvoices call can use this to instantly get notified of all added
    ///invoices with an add_index greater than this one.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AddIndex {
      get { return addIndex_; }
      set {
        addIndex_ = value;
      }
    }

    /// <summary>Field number for the "settle_index" field.</summary>
    public const int SettleIndexFieldNumber = 17;
    private ulong settleIndex_;
    /// <summary>
    ///*
    ///The "settle" index of this invoice. Each newly settled invoice will
    ///increment this index making it monotonically increasing. Callers to the
    ///SubscribeInvoices call can use this to instantly get notified of all
    ///settled invoices with an settle_index greater than this one.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SettleIndex {
      get { return settleIndex_; }
      set {
        settleIndex_ = value;
      }
    }

    /// <summary>Field number for the "amt_paid" field.</summary>
    public const int AmtPaidFieldNumber = 18;
    private long amtPaid_;
    /// <summary>
    //// Deprecated, use amt_paid_sat or amt_paid_msat.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmtPaid {
      get { return amtPaid_; }
      set {
        amtPaid_ = value;
      }
    }

    /// <summary>Field number for the "amt_paid_sat" field.</summary>
    public const int AmtPaidSatFieldNumber = 19;
    private long amtPaidSat_;
    /// <summary>
    ///*
    ///The amount that was accepted for this invoice, in satoshis. This will ONLY
    ///be set if this invoice has been settled. We provide this field as if the
    ///invoice was created with a zero value, then we need to record what amount
    ///was ultimately accepted. Additionally, it's possible that the sender paid
    ///MORE that was specified in the original invoice. So we'll record that here
    ///as well.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmtPaidSat {
      get { return amtPaidSat_; }
      set {
        amtPaidSat_ = value;
      }
    }

    /// <summary>Field number for the "amt_paid_msat" field.</summary>
    public const int AmtPaidMsatFieldNumber = 20;
    private long amtPaidMsat_;
    /// <summary>
    ///*
    ///The amount that was accepted for this invoice, in millisatoshis. This will
    ///ONLY be set if this invoice has been settled. We provide this field as if
    ///the invoice was created with a zero value, then we need to record what
    ///amount was ultimately accepted. Additionally, it's possible that the sender
    ///paid MORE that was specified in the original invoice. So we'll record that
    ///here as well.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmtPaidMsat {
      get { return amtPaidMsat_; }
      set {
        amtPaidMsat_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 21;
    private global::Lnrpc.Invoice.Types.InvoiceState state_ = global::Lnrpc.Invoice.Types.InvoiceState.Open;
    /// <summary>
    ///*
    ///The state the invoice is in.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.Invoice.Types.InvoiceState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "htlcs" field.</summary>
    public const int HtlcsFieldNumber = 22;
    private static readonly pb::FieldCodec<global::Lnrpc.InvoiceHTLC> _repeated_htlcs_codec
        = pb::FieldCodec.ForMessage(178, global::Lnrpc.InvoiceHTLC.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.InvoiceHTLC> htlcs_ = new pbc::RepeatedField<global::Lnrpc.InvoiceHTLC>();
    /// <summary>
    //// List of HTLCs paying to this invoice [EXPERIMENTAL].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.InvoiceHTLC> Htlcs {
      get { return htlcs_; }
    }

    /// <summary>Field number for the "features" field.</summary>
    public const int FeaturesFieldNumber = 24;
    private static readonly pbc::MapField<uint, global::Lnrpc.Feature>.Codec _map_features_codec
        = new pbc::MapField<uint, global::Lnrpc.Feature>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForMessage(18, global::Lnrpc.Feature.Parser), 194);
    private readonly pbc::MapField<uint, global::Lnrpc.Feature> features_ = new pbc::MapField<uint, global::Lnrpc.Feature>();
    /// <summary>
    //// List of features advertised on the invoice.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, global::Lnrpc.Feature> Features {
      get { return features_; }
    }

    /// <summary>Field number for the "is_keysend" field.</summary>
    public const int IsKeysendFieldNumber = 25;
    private bool isKeysend_;
    /// <summary>
    ///*
    ///Indicates if this invoice was a spontaneous payment that arrived via keysend
    ///[EXPERIMENTAL].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsKeysend {
      get { return isKeysend_; }
      set {
        isKeysend_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Invoice);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Invoice other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Memo != other.Memo) return false;
      if (RPreimage != other.RPreimage) return false;
      if (RHash != other.RHash) return false;
      if (Value != other.Value) return false;
      if (ValueMsat != other.ValueMsat) return false;
      if (Settled != other.Settled) return false;
      if (CreationDate != other.CreationDate) return false;
      if (SettleDate != other.SettleDate) return false;
      if (PaymentRequest != other.PaymentRequest) return false;
      if (DescriptionHash != other.DescriptionHash) return false;
      if (Expiry != other.Expiry) return false;
      if (FallbackAddr != other.FallbackAddr) return false;
      if (CltvExpiry != other.CltvExpiry) return false;
      if(!routeHints_.Equals(other.routeHints_)) return false;
      if (Private != other.Private) return false;
      if (AddIndex != other.AddIndex) return false;
      if (SettleIndex != other.SettleIndex) return false;
      if (AmtPaid != other.AmtPaid) return false;
      if (AmtPaidSat != other.AmtPaidSat) return false;
      if (AmtPaidMsat != other.AmtPaidMsat) return false;
      if (State != other.State) return false;
      if(!htlcs_.Equals(other.htlcs_)) return false;
      if (!Features.Equals(other.Features)) return false;
      if (IsKeysend != other.IsKeysend) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Memo.Length != 0) hash ^= Memo.GetHashCode();
      if (RPreimage.Length != 0) hash ^= RPreimage.GetHashCode();
      if (RHash.Length != 0) hash ^= RHash.GetHashCode();
      if (Value != 0L) hash ^= Value.GetHashCode();
      if (ValueMsat != 0L) hash ^= ValueMsat.GetHashCode();
      if (Settled != false) hash ^= Settled.GetHashCode();
      if (CreationDate != 0L) hash ^= CreationDate.GetHashCode();
      if (SettleDate != 0L) hash ^= SettleDate.GetHashCode();
      if (PaymentRequest.Length != 0) hash ^= PaymentRequest.GetHashCode();
      if (DescriptionHash.Length != 0) hash ^= DescriptionHash.GetHashCode();
      if (Expiry != 0L) hash ^= Expiry.GetHashCode();
      if (FallbackAddr.Length != 0) hash ^= FallbackAddr.GetHashCode();
      if (CltvExpiry != 0UL) hash ^= CltvExpiry.GetHashCode();
      hash ^= routeHints_.GetHashCode();
      if (Private != false) hash ^= Private.GetHashCode();
      if (AddIndex != 0UL) hash ^= AddIndex.GetHashCode();
      if (SettleIndex != 0UL) hash ^= SettleIndex.GetHashCode();
      if (AmtPaid != 0L) hash ^= AmtPaid.GetHashCode();
      if (AmtPaidSat != 0L) hash ^= AmtPaidSat.GetHashCode();
      if (AmtPaidMsat != 0L) hash ^= AmtPaidMsat.GetHashCode();
      if (State != global::Lnrpc.Invoice.Types.InvoiceState.Open) hash ^= State.GetHashCode();
      hash ^= htlcs_.GetHashCode();
      hash ^= Features.GetHashCode();
      if (IsKeysend != false) hash ^= IsKeysend.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Memo.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Memo);
      }
      if (RPreimage.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(RPreimage);
      }
      if (RHash.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(RHash);
      }
      if (Value != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Value);
      }
      if (Settled != false) {
        output.WriteRawTag(48);
        output.WriteBool(Settled);
      }
      if (CreationDate != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(CreationDate);
      }
      if (SettleDate != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(SettleDate);
      }
      if (PaymentRequest.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(PaymentRequest);
      }
      if (DescriptionHash.Length != 0) {
        output.WriteRawTag(82);
        output.WriteBytes(DescriptionHash);
      }
      if (Expiry != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(Expiry);
      }
      if (FallbackAddr.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(FallbackAddr);
      }
      if (CltvExpiry != 0UL) {
        output.WriteRawTag(104);
        output.WriteUInt64(CltvExpiry);
      }
      routeHints_.WriteTo(output, _repeated_routeHints_codec);
      if (Private != false) {
        output.WriteRawTag(120);
        output.WriteBool(Private);
      }
      if (AddIndex != 0UL) {
        output.WriteRawTag(128, 1);
        output.WriteUInt64(AddIndex);
      }
      if (SettleIndex != 0UL) {
        output.WriteRawTag(136, 1);
        output.WriteUInt64(SettleIndex);
      }
      if (AmtPaid != 0L) {
        output.WriteRawTag(144, 1);
        output.WriteInt64(AmtPaid);
      }
      if (AmtPaidSat != 0L) {
        output.WriteRawTag(152, 1);
        output.WriteInt64(AmtPaidSat);
      }
      if (AmtPaidMsat != 0L) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(AmtPaidMsat);
      }
      if (State != global::Lnrpc.Invoice.Types.InvoiceState.Open) {
        output.WriteRawTag(168, 1);
        output.WriteEnum((int) State);
      }
      htlcs_.WriteTo(output, _repeated_htlcs_codec);
      if (ValueMsat != 0L) {
        output.WriteRawTag(184, 1);
        output.WriteInt64(ValueMsat);
      }
      features_.WriteTo(output, _map_features_codec);
      if (IsKeysend != false) {
        output.WriteRawTag(200, 1);
        output.WriteBool(IsKeysend);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Memo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Memo);
      }
      if (RPreimage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RPreimage);
      }
      if (RHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RHash);
      }
      if (Value != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Value);
      }
      if (ValueMsat != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ValueMsat);
      }
      if (Settled != false) {
        size += 1 + 1;
      }
      if (CreationDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreationDate);
      }
      if (SettleDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SettleDate);
      }
      if (PaymentRequest.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PaymentRequest);
      }
      if (DescriptionHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(DescriptionHash);
      }
      if (Expiry != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Expiry);
      }
      if (FallbackAddr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FallbackAddr);
      }
      if (CltvExpiry != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CltvExpiry);
      }
      size += routeHints_.CalculateSize(_repeated_routeHints_codec);
      if (Private != false) {
        size += 1 + 1;
      }
      if (AddIndex != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(AddIndex);
      }
      if (SettleIndex != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(SettleIndex);
      }
      if (AmtPaid != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AmtPaid);
      }
      if (AmtPaidSat != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AmtPaidSat);
      }
      if (AmtPaidMsat != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AmtPaidMsat);
      }
      if (State != global::Lnrpc.Invoice.Types.InvoiceState.Open) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      size += htlcs_.CalculateSize(_repeated_htlcs_codec);
      size += features_.CalculateSize(_map_features_codec);
      if (IsKeysend != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Invoice other) {
      if (other == null) {
        return;
      }
      if (other.Memo.Length != 0) {
        Memo = other.Memo;
      }
      if (other.RPreimage.Length != 0) {
        RPreimage = other.RPreimage;
      }
      if (other.RHash.Length != 0) {
        RHash = other.RHash;
      }
      if (other.Value != 0L) {
        Value = other.Value;
      }
      if (other.ValueMsat != 0L) {
        ValueMsat = other.ValueMsat;
      }
      if (other.Settled != false) {
        Settled = other.Settled;
      }
      if (other.CreationDate != 0L) {
        CreationDate = other.CreationDate;
      }
      if (other.SettleDate != 0L) {
        SettleDate = other.SettleDate;
      }
      if (other.PaymentRequest.Length != 0) {
        PaymentRequest = other.PaymentRequest;
      }
      if (other.DescriptionHash.Length != 0) {
        DescriptionHash = other.DescriptionHash;
      }
      if (other.Expiry != 0L) {
        Expiry = other.Expiry;
      }
      if (other.FallbackAddr.Length != 0) {
        FallbackAddr = other.FallbackAddr;
      }
      if (other.CltvExpiry != 0UL) {
        CltvExpiry = other.CltvExpiry;
      }
      routeHints_.Add(other.routeHints_);
      if (other.Private != false) {
        Private = other.Private;
      }
      if (other.AddIndex != 0UL) {
        AddIndex = other.AddIndex;
      }
      if (other.SettleIndex != 0UL) {
        SettleIndex = other.SettleIndex;
      }
      if (other.AmtPaid != 0L) {
        AmtPaid = other.AmtPaid;
      }
      if (other.AmtPaidSat != 0L) {
        AmtPaidSat = other.AmtPaidSat;
      }
      if (other.AmtPaidMsat != 0L) {
        AmtPaidMsat = other.AmtPaidMsat;
      }
      if (other.State != global::Lnrpc.Invoice.Types.InvoiceState.Open) {
        State = other.State;
      }
      htlcs_.Add(other.htlcs_);
      features_.Add(other.features_);
      if (other.IsKeysend != false) {
        IsKeysend = other.IsKeysend;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Memo = input.ReadString();
            break;
          }
          case 26: {
            RPreimage = input.ReadBytes();
            break;
          }
          case 34: {
            RHash = input.ReadBytes();
            break;
          }
          case 40: {
            Value = input.ReadInt64();
            break;
          }
          case 48: {
            Settled = input.ReadBool();
            break;
          }
          case 56: {
            CreationDate = input.ReadInt64();
            break;
          }
          case 64: {
            SettleDate = input.ReadInt64();
            break;
          }
          case 74: {
            PaymentRequest = input.ReadString();
            break;
          }
          case 82: {
            DescriptionHash = input.ReadBytes();
            break;
          }
          case 88: {
            Expiry = input.ReadInt64();
            break;
          }
          case 98: {
            FallbackAddr = input.ReadString();
            break;
          }
          case 104: {
            CltvExpiry = input.ReadUInt64();
            break;
          }
          case 114: {
            routeHints_.AddEntriesFrom(input, _repeated_routeHints_codec);
            break;
          }
          case 120: {
            Private = input.ReadBool();
            break;
          }
          case 128: {
            AddIndex = input.ReadUInt64();
            break;
          }
          case 136: {
            SettleIndex = input.ReadUInt64();
            break;
          }
          case 144: {
            AmtPaid = input.ReadInt64();
            break;
          }
          case 152: {
            AmtPaidSat = input.ReadInt64();
            break;
          }
          case 160: {
            AmtPaidMsat = input.ReadInt64();
            break;
          }
          case 168: {
            State = (global::Lnrpc.Invoice.Types.InvoiceState) input.ReadEnum();
            break;
          }
          case 178: {
            htlcs_.AddEntriesFrom(input, _repeated_htlcs_codec);
            break;
          }
          case 184: {
            ValueMsat = input.ReadInt64();
            break;
          }
          case 194: {
            features_.AddEntriesFrom(input, _map_features_codec);
            break;
          }
          case 200: {
            IsKeysend = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Invoice message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum InvoiceState {
        [pbr::OriginalName("OPEN")] Open = 0,
        [pbr::OriginalName("SETTLED")] Settled = 1,
        [pbr::OriginalName("CANCELED")] Canceled = 2,
        [pbr::OriginalName("ACCEPTED")] Accepted = 3,
      }

    }
    #endregion

  }

  /// <summary>
  //// Details of an HTLC that paid to an invoice
  /// </summary>
  public sealed partial class InvoiceHTLC : pb::IMessage<InvoiceHTLC> {
    private static readonly pb::MessageParser<InvoiceHTLC> _parser = new pb::MessageParser<InvoiceHTLC>(() => new InvoiceHTLC());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InvoiceHTLC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[106]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InvoiceHTLC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InvoiceHTLC(InvoiceHTLC other) : this() {
      chanId_ = other.chanId_;
      htlcIndex_ = other.htlcIndex_;
      amtMsat_ = other.amtMsat_;
      acceptHeight_ = other.acceptHeight_;
      acceptTime_ = other.acceptTime_;
      resolveTime_ = other.resolveTime_;
      expiryHeight_ = other.expiryHeight_;
      state_ = other.state_;
      customRecords_ = other.customRecords_.Clone();
      mppTotalAmtMsat_ = other.mppTotalAmtMsat_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InvoiceHTLC Clone() {
      return new InvoiceHTLC(this);
    }

    /// <summary>Field number for the "chan_id" field.</summary>
    public const int ChanIdFieldNumber = 1;
    private ulong chanId_;
    /// <summary>
    //// Short channel id over which the htlc was received.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ChanId {
      get { return chanId_; }
      set {
        chanId_ = value;
      }
    }

    /// <summary>Field number for the "htlc_index" field.</summary>
    public const int HtlcIndexFieldNumber = 2;
    private ulong htlcIndex_;
    /// <summary>
    //// Index identifying the htlc on the channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong HtlcIndex {
      get { return htlcIndex_; }
      set {
        htlcIndex_ = value;
      }
    }

    /// <summary>Field number for the "amt_msat" field.</summary>
    public const int AmtMsatFieldNumber = 3;
    private ulong amtMsat_;
    /// <summary>
    //// The amount of the htlc in msat.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AmtMsat {
      get { return amtMsat_; }
      set {
        amtMsat_ = value;
      }
    }

    /// <summary>Field number for the "accept_height" field.</summary>
    public const int AcceptHeightFieldNumber = 4;
    private int acceptHeight_;
    /// <summary>
    //// Block height at which this htlc was accepted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AcceptHeight {
      get { return acceptHeight_; }
      set {
        acceptHeight_ = value;
      }
    }

    /// <summary>Field number for the "accept_time" field.</summary>
    public const int AcceptTimeFieldNumber = 5;
    private long acceptTime_;
    /// <summary>
    //// Time at which this htlc was accepted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AcceptTime {
      get { return acceptTime_; }
      set {
        acceptTime_ = value;
      }
    }

    /// <summary>Field number for the "resolve_time" field.</summary>
    public const int ResolveTimeFieldNumber = 6;
    private long resolveTime_;
    /// <summary>
    //// Time at which this htlc was settled or canceled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ResolveTime {
      get { return resolveTime_; }
      set {
        resolveTime_ = value;
      }
    }

    /// <summary>Field number for the "expiry_height" field.</summary>
    public const int ExpiryHeightFieldNumber = 7;
    private int expiryHeight_;
    /// <summary>
    //// Block height at which this htlc expires.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExpiryHeight {
      get { return expiryHeight_; }
      set {
        expiryHeight_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 8;
    private global::Lnrpc.InvoiceHTLCState state_ = global::Lnrpc.InvoiceHTLCState.Accepted;
    /// <summary>
    //// Current state the htlc is in.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.InvoiceHTLCState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "custom_records" field.</summary>
    public const int CustomRecordsFieldNumber = 9;
    private static readonly pbc::MapField<ulong, pb::ByteString>.Codec _map_customRecords_codec
        = new pbc::MapField<ulong, pb::ByteString>.Codec(pb::FieldCodec.ForUInt64(8, 0UL), pb::FieldCodec.ForBytes(18, pb::ByteString.Empty), 74);
    private readonly pbc::MapField<ulong, pb::ByteString> customRecords_ = new pbc::MapField<ulong, pb::ByteString>();
    /// <summary>
    //// Custom tlv records.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<ulong, pb::ByteString> CustomRecords {
      get { return customRecords_; }
    }

    /// <summary>Field number for the "mpp_total_amt_msat" field.</summary>
    public const int MppTotalAmtMsatFieldNumber = 10;
    private ulong mppTotalAmtMsat_;
    /// <summary>
    //// The total amount of the mpp payment in msat.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MppTotalAmtMsat {
      get { return mppTotalAmtMsat_; }
      set {
        mppTotalAmtMsat_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InvoiceHTLC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InvoiceHTLC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChanId != other.ChanId) return false;
      if (HtlcIndex != other.HtlcIndex) return false;
      if (AmtMsat != other.AmtMsat) return false;
      if (AcceptHeight != other.AcceptHeight) return false;
      if (AcceptTime != other.AcceptTime) return false;
      if (ResolveTime != other.ResolveTime) return false;
      if (ExpiryHeight != other.ExpiryHeight) return false;
      if (State != other.State) return false;
      if (!CustomRecords.Equals(other.CustomRecords)) return false;
      if (MppTotalAmtMsat != other.MppTotalAmtMsat) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChanId != 0UL) hash ^= ChanId.GetHashCode();
      if (HtlcIndex != 0UL) hash ^= HtlcIndex.GetHashCode();
      if (AmtMsat != 0UL) hash ^= AmtMsat.GetHashCode();
      if (AcceptHeight != 0) hash ^= AcceptHeight.GetHashCode();
      if (AcceptTime != 0L) hash ^= AcceptTime.GetHashCode();
      if (ResolveTime != 0L) hash ^= ResolveTime.GetHashCode();
      if (ExpiryHeight != 0) hash ^= ExpiryHeight.GetHashCode();
      if (State != global::Lnrpc.InvoiceHTLCState.Accepted) hash ^= State.GetHashCode();
      hash ^= CustomRecords.GetHashCode();
      if (MppTotalAmtMsat != 0UL) hash ^= MppTotalAmtMsat.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChanId != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ChanId);
      }
      if (HtlcIndex != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(HtlcIndex);
      }
      if (AmtMsat != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(AmtMsat);
      }
      if (AcceptHeight != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(AcceptHeight);
      }
      if (AcceptTime != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(AcceptTime);
      }
      if (ResolveTime != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(ResolveTime);
      }
      if (ExpiryHeight != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ExpiryHeight);
      }
      if (State != global::Lnrpc.InvoiceHTLCState.Accepted) {
        output.WriteRawTag(64);
        output.WriteEnum((int) State);
      }
      customRecords_.WriteTo(output, _map_customRecords_codec);
      if (MppTotalAmtMsat != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(MppTotalAmtMsat);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChanId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ChanId);
      }
      if (HtlcIndex != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(HtlcIndex);
      }
      if (AmtMsat != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AmtMsat);
      }
      if (AcceptHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AcceptHeight);
      }
      if (AcceptTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AcceptTime);
      }
      if (ResolveTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ResolveTime);
      }
      if (ExpiryHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExpiryHeight);
      }
      if (State != global::Lnrpc.InvoiceHTLCState.Accepted) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      size += customRecords_.CalculateSize(_map_customRecords_codec);
      if (MppTotalAmtMsat != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MppTotalAmtMsat);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InvoiceHTLC other) {
      if (other == null) {
        return;
      }
      if (other.ChanId != 0UL) {
        ChanId = other.ChanId;
      }
      if (other.HtlcIndex != 0UL) {
        HtlcIndex = other.HtlcIndex;
      }
      if (other.AmtMsat != 0UL) {
        AmtMsat = other.AmtMsat;
      }
      if (other.AcceptHeight != 0) {
        AcceptHeight = other.AcceptHeight;
      }
      if (other.AcceptTime != 0L) {
        AcceptTime = other.AcceptTime;
      }
      if (other.ResolveTime != 0L) {
        ResolveTime = other.ResolveTime;
      }
      if (other.ExpiryHeight != 0) {
        ExpiryHeight = other.ExpiryHeight;
      }
      if (other.State != global::Lnrpc.InvoiceHTLCState.Accepted) {
        State = other.State;
      }
      customRecords_.Add(other.customRecords_);
      if (other.MppTotalAmtMsat != 0UL) {
        MppTotalAmtMsat = other.MppTotalAmtMsat;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChanId = input.ReadUInt64();
            break;
          }
          case 16: {
            HtlcIndex = input.ReadUInt64();
            break;
          }
          case 24: {
            AmtMsat = input.ReadUInt64();
            break;
          }
          case 32: {
            AcceptHeight = input.ReadInt32();
            break;
          }
          case 40: {
            AcceptTime = input.ReadInt64();
            break;
          }
          case 48: {
            ResolveTime = input.ReadInt64();
            break;
          }
          case 56: {
            ExpiryHeight = input.ReadInt32();
            break;
          }
          case 64: {
            State = (global::Lnrpc.InvoiceHTLCState) input.ReadEnum();
            break;
          }
          case 74: {
            customRecords_.AddEntriesFrom(input, _map_customRecords_codec);
            break;
          }
          case 80: {
            MppTotalAmtMsat = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddInvoiceResponse : pb::IMessage<AddInvoiceResponse> {
    private static readonly pb::MessageParser<AddInvoiceResponse> _parser = new pb::MessageParser<AddInvoiceResponse>(() => new AddInvoiceResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddInvoiceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[107]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddInvoiceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddInvoiceResponse(AddInvoiceResponse other) : this() {
      rHash_ = other.rHash_;
      paymentRequest_ = other.paymentRequest_;
      addIndex_ = other.addIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddInvoiceResponse Clone() {
      return new AddInvoiceResponse(this);
    }

    /// <summary>Field number for the "r_hash" field.</summary>
    public const int RHashFieldNumber = 1;
    private pb::ByteString rHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RHash {
      get { return rHash_; }
      set {
        rHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payment_request" field.</summary>
    public const int PaymentRequestFieldNumber = 2;
    private string paymentRequest_ = "";
    /// <summary>
    ///*
    ///A bare-bones invoice for a payment within the Lightning Network. With the
    ///details of the invoice, the sender has all the data necessary to send a
    ///payment to the recipient.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PaymentRequest {
      get { return paymentRequest_; }
      set {
        paymentRequest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "add_index" field.</summary>
    public const int AddIndexFieldNumber = 16;
    private ulong addIndex_;
    /// <summary>
    ///*
    ///The "add" index of this invoice. Each newly created invoice will increment
    ///this index making it monotonically increasing. Callers to the
    ///SubscribeInvoices call can use this to instantly get notified of all added
    ///invoices with an add_index greater than this one.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AddIndex {
      get { return addIndex_; }
      set {
        addIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddInvoiceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddInvoiceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RHash != other.RHash) return false;
      if (PaymentRequest != other.PaymentRequest) return false;
      if (AddIndex != other.AddIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RHash.Length != 0) hash ^= RHash.GetHashCode();
      if (PaymentRequest.Length != 0) hash ^= PaymentRequest.GetHashCode();
      if (AddIndex != 0UL) hash ^= AddIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RHash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(RHash);
      }
      if (PaymentRequest.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PaymentRequest);
      }
      if (AddIndex != 0UL) {
        output.WriteRawTag(128, 1);
        output.WriteUInt64(AddIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RHash);
      }
      if (PaymentRequest.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PaymentRequest);
      }
      if (AddIndex != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(AddIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddInvoiceResponse other) {
      if (other == null) {
        return;
      }
      if (other.RHash.Length != 0) {
        RHash = other.RHash;
      }
      if (other.PaymentRequest.Length != 0) {
        PaymentRequest = other.PaymentRequest;
      }
      if (other.AddIndex != 0UL) {
        AddIndex = other.AddIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RHash = input.ReadBytes();
            break;
          }
          case 18: {
            PaymentRequest = input.ReadString();
            break;
          }
          case 128: {
            AddIndex = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PaymentHash : pb::IMessage<PaymentHash> {
    private static readonly pb::MessageParser<PaymentHash> _parser = new pb::MessageParser<PaymentHash>(() => new PaymentHash());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PaymentHash> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[108]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaymentHash() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaymentHash(PaymentHash other) : this() {
      rHashStr_ = other.rHashStr_;
      rHash_ = other.rHash_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PaymentHash Clone() {
      return new PaymentHash(this);
    }

    /// <summary>Field number for the "r_hash_str" field.</summary>
    public const int RHashStrFieldNumber = 1;
    private string rHashStr_ = "";
    /// <summary>
    ///*
    ///The hex-encoded payment hash of the invoice to be looked up. The passed
    ///payment hash must be exactly 32 bytes, otherwise an error is returned.
    ///Deprecated now that the REST gateway supports base64 encoding of bytes
    ///fields.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RHashStr {
      get { return rHashStr_; }
      set {
        rHashStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "r_hash" field.</summary>
    public const int RHashFieldNumber = 2;
    private pb::ByteString rHash_ = pb::ByteString.Empty;
    /// <summary>
    ///*
    ///The payment hash of the invoice to be looked up. When using REST, this field
    ///must be encoded as base64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RHash {
      get { return rHash_; }
      set {
        rHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PaymentHash);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PaymentHash other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RHashStr != other.RHashStr) return false;
      if (RHash != other.RHash) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RHashStr.Length != 0) hash ^= RHashStr.GetHashCode();
      if (RHash.Length != 0) hash ^= RHash.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RHashStr.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RHashStr);
      }
      if (RHash.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(RHash);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RHashStr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RHashStr);
      }
      if (RHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RHash);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PaymentHash other) {
      if (other == null) {
        return;
      }
      if (other.RHashStr.Length != 0) {
        RHashStr = other.RHashStr;
      }
      if (other.RHash.Length != 0) {
        RHash = other.RHash;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RHashStr = input.ReadString();
            break;
          }
          case 18: {
            RHash = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListInvoiceRequest : pb::IMessage<ListInvoiceRequest> {
    private static readonly pb::MessageParser<ListInvoiceRequest> _parser = new pb::MessageParser<ListInvoiceRequest>(() => new ListInvoiceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListInvoiceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[109]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInvoiceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInvoiceRequest(ListInvoiceRequest other) : this() {
      pendingOnly_ = other.pendingOnly_;
      indexOffset_ = other.indexOffset_;
      numMaxInvoices_ = other.numMaxInvoices_;
      reversed_ = other.reversed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInvoiceRequest Clone() {
      return new ListInvoiceRequest(this);
    }

    /// <summary>Field number for the "pending_only" field.</summary>
    public const int PendingOnlyFieldNumber = 1;
    private bool pendingOnly_;
    /// <summary>
    ///*
    ///If set, only invoices that are not settled and not canceled will be returned
    ///in the response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PendingOnly {
      get { return pendingOnly_; }
      set {
        pendingOnly_ = value;
      }
    }

    /// <summary>Field number for the "index_offset" field.</summary>
    public const int IndexOffsetFieldNumber = 4;
    private ulong indexOffset_;
    /// <summary>
    ///*
    ///The index of an invoice that will be used as either the start or end of a
    ///query to determine which invoices should be returned in the response.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong IndexOffset {
      get { return indexOffset_; }
      set {
        indexOffset_ = value;
      }
    }

    /// <summary>Field number for the "num_max_invoices" field.</summary>
    public const int NumMaxInvoicesFieldNumber = 5;
    private ulong numMaxInvoices_;
    /// <summary>
    //// The max number of invoices to return in the response to this query.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NumMaxInvoices {
      get { return numMaxInvoices_; }
      set {
        numMaxInvoices_ = value;
      }
    }

    /// <summary>Field number for the "reversed" field.</summary>
    public const int ReversedFieldNumber = 6;
    private bool reversed_;
    /// <summary>
    ///*
    ///If set, the invoices returned will result from seeking backwards from the
    ///specified index offset. This can be used to paginate backwards.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Reversed {
      get { return reversed_; }
      set {
        reversed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListInvoiceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListInvoiceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PendingOnly != other.PendingOnly) return false;
      if (IndexOffset != other.IndexOffset) return false;
      if (NumMaxInvoices != other.NumMaxInvoices) return false;
      if (Reversed != other.Reversed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PendingOnly != false) hash ^= PendingOnly.GetHashCode();
      if (IndexOffset != 0UL) hash ^= IndexOffset.GetHashCode();
      if (NumMaxInvoices != 0UL) hash ^= NumMaxInvoices.GetHashCode();
      if (Reversed != false) hash ^= Reversed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PendingOnly != false) {
        output.WriteRawTag(8);
        output.WriteBool(PendingOnly);
      }
      if (IndexOffset != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(IndexOffset);
      }
      if (NumMaxInvoices != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(NumMaxInvoices);
      }
      if (Reversed != false) {
        output.WriteRawTag(48);
        output.WriteBool(Reversed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PendingOnly != false) {
        size += 1 + 1;
      }
      if (IndexOffset != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(IndexOffset);
      }
      if (NumMaxInvoices != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NumMaxInvoices);
      }
      if (Reversed != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListInvoiceRequest other) {
      if (other == null) {
        return;
      }
      if (other.PendingOnly != false) {
        PendingOnly = other.PendingOnly;
      }
      if (other.IndexOffset != 0UL) {
        IndexOffset = other.IndexOffset;
      }
      if (other.NumMaxInvoices != 0UL) {
        NumMaxInvoices = other.NumMaxInvoices;
      }
      if (other.Reversed != false) {
        Reversed = other.Reversed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PendingOnly = input.ReadBool();
            break;
          }
          case 32: {
            IndexOffset = input.ReadUInt64();
            break;
          }
          case 40: {
            NumMaxInvoices = input.ReadUInt64();
            break;
          }
          case 48: {
            Reversed = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListInvoiceResponse : pb::IMessage<ListInvoiceResponse> {
    private static readonly pb::MessageParser<ListInvoiceResponse> _parser = new pb::MessageParser<ListInvoiceResponse>(() => new ListInvoiceResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListInvoiceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[110]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInvoiceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInvoiceResponse(ListInvoiceResponse other) : this() {
      invoices_ = other.invoices_.Clone();
      lastIndexOffset_ = other.lastIndexOffset_;
      firstIndexOffset_ = other.firstIndexOffset_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListInvoiceResponse Clone() {
      return new ListInvoiceResponse(this);
    }

    /// <summary>Field number for the "invoices" field.</summary>
    public const int InvoicesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Lnrpc.Invoice> _repeated_invoices_codec
        = pb::FieldCodec.ForMessage(10, global::Lnrpc.Invoice.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.Invoice> invoices_ = new pbc::RepeatedField<global::Lnrpc.Invoice>();
    /// <summary>
    ///*
    ///A list of invoices from the time slice of the time series specified in the
    ///request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.Invoice> Invoices {
      get { return invoices_; }
    }

    /// <summary>Field number for the "last_index_offset" field.</summary>
    public const int LastIndexOffsetFieldNumber = 2;
    private ulong lastIndexOffset_;
    /// <summary>
    ///*
    ///The index of the last item in the set of returned invoices. This can be used
    ///to seek further, pagination style.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LastIndexOffset {
      get { return lastIndexOffset_; }
      set {
        lastIndexOffset_ = value;
      }
    }

    /// <summary>Field number for the "first_index_offset" field.</summary>
    public const int FirstIndexOffsetFieldNumber = 3;
    private ulong firstIndexOffset_;
    /// <summary>
    ///*
    ///The index of the last item in the set of returned invoices. This can be used
    ///to seek backwards, pagination style.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FirstIndexOffset {
      get { return firstIndexOffset_; }
      set {
        firstIndexOffset_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListInvoiceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListInvoiceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!invoices_.Equals(other.invoices_)) return false;
      if (LastIndexOffset != other.LastIndexOffset) return false;
      if (FirstIndexOffset != other.FirstIndexOffset) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= invoices_.GetHashCode();
      if (LastIndexOffset != 0UL) hash ^= LastIndexOffset.GetHashCode();
      if (FirstIndexOffset != 0UL) hash ^= FirstIndexOffset.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      invoices_.WriteTo(output, _repeated_invoices_codec);
      if (LastIndexOffset != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(LastIndexOffset);
      }
      if (FirstIndexOffset != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(FirstIndexOffset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += invoices_.CalculateSize(_repeated_invoices_codec);
      if (LastIndexOffset != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LastIndexOffset);
      }
      if (FirstIndexOffset != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FirstIndexOffset);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListInvoiceResponse other) {
      if (other == null) {
        return;
      }
      invoices_.Add(other.invoices_);
      if (other.LastIndexOffset != 0UL) {
        LastIndexOffset = other.LastIndexOffset;
      }
      if (other.FirstIndexOffset != 0UL) {
        FirstIndexOffset = other.FirstIndexOffset;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            invoices_.AddEntriesFrom(input, _repeated_invoices_codec);
            break;
          }
          case 16: {
            LastIndexOffset = input.ReadUInt64();
            break;
          }
          case 24: {
            FirstIndexOffset = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InvoiceSubscription : pb::IMessage<InvoiceSubscription> {
    private static readonly pb::MessageParser<InvoiceSubscription> _parser = new pb::MessageParser<InvoiceSubscription>(() => new InvoiceSubscription());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InvoiceSubscription> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[111]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InvoiceSubscription() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InvoiceSubscription(InvoiceSubscription other) : this() {
      addIndex_ = other.addIndex_;
      settleIndex_ = other.settleIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InvoiceSubscription Clone() {
      return new InvoiceSubscription(this);
    }

    /// <summary>Field number for the "add_index" field.</summary>
    public const int AddIndexFieldNumber = 1;
    private ulong addIndex_;
    /// <summary>
    ///*
    ///If specified (non-zero), then we'll first start by sending out
    ///notifications for all added indexes with an add_index greater than this
    ///value. This allows callers to catch up on any events they missed while they
    ///weren't connected to the streaming RPC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AddIndex {
      get { return addIndex_; }
      set {
        addIndex_ = value;
      }
    }

    /// <summary>Field number for the "settle_index" field.</summary>
    public const int SettleIndexFieldNumber = 2;
    private ulong settleIndex_;
    /// <summary>
    ///*
    ///If specified (non-zero), then we'll first start by sending out
    ///notifications for all settled indexes with an settle_index greater than
    ///this value. This allows callers to catch up on any events they missed while
    ///they weren't connected to the streaming RPC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SettleIndex {
      get { return settleIndex_; }
      set {
        settleIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InvoiceSubscription);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InvoiceSubscription other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AddIndex != other.AddIndex) return false;
      if (SettleIndex != other.SettleIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AddIndex != 0UL) hash ^= AddIndex.GetHashCode();
      if (SettleIndex != 0UL) hash ^= SettleIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AddIndex != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(AddIndex);
      }
      if (SettleIndex != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(SettleIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AddIndex != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AddIndex);
      }
      if (SettleIndex != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SettleIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InvoiceSubscription other) {
      if (other == null) {
        return;
      }
      if (other.AddIndex != 0UL) {
        AddIndex = other.AddIndex;
      }
      if (other.SettleIndex != 0UL) {
        SettleIndex = other.SettleIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AddIndex = input.ReadUInt64();
            break;
          }
          case 16: {
            SettleIndex = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Payment : pb::IMessage<Payment> {
    private static readonly pb::MessageParser<Payment> _parser = new pb::MessageParser<Payment>(() => new Payment());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Payment> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[112]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Payment() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Payment(Payment other) : this() {
      paymentHash_ = other.paymentHash_;
      value_ = other.value_;
      creationDate_ = other.creationDate_;
      path_ = other.path_.Clone();
      fee_ = other.fee_;
      paymentPreimage_ = other.paymentPreimage_;
      valueSat_ = other.valueSat_;
      valueMsat_ = other.valueMsat_;
      paymentRequest_ = other.paymentRequest_;
      status_ = other.status_;
      feeSat_ = other.feeSat_;
      feeMsat_ = other.feeMsat_;
      creationTimeNs_ = other.creationTimeNs_;
      htlcs_ = other.htlcs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Payment Clone() {
      return new Payment(this);
    }

    /// <summary>Field number for the "payment_hash" field.</summary>
    public const int PaymentHashFieldNumber = 1;
    private string paymentHash_ = "";
    /// <summary>
    //// The payment hash
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PaymentHash {
      get { return paymentHash_; }
      set {
        paymentHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private long value_;
    /// <summary>
    //// Deprecated, use value_sat or value_msat.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "creation_date" field.</summary>
    public const int CreationDateFieldNumber = 3;
    private long creationDate_;
    /// <summary>
    //// Deprecated, use creation_time_ns
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreationDate {
      get { return creationDate_; }
      set {
        creationDate_ = value;
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_path_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> path_ = new pbc::RepeatedField<string>();
    /// <summary>
    //// The path this payment took.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Path {
      get { return path_; }
    }

    /// <summary>Field number for the "fee" field.</summary>
    public const int FeeFieldNumber = 5;
    private long fee_;
    /// <summary>
    //// Deprecated, use fee_sat or fee_msat.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Fee {
      get { return fee_; }
      set {
        fee_ = value;
      }
    }

    /// <summary>Field number for the "payment_preimage" field.</summary>
    public const int PaymentPreimageFieldNumber = 6;
    private string paymentPreimage_ = "";
    /// <summary>
    //// The payment preimage
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PaymentPreimage {
      get { return paymentPreimage_; }
      set {
        paymentPreimage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value_sat" field.</summary>
    public const int ValueSatFieldNumber = 7;
    private long valueSat_;
    /// <summary>
    //// The value of the payment in satoshis
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ValueSat {
      get { return valueSat_; }
      set {
        valueSat_ = value;
      }
    }

    /// <summary>Field number for the "value_msat" field.</summary>
    public const int ValueMsatFieldNumber = 8;
    private long valueMsat_;
    /// <summary>
    //// The value of the payment in milli-satoshis
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ValueMsat {
      get { return valueMsat_; }
      set {
        valueMsat_ = value;
      }
    }

    /// <summary>Field number for the "payment_request" field.</summary>
    public const int PaymentRequestFieldNumber = 9;
    private string paymentRequest_ = "";
    /// <summary>
    //// The optional payment request being fulfilled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PaymentRequest {
      get { return paymentRequest_; }
      set {
        paymentRequest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 10;
    private global::Lnrpc.Payment.Types.PaymentStatus status_ = global::Lnrpc.Payment.Types.PaymentStatus.Unknown;
    /// <summary>
    /// The status of the payment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.Payment.Types.PaymentStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "fee_sat" field.</summary>
    public const int FeeSatFieldNumber = 11;
    private long feeSat_;
    /// <summary>
    ////  The fee paid for this payment in satoshis
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FeeSat {
      get { return feeSat_; }
      set {
        feeSat_ = value;
      }
    }

    /// <summary>Field number for the "fee_msat" field.</summary>
    public const int FeeMsatFieldNumber = 12;
    private long feeMsat_;
    /// <summary>
    ////  The fee paid for this payment in milli-satoshis
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FeeMsat {
      get { return feeMsat_; }
      set {
        feeMsat_ = value;
      }
    }

    /// <summary>Field number for the "creation_time_ns" field.</summary>
    public const int CreationTimeNsFieldNumber = 13;
    private long creationTimeNs_;
    /// <summary>
    //// The time in UNIX nanoseconds at which the payment was created.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreationTimeNs {
      get { return creationTimeNs_; }
      set {
        creationTimeNs_ = value;
      }
    }

    /// <summary>Field number for the "htlcs" field.</summary>
    public const int HtlcsFieldNumber = 14;
    private static readonly pb::FieldCodec<global::Lnrpc.HTLCAttempt> _repeated_htlcs_codec
        = pb::FieldCodec.ForMessage(114, global::Lnrpc.HTLCAttempt.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.HTLCAttempt> htlcs_ = new pbc::RepeatedField<global::Lnrpc.HTLCAttempt>();
    /// <summary>
    //// The HTLCs made in attempt to settle the payment [EXPERIMENTAL].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.HTLCAttempt> Htlcs {
      get { return htlcs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Payment);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Payment other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PaymentHash != other.PaymentHash) return false;
      if (Value != other.Value) return false;
      if (CreationDate != other.CreationDate) return false;
      if(!path_.Equals(other.path_)) return false;
      if (Fee != other.Fee) return false;
      if (PaymentPreimage != other.PaymentPreimage) return false;
      if (ValueSat != other.ValueSat) return false;
      if (ValueMsat != other.ValueMsat) return false;
      if (PaymentRequest != other.PaymentRequest) return false;
      if (Status != other.Status) return false;
      if (FeeSat != other.FeeSat) return false;
      if (FeeMsat != other.FeeMsat) return false;
      if (CreationTimeNs != other.CreationTimeNs) return false;
      if(!htlcs_.Equals(other.htlcs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PaymentHash.Length != 0) hash ^= PaymentHash.GetHashCode();
      if (Value != 0L) hash ^= Value.GetHashCode();
      if (CreationDate != 0L) hash ^= CreationDate.GetHashCode();
      hash ^= path_.GetHashCode();
      if (Fee != 0L) hash ^= Fee.GetHashCode();
      if (PaymentPreimage.Length != 0) hash ^= PaymentPreimage.GetHashCode();
      if (ValueSat != 0L) hash ^= ValueSat.GetHashCode();
      if (ValueMsat != 0L) hash ^= ValueMsat.GetHashCode();
      if (PaymentRequest.Length != 0) hash ^= PaymentRequest.GetHashCode();
      if (Status != global::Lnrpc.Payment.Types.PaymentStatus.Unknown) hash ^= Status.GetHashCode();
      if (FeeSat != 0L) hash ^= FeeSat.GetHashCode();
      if (FeeMsat != 0L) hash ^= FeeMsat.GetHashCode();
      if (CreationTimeNs != 0L) hash ^= CreationTimeNs.GetHashCode();
      hash ^= htlcs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PaymentHash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PaymentHash);
      }
      if (Value != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Value);
      }
      if (CreationDate != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(CreationDate);
      }
      path_.WriteTo(output, _repeated_path_codec);
      if (Fee != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Fee);
      }
      if (PaymentPreimage.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(PaymentPreimage);
      }
      if (ValueSat != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(ValueSat);
      }
      if (ValueMsat != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(ValueMsat);
      }
      if (PaymentRequest.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(PaymentRequest);
      }
      if (Status != global::Lnrpc.Payment.Types.PaymentStatus.Unknown) {
        output.WriteRawTag(80);
        output.WriteEnum((int) Status);
      }
      if (FeeSat != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(FeeSat);
      }
      if (FeeMsat != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(FeeMsat);
      }
      if (CreationTimeNs != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(CreationTimeNs);
      }
      htlcs_.WriteTo(output, _repeated_htlcs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PaymentHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PaymentHash);
      }
      if (Value != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Value);
      }
      if (CreationDate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreationDate);
      }
      size += path_.CalculateSize(_repeated_path_codec);
      if (Fee != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Fee);
      }
      if (PaymentPreimage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PaymentPreimage);
      }
      if (ValueSat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ValueSat);
      }
      if (ValueMsat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ValueMsat);
      }
      if (PaymentRequest.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PaymentRequest);
      }
      if (Status != global::Lnrpc.Payment.Types.PaymentStatus.Unknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (FeeSat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FeeSat);
      }
      if (FeeMsat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FeeMsat);
      }
      if (CreationTimeNs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreationTimeNs);
      }
      size += htlcs_.CalculateSize(_repeated_htlcs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Payment other) {
      if (other == null) {
        return;
      }
      if (other.PaymentHash.Length != 0) {
        PaymentHash = other.PaymentHash;
      }
      if (other.Value != 0L) {
        Value = other.Value;
      }
      if (other.CreationDate != 0L) {
        CreationDate = other.CreationDate;
      }
      path_.Add(other.path_);
      if (other.Fee != 0L) {
        Fee = other.Fee;
      }
      if (other.PaymentPreimage.Length != 0) {
        PaymentPreimage = other.PaymentPreimage;
      }
      if (other.ValueSat != 0L) {
        ValueSat = other.ValueSat;
      }
      if (other.ValueMsat != 0L) {
        ValueMsat = other.ValueMsat;
      }
      if (other.PaymentRequest.Length != 0) {
        PaymentRequest = other.PaymentRequest;
      }
      if (other.Status != global::Lnrpc.Payment.Types.PaymentStatus.Unknown) {
        Status = other.Status;
      }
      if (other.FeeSat != 0L) {
        FeeSat = other.FeeSat;
      }
      if (other.FeeMsat != 0L) {
        FeeMsat = other.FeeMsat;
      }
      if (other.CreationTimeNs != 0L) {
        CreationTimeNs = other.CreationTimeNs;
      }
      htlcs_.Add(other.htlcs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PaymentHash = input.ReadString();
            break;
          }
          case 16: {
            Value = input.ReadInt64();
            break;
          }
          case 24: {
            CreationDate = input.ReadInt64();
            break;
          }
          case 34: {
            path_.AddEntriesFrom(input, _repeated_path_codec);
            break;
          }
          case 40: {
            Fee = input.ReadInt64();
            break;
          }
          case 50: {
            PaymentPreimage = input.ReadString();
            break;
          }
          case 56: {
            ValueSat = input.ReadInt64();
            break;
          }
          case 64: {
            ValueMsat = input.ReadInt64();
            break;
          }
          case 74: {
            PaymentRequest = input.ReadString();
            break;
          }
          case 80: {
            Status = (global::Lnrpc.Payment.Types.PaymentStatus) input.ReadEnum();
            break;
          }
          case 88: {
            FeeSat = input.ReadInt64();
            break;
          }
          case 96: {
            FeeMsat = input.ReadInt64();
            break;
          }
          case 104: {
            CreationTimeNs = input.ReadInt64();
            break;
          }
          case 114: {
            htlcs_.AddEntriesFrom(input, _repeated_htlcs_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Payment message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum PaymentStatus {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("IN_FLIGHT")] InFlight = 1,
        [pbr::OriginalName("SUCCEEDED")] Succeeded = 2,
        [pbr::OriginalName("FAILED")] Failed = 3,
      }

    }
    #endregion

  }

  public sealed partial class HTLCAttempt : pb::IMessage<HTLCAttempt> {
    private static readonly pb::MessageParser<HTLCAttempt> _parser = new pb::MessageParser<HTLCAttempt>(() => new HTLCAttempt());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HTLCAttempt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[113]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HTLCAttempt() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HTLCAttempt(HTLCAttempt other) : this() {
      status_ = other.status_;
      route_ = other.route_ != null ? other.route_.Clone() : null;
      attemptTimeNs_ = other.attemptTimeNs_;
      resolveTimeNs_ = other.resolveTimeNs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HTLCAttempt Clone() {
      return new HTLCAttempt(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Lnrpc.HTLCAttempt.Types.HTLCStatus status_ = global::Lnrpc.HTLCAttempt.Types.HTLCStatus.InFlight;
    /// <summary>
    //// The status of the HTLC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.HTLCAttempt.Types.HTLCStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "route" field.</summary>
    public const int RouteFieldNumber = 2;
    private global::Lnrpc.Route route_;
    /// <summary>
    //// The route taken by this HTLC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.Route Route {
      get { return route_; }
      set {
        route_ = value;
      }
    }

    /// <summary>Field number for the "attempt_time_ns" field.</summary>
    public const int AttemptTimeNsFieldNumber = 3;
    private long attemptTimeNs_;
    /// <summary>
    //// The time in UNIX nanoseconds at which this HTLC was sent.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AttemptTimeNs {
      get { return attemptTimeNs_; }
      set {
        attemptTimeNs_ = value;
      }
    }

    /// <summary>Field number for the "resolve_time_ns" field.</summary>
    public const int ResolveTimeNsFieldNumber = 4;
    private long resolveTimeNs_;
    /// <summary>
    ///*
    ///The time in UNIX nanoseconds at which this HTLC was settled or failed.
    ///This value will not be set if the HTLC is still IN_FLIGHT.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ResolveTimeNs {
      get { return resolveTimeNs_; }
      set {
        resolveTimeNs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HTLCAttempt);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HTLCAttempt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Status != other.Status) return false;
      if (!object.Equals(Route, other.Route)) return false;
      if (AttemptTimeNs != other.AttemptTimeNs) return false;
      if (ResolveTimeNs != other.ResolveTimeNs) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Status != global::Lnrpc.HTLCAttempt.Types.HTLCStatus.InFlight) hash ^= Status.GetHashCode();
      if (route_ != null) hash ^= Route.GetHashCode();
      if (AttemptTimeNs != 0L) hash ^= AttemptTimeNs.GetHashCode();
      if (ResolveTimeNs != 0L) hash ^= ResolveTimeNs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Status != global::Lnrpc.HTLCAttempt.Types.HTLCStatus.InFlight) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Status);
      }
      if (route_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Route);
      }
      if (AttemptTimeNs != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(AttemptTimeNs);
      }
      if (ResolveTimeNs != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(ResolveTimeNs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Status != global::Lnrpc.HTLCAttempt.Types.HTLCStatus.InFlight) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (route_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Route);
      }
      if (AttemptTimeNs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AttemptTimeNs);
      }
      if (ResolveTimeNs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ResolveTimeNs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HTLCAttempt other) {
      if (other == null) {
        return;
      }
      if (other.Status != global::Lnrpc.HTLCAttempt.Types.HTLCStatus.InFlight) {
        Status = other.Status;
      }
      if (other.route_ != null) {
        if (route_ == null) {
          Route = new global::Lnrpc.Route();
        }
        Route.MergeFrom(other.Route);
      }
      if (other.AttemptTimeNs != 0L) {
        AttemptTimeNs = other.AttemptTimeNs;
      }
      if (other.ResolveTimeNs != 0L) {
        ResolveTimeNs = other.ResolveTimeNs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Status = (global::Lnrpc.HTLCAttempt.Types.HTLCStatus) input.ReadEnum();
            break;
          }
          case 18: {
            if (route_ == null) {
              Route = new global::Lnrpc.Route();
            }
            input.ReadMessage(Route);
            break;
          }
          case 24: {
            AttemptTimeNs = input.ReadInt64();
            break;
          }
          case 32: {
            ResolveTimeNs = input.ReadInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the HTLCAttempt message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum HTLCStatus {
        [pbr::OriginalName("IN_FLIGHT")] InFlight = 0,
        [pbr::OriginalName("SUCCEEDED")] Succeeded = 1,
        [pbr::OriginalName("FAILED")] Failed = 2,
      }

    }
    #endregion

  }

  public sealed partial class ListPaymentsRequest : pb::IMessage<ListPaymentsRequest> {
    private static readonly pb::MessageParser<ListPaymentsRequest> _parser = new pb::MessageParser<ListPaymentsRequest>(() => new ListPaymentsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListPaymentsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[114]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPaymentsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPaymentsRequest(ListPaymentsRequest other) : this() {
      includeIncomplete_ = other.includeIncomplete_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPaymentsRequest Clone() {
      return new ListPaymentsRequest(this);
    }

    /// <summary>Field number for the "include_incomplete" field.</summary>
    public const int IncludeIncompleteFieldNumber = 1;
    private bool includeIncomplete_;
    /// <summary>
    ///*
    ///If true, then return payments that have not yet fully completed. This means
    ///that pending payments, as well as failed payments will show up if this
    ///field is set to True.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludeIncomplete {
      get { return includeIncomplete_; }
      set {
        includeIncomplete_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListPaymentsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListPaymentsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IncludeIncomplete != other.IncludeIncomplete) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IncludeIncomplete != false) hash ^= IncludeIncomplete.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IncludeIncomplete != false) {
        output.WriteRawTag(8);
        output.WriteBool(IncludeIncomplete);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IncludeIncomplete != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListPaymentsRequest other) {
      if (other == null) {
        return;
      }
      if (other.IncludeIncomplete != false) {
        IncludeIncomplete = other.IncludeIncomplete;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IncludeIncomplete = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListPaymentsResponse : pb::IMessage<ListPaymentsResponse> {
    private static readonly pb::MessageParser<ListPaymentsResponse> _parser = new pb::MessageParser<ListPaymentsResponse>(() => new ListPaymentsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListPaymentsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[115]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPaymentsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPaymentsResponse(ListPaymentsResponse other) : this() {
      payments_ = other.payments_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListPaymentsResponse Clone() {
      return new ListPaymentsResponse(this);
    }

    /// <summary>Field number for the "payments" field.</summary>
    public const int PaymentsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Lnrpc.Payment> _repeated_payments_codec
        = pb::FieldCodec.ForMessage(10, global::Lnrpc.Payment.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.Payment> payments_ = new pbc::RepeatedField<global::Lnrpc.Payment>();
    /// <summary>
    //// The list of payments
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.Payment> Payments {
      get { return payments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListPaymentsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListPaymentsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!payments_.Equals(other.payments_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= payments_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      payments_.WriteTo(output, _repeated_payments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += payments_.CalculateSize(_repeated_payments_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListPaymentsResponse other) {
      if (other == null) {
        return;
      }
      payments_.Add(other.payments_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            payments_.AddEntriesFrom(input, _repeated_payments_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteAllPaymentsRequest : pb::IMessage<DeleteAllPaymentsRequest> {
    private static readonly pb::MessageParser<DeleteAllPaymentsRequest> _parser = new pb::MessageParser<DeleteAllPaymentsRequest>(() => new DeleteAllPaymentsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteAllPaymentsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[116]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteAllPaymentsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteAllPaymentsRequest(DeleteAllPaymentsRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteAllPaymentsRequest Clone() {
      return new DeleteAllPaymentsRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteAllPaymentsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteAllPaymentsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteAllPaymentsRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class DeleteAllPaymentsResponse : pb::IMessage<DeleteAllPaymentsResponse> {
    private static readonly pb::MessageParser<DeleteAllPaymentsResponse> _parser = new pb::MessageParser<DeleteAllPaymentsResponse>(() => new DeleteAllPaymentsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteAllPaymentsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[117]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteAllPaymentsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteAllPaymentsResponse(DeleteAllPaymentsResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteAllPaymentsResponse Clone() {
      return new DeleteAllPaymentsResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteAllPaymentsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteAllPaymentsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteAllPaymentsResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class AbandonChannelRequest : pb::IMessage<AbandonChannelRequest> {
    private static readonly pb::MessageParser<AbandonChannelRequest> _parser = new pb::MessageParser<AbandonChannelRequest>(() => new AbandonChannelRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AbandonChannelRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[118]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbandonChannelRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbandonChannelRequest(AbandonChannelRequest other) : this() {
      channelPoint_ = other.channelPoint_ != null ? other.channelPoint_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbandonChannelRequest Clone() {
      return new AbandonChannelRequest(this);
    }

    /// <summary>Field number for the "channel_point" field.</summary>
    public const int ChannelPointFieldNumber = 1;
    private global::Lnrpc.ChannelPoint channelPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.ChannelPoint ChannelPoint {
      get { return channelPoint_; }
      set {
        channelPoint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AbandonChannelRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AbandonChannelRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ChannelPoint, other.ChannelPoint)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (channelPoint_ != null) hash ^= ChannelPoint.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (channelPoint_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ChannelPoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (channelPoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChannelPoint);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AbandonChannelRequest other) {
      if (other == null) {
        return;
      }
      if (other.channelPoint_ != null) {
        if (channelPoint_ == null) {
          ChannelPoint = new global::Lnrpc.ChannelPoint();
        }
        ChannelPoint.MergeFrom(other.ChannelPoint);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (channelPoint_ == null) {
              ChannelPoint = new global::Lnrpc.ChannelPoint();
            }
            input.ReadMessage(ChannelPoint);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AbandonChannelResponse : pb::IMessage<AbandonChannelResponse> {
    private static readonly pb::MessageParser<AbandonChannelResponse> _parser = new pb::MessageParser<AbandonChannelResponse>(() => new AbandonChannelResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AbandonChannelResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[119]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbandonChannelResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbandonChannelResponse(AbandonChannelResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AbandonChannelResponse Clone() {
      return new AbandonChannelResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AbandonChannelResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AbandonChannelResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AbandonChannelResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class DebugLevelRequest : pb::IMessage<DebugLevelRequest> {
    private static readonly pb::MessageParser<DebugLevelRequest> _parser = new pb::MessageParser<DebugLevelRequest>(() => new DebugLevelRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DebugLevelRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[120]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebugLevelRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebugLevelRequest(DebugLevelRequest other) : this() {
      show_ = other.show_;
      levelSpec_ = other.levelSpec_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebugLevelRequest Clone() {
      return new DebugLevelRequest(this);
    }

    /// <summary>Field number for the "show" field.</summary>
    public const int ShowFieldNumber = 1;
    private bool show_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Show {
      get { return show_; }
      set {
        show_ = value;
      }
    }

    /// <summary>Field number for the "level_spec" field.</summary>
    public const int LevelSpecFieldNumber = 2;
    private string levelSpec_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LevelSpec {
      get { return levelSpec_; }
      set {
        levelSpec_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DebugLevelRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DebugLevelRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Show != other.Show) return false;
      if (LevelSpec != other.LevelSpec) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Show != false) hash ^= Show.GetHashCode();
      if (LevelSpec.Length != 0) hash ^= LevelSpec.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Show != false) {
        output.WriteRawTag(8);
        output.WriteBool(Show);
      }
      if (LevelSpec.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LevelSpec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Show != false) {
        size += 1 + 1;
      }
      if (LevelSpec.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LevelSpec);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DebugLevelRequest other) {
      if (other == null) {
        return;
      }
      if (other.Show != false) {
        Show = other.Show;
      }
      if (other.LevelSpec.Length != 0) {
        LevelSpec = other.LevelSpec;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Show = input.ReadBool();
            break;
          }
          case 18: {
            LevelSpec = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DebugLevelResponse : pb::IMessage<DebugLevelResponse> {
    private static readonly pb::MessageParser<DebugLevelResponse> _parser = new pb::MessageParser<DebugLevelResponse>(() => new DebugLevelResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DebugLevelResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[121]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebugLevelResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebugLevelResponse(DebugLevelResponse other) : this() {
      subSystems_ = other.subSystems_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebugLevelResponse Clone() {
      return new DebugLevelResponse(this);
    }

    /// <summary>Field number for the "sub_systems" field.</summary>
    public const int SubSystemsFieldNumber = 1;
    private string subSystems_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubSystems {
      get { return subSystems_; }
      set {
        subSystems_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DebugLevelResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DebugLevelResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SubSystems != other.SubSystems) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SubSystems.Length != 0) hash ^= SubSystems.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SubSystems.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SubSystems);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SubSystems.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubSystems);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DebugLevelResponse other) {
      if (other == null) {
        return;
      }
      if (other.SubSystems.Length != 0) {
        SubSystems = other.SubSystems;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SubSystems = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PayReqString : pb::IMessage<PayReqString> {
    private static readonly pb::MessageParser<PayReqString> _parser = new pb::MessageParser<PayReqString>(() => new PayReqString());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PayReqString> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[122]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayReqString() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayReqString(PayReqString other) : this() {
      payReq_ = other.payReq_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayReqString Clone() {
      return new PayReqString(this);
    }

    /// <summary>Field number for the "pay_req" field.</summary>
    public const int PayReqFieldNumber = 1;
    private string payReq_ = "";
    /// <summary>
    //// The payment request string to be decoded
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PayReq {
      get { return payReq_; }
      set {
        payReq_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PayReqString);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PayReqString other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PayReq != other.PayReq) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PayReq.Length != 0) hash ^= PayReq.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PayReq.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PayReq);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PayReq.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PayReq);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PayReqString other) {
      if (other == null) {
        return;
      }
      if (other.PayReq.Length != 0) {
        PayReq = other.PayReq;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PayReq = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PayReq : pb::IMessage<PayReq> {
    private static readonly pb::MessageParser<PayReq> _parser = new pb::MessageParser<PayReq>(() => new PayReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PayReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[123]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayReq(PayReq other) : this() {
      destination_ = other.destination_;
      paymentHash_ = other.paymentHash_;
      numSatoshis_ = other.numSatoshis_;
      timestamp_ = other.timestamp_;
      expiry_ = other.expiry_;
      description_ = other.description_;
      descriptionHash_ = other.descriptionHash_;
      fallbackAddr_ = other.fallbackAddr_;
      cltvExpiry_ = other.cltvExpiry_;
      routeHints_ = other.routeHints_.Clone();
      paymentAddr_ = other.paymentAddr_;
      numMsat_ = other.numMsat_;
      features_ = other.features_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayReq Clone() {
      return new PayReq(this);
    }

    /// <summary>Field number for the "destination" field.</summary>
    public const int DestinationFieldNumber = 1;
    private string destination_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Destination {
      get { return destination_; }
      set {
        destination_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payment_hash" field.</summary>
    public const int PaymentHashFieldNumber = 2;
    private string paymentHash_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PaymentHash {
      get { return paymentHash_; }
      set {
        paymentHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "num_satoshis" field.</summary>
    public const int NumSatoshisFieldNumber = 3;
    private long numSatoshis_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NumSatoshis {
      get { return numSatoshis_; }
      set {
        numSatoshis_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 4;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "expiry" field.</summary>
    public const int ExpiryFieldNumber = 5;
    private long expiry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Expiry {
      get { return expiry_; }
      set {
        expiry_ = value;
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 6;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description_hash" field.</summary>
    public const int DescriptionHashFieldNumber = 7;
    private string descriptionHash_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DescriptionHash {
      get { return descriptionHash_; }
      set {
        descriptionHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fallback_addr" field.</summary>
    public const int FallbackAddrFieldNumber = 8;
    private string fallbackAddr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FallbackAddr {
      get { return fallbackAddr_; }
      set {
        fallbackAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cltv_expiry" field.</summary>
    public const int CltvExpiryFieldNumber = 9;
    private long cltvExpiry_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CltvExpiry {
      get { return cltvExpiry_; }
      set {
        cltvExpiry_ = value;
      }
    }

    /// <summary>Field number for the "route_hints" field.</summary>
    public const int RouteHintsFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Lnrpc.RouteHint> _repeated_routeHints_codec
        = pb::FieldCodec.ForMessage(82, global::Lnrpc.RouteHint.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.RouteHint> routeHints_ = new pbc::RepeatedField<global::Lnrpc.RouteHint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.RouteHint> RouteHints {
      get { return routeHints_; }
    }

    /// <summary>Field number for the "payment_addr" field.</summary>
    public const int PaymentAddrFieldNumber = 11;
    private pb::ByteString paymentAddr_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PaymentAddr {
      get { return paymentAddr_; }
      set {
        paymentAddr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "num_msat" field.</summary>
    public const int NumMsatFieldNumber = 12;
    private long numMsat_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NumMsat {
      get { return numMsat_; }
      set {
        numMsat_ = value;
      }
    }

    /// <summary>Field number for the "features" field.</summary>
    public const int FeaturesFieldNumber = 13;
    private static readonly pbc::MapField<uint, global::Lnrpc.Feature>.Codec _map_features_codec
        = new pbc::MapField<uint, global::Lnrpc.Feature>.Codec(pb::FieldCodec.ForUInt32(8, 0), pb::FieldCodec.ForMessage(18, global::Lnrpc.Feature.Parser), 106);
    private readonly pbc::MapField<uint, global::Lnrpc.Feature> features_ = new pbc::MapField<uint, global::Lnrpc.Feature>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, global::Lnrpc.Feature> Features {
      get { return features_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PayReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PayReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Destination != other.Destination) return false;
      if (PaymentHash != other.PaymentHash) return false;
      if (NumSatoshis != other.NumSatoshis) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Expiry != other.Expiry) return false;
      if (Description != other.Description) return false;
      if (DescriptionHash != other.DescriptionHash) return false;
      if (FallbackAddr != other.FallbackAddr) return false;
      if (CltvExpiry != other.CltvExpiry) return false;
      if(!routeHints_.Equals(other.routeHints_)) return false;
      if (PaymentAddr != other.PaymentAddr) return false;
      if (NumMsat != other.NumMsat) return false;
      if (!Features.Equals(other.Features)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Destination.Length != 0) hash ^= Destination.GetHashCode();
      if (PaymentHash.Length != 0) hash ^= PaymentHash.GetHashCode();
      if (NumSatoshis != 0L) hash ^= NumSatoshis.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (Expiry != 0L) hash ^= Expiry.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (DescriptionHash.Length != 0) hash ^= DescriptionHash.GetHashCode();
      if (FallbackAddr.Length != 0) hash ^= FallbackAddr.GetHashCode();
      if (CltvExpiry != 0L) hash ^= CltvExpiry.GetHashCode();
      hash ^= routeHints_.GetHashCode();
      if (PaymentAddr.Length != 0) hash ^= PaymentAddr.GetHashCode();
      if (NumMsat != 0L) hash ^= NumMsat.GetHashCode();
      hash ^= Features.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Destination.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Destination);
      }
      if (PaymentHash.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PaymentHash);
      }
      if (NumSatoshis != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(NumSatoshis);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Timestamp);
      }
      if (Expiry != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Expiry);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Description);
      }
      if (DescriptionHash.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(DescriptionHash);
      }
      if (FallbackAddr.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(FallbackAddr);
      }
      if (CltvExpiry != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(CltvExpiry);
      }
      routeHints_.WriteTo(output, _repeated_routeHints_codec);
      if (PaymentAddr.Length != 0) {
        output.WriteRawTag(90);
        output.WriteBytes(PaymentAddr);
      }
      if (NumMsat != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(NumMsat);
      }
      features_.WriteTo(output, _map_features_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Destination.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Destination);
      }
      if (PaymentHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PaymentHash);
      }
      if (NumSatoshis != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NumSatoshis);
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (Expiry != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Expiry);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (DescriptionHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DescriptionHash);
      }
      if (FallbackAddr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FallbackAddr);
      }
      if (CltvExpiry != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CltvExpiry);
      }
      size += routeHints_.CalculateSize(_repeated_routeHints_codec);
      if (PaymentAddr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PaymentAddr);
      }
      if (NumMsat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NumMsat);
      }
      size += features_.CalculateSize(_map_features_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PayReq other) {
      if (other == null) {
        return;
      }
      if (other.Destination.Length != 0) {
        Destination = other.Destination;
      }
      if (other.PaymentHash.Length != 0) {
        PaymentHash = other.PaymentHash;
      }
      if (other.NumSatoshis != 0L) {
        NumSatoshis = other.NumSatoshis;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.Expiry != 0L) {
        Expiry = other.Expiry;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.DescriptionHash.Length != 0) {
        DescriptionHash = other.DescriptionHash;
      }
      if (other.FallbackAddr.Length != 0) {
        FallbackAddr = other.FallbackAddr;
      }
      if (other.CltvExpiry != 0L) {
        CltvExpiry = other.CltvExpiry;
      }
      routeHints_.Add(other.routeHints_);
      if (other.PaymentAddr.Length != 0) {
        PaymentAddr = other.PaymentAddr;
      }
      if (other.NumMsat != 0L) {
        NumMsat = other.NumMsat;
      }
      features_.Add(other.features_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Destination = input.ReadString();
            break;
          }
          case 18: {
            PaymentHash = input.ReadString();
            break;
          }
          case 24: {
            NumSatoshis = input.ReadInt64();
            break;
          }
          case 32: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 40: {
            Expiry = input.ReadInt64();
            break;
          }
          case 50: {
            Description = input.ReadString();
            break;
          }
          case 58: {
            DescriptionHash = input.ReadString();
            break;
          }
          case 66: {
            FallbackAddr = input.ReadString();
            break;
          }
          case 72: {
            CltvExpiry = input.ReadInt64();
            break;
          }
          case 82: {
            routeHints_.AddEntriesFrom(input, _repeated_routeHints_codec);
            break;
          }
          case 90: {
            PaymentAddr = input.ReadBytes();
            break;
          }
          case 96: {
            NumMsat = input.ReadInt64();
            break;
          }
          case 106: {
            features_.AddEntriesFrom(input, _map_features_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Feature : pb::IMessage<Feature> {
    private static readonly pb::MessageParser<Feature> _parser = new pb::MessageParser<Feature>(() => new Feature());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Feature> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[124]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Feature() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Feature(Feature other) : this() {
      name_ = other.name_;
      isRequired_ = other.isRequired_;
      isKnown_ = other.isKnown_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Feature Clone() {
      return new Feature(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_required" field.</summary>
    public const int IsRequiredFieldNumber = 3;
    private bool isRequired_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRequired {
      get { return isRequired_; }
      set {
        isRequired_ = value;
      }
    }

    /// <summary>Field number for the "is_known" field.</summary>
    public const int IsKnownFieldNumber = 4;
    private bool isKnown_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsKnown {
      get { return isKnown_; }
      set {
        isKnown_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Feature);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Feature other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (IsRequired != other.IsRequired) return false;
      if (IsKnown != other.IsKnown) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (IsRequired != false) hash ^= IsRequired.GetHashCode();
      if (IsKnown != false) hash ^= IsKnown.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (IsRequired != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsRequired);
      }
      if (IsKnown != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsKnown);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (IsRequired != false) {
        size += 1 + 1;
      }
      if (IsKnown != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Feature other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.IsRequired != false) {
        IsRequired = other.IsRequired;
      }
      if (other.IsKnown != false) {
        IsKnown = other.IsKnown;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            IsRequired = input.ReadBool();
            break;
          }
          case 32: {
            IsKnown = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FeeReportRequest : pb::IMessage<FeeReportRequest> {
    private static readonly pb::MessageParser<FeeReportRequest> _parser = new pb::MessageParser<FeeReportRequest>(() => new FeeReportRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FeeReportRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[125]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeeReportRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeeReportRequest(FeeReportRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeeReportRequest Clone() {
      return new FeeReportRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FeeReportRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FeeReportRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FeeReportRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class ChannelFeeReport : pb::IMessage<ChannelFeeReport> {
    private static readonly pb::MessageParser<ChannelFeeReport> _parser = new pb::MessageParser<ChannelFeeReport>(() => new ChannelFeeReport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelFeeReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[126]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelFeeReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelFeeReport(ChannelFeeReport other) : this() {
      chanPoint_ = other.chanPoint_;
      baseFeeMsat_ = other.baseFeeMsat_;
      feePerMil_ = other.feePerMil_;
      feeRate_ = other.feeRate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelFeeReport Clone() {
      return new ChannelFeeReport(this);
    }

    /// <summary>Field number for the "chan_point" field.</summary>
    public const int ChanPointFieldNumber = 1;
    private string chanPoint_ = "";
    /// <summary>
    //// The channel that this fee report belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChanPoint {
      get { return chanPoint_; }
      set {
        chanPoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "base_fee_msat" field.</summary>
    public const int BaseFeeMsatFieldNumber = 2;
    private long baseFeeMsat_;
    /// <summary>
    //// The base fee charged regardless of the number of milli-satoshis sent.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BaseFeeMsat {
      get { return baseFeeMsat_; }
      set {
        baseFeeMsat_ = value;
      }
    }

    /// <summary>Field number for the "fee_per_mil" field.</summary>
    public const int FeePerMilFieldNumber = 3;
    private long feePerMil_;
    /// <summary>
    //// The amount charged per milli-satoshis transferred expressed in millionths of a satoshi.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FeePerMil {
      get { return feePerMil_; }
      set {
        feePerMil_ = value;
      }
    }

    /// <summary>Field number for the "fee_rate" field.</summary>
    public const int FeeRateFieldNumber = 4;
    private double feeRate_;
    /// <summary>
    //// The effective fee rate in milli-satoshis. Computed by dividing the fee_per_mil value by 1 million.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double FeeRate {
      get { return feeRate_; }
      set {
        feeRate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelFeeReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelFeeReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChanPoint != other.ChanPoint) return false;
      if (BaseFeeMsat != other.BaseFeeMsat) return false;
      if (FeePerMil != other.FeePerMil) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FeeRate, other.FeeRate)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChanPoint.Length != 0) hash ^= ChanPoint.GetHashCode();
      if (BaseFeeMsat != 0L) hash ^= BaseFeeMsat.GetHashCode();
      if (FeePerMil != 0L) hash ^= FeePerMil.GetHashCode();
      if (FeeRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FeeRate);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChanPoint.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ChanPoint);
      }
      if (BaseFeeMsat != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(BaseFeeMsat);
      }
      if (FeePerMil != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(FeePerMil);
      }
      if (FeeRate != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(FeeRate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChanPoint.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChanPoint);
      }
      if (BaseFeeMsat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BaseFeeMsat);
      }
      if (FeePerMil != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FeePerMil);
      }
      if (FeeRate != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelFeeReport other) {
      if (other == null) {
        return;
      }
      if (other.ChanPoint.Length != 0) {
        ChanPoint = other.ChanPoint;
      }
      if (other.BaseFeeMsat != 0L) {
        BaseFeeMsat = other.BaseFeeMsat;
      }
      if (other.FeePerMil != 0L) {
        FeePerMil = other.FeePerMil;
      }
      if (other.FeeRate != 0D) {
        FeeRate = other.FeeRate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ChanPoint = input.ReadString();
            break;
          }
          case 16: {
            BaseFeeMsat = input.ReadInt64();
            break;
          }
          case 24: {
            FeePerMil = input.ReadInt64();
            break;
          }
          case 33: {
            FeeRate = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FeeReportResponse : pb::IMessage<FeeReportResponse> {
    private static readonly pb::MessageParser<FeeReportResponse> _parser = new pb::MessageParser<FeeReportResponse>(() => new FeeReportResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FeeReportResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[127]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeeReportResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeeReportResponse(FeeReportResponse other) : this() {
      channelFees_ = other.channelFees_.Clone();
      dayFeeSum_ = other.dayFeeSum_;
      weekFeeSum_ = other.weekFeeSum_;
      monthFeeSum_ = other.monthFeeSum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FeeReportResponse Clone() {
      return new FeeReportResponse(this);
    }

    /// <summary>Field number for the "channel_fees" field.</summary>
    public const int ChannelFeesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Lnrpc.ChannelFeeReport> _repeated_channelFees_codec
        = pb::FieldCodec.ForMessage(10, global::Lnrpc.ChannelFeeReport.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.ChannelFeeReport> channelFees_ = new pbc::RepeatedField<global::Lnrpc.ChannelFeeReport>();
    /// <summary>
    //// An array of channel fee reports which describes the current fee schedule for each channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.ChannelFeeReport> ChannelFees {
      get { return channelFees_; }
    }

    /// <summary>Field number for the "day_fee_sum" field.</summary>
    public const int DayFeeSumFieldNumber = 2;
    private ulong dayFeeSum_;
    /// <summary>
    //// The total amount of fee revenue (in satoshis) the switch has collected over the past 24 hrs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DayFeeSum {
      get { return dayFeeSum_; }
      set {
        dayFeeSum_ = value;
      }
    }

    /// <summary>Field number for the "week_fee_sum" field.</summary>
    public const int WeekFeeSumFieldNumber = 3;
    private ulong weekFeeSum_;
    /// <summary>
    //// The total amount of fee revenue (in satoshis) the switch has collected over the past 1 week.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong WeekFeeSum {
      get { return weekFeeSum_; }
      set {
        weekFeeSum_ = value;
      }
    }

    /// <summary>Field number for the "month_fee_sum" field.</summary>
    public const int MonthFeeSumFieldNumber = 4;
    private ulong monthFeeSum_;
    /// <summary>
    //// The total amount of fee revenue (in satoshis) the switch has collected over the past 1 month.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MonthFeeSum {
      get { return monthFeeSum_; }
      set {
        monthFeeSum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FeeReportResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FeeReportResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!channelFees_.Equals(other.channelFees_)) return false;
      if (DayFeeSum != other.DayFeeSum) return false;
      if (WeekFeeSum != other.WeekFeeSum) return false;
      if (MonthFeeSum != other.MonthFeeSum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= channelFees_.GetHashCode();
      if (DayFeeSum != 0UL) hash ^= DayFeeSum.GetHashCode();
      if (WeekFeeSum != 0UL) hash ^= WeekFeeSum.GetHashCode();
      if (MonthFeeSum != 0UL) hash ^= MonthFeeSum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      channelFees_.WriteTo(output, _repeated_channelFees_codec);
      if (DayFeeSum != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(DayFeeSum);
      }
      if (WeekFeeSum != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(WeekFeeSum);
      }
      if (MonthFeeSum != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(MonthFeeSum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += channelFees_.CalculateSize(_repeated_channelFees_codec);
      if (DayFeeSum != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(DayFeeSum);
      }
      if (WeekFeeSum != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(WeekFeeSum);
      }
      if (MonthFeeSum != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MonthFeeSum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FeeReportResponse other) {
      if (other == null) {
        return;
      }
      channelFees_.Add(other.channelFees_);
      if (other.DayFeeSum != 0UL) {
        DayFeeSum = other.DayFeeSum;
      }
      if (other.WeekFeeSum != 0UL) {
        WeekFeeSum = other.WeekFeeSum;
      }
      if (other.MonthFeeSum != 0UL) {
        MonthFeeSum = other.MonthFeeSum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            channelFees_.AddEntriesFrom(input, _repeated_channelFees_codec);
            break;
          }
          case 16: {
            DayFeeSum = input.ReadUInt64();
            break;
          }
          case 24: {
            WeekFeeSum = input.ReadUInt64();
            break;
          }
          case 32: {
            MonthFeeSum = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PolicyUpdateRequest : pb::IMessage<PolicyUpdateRequest> {
    private static readonly pb::MessageParser<PolicyUpdateRequest> _parser = new pb::MessageParser<PolicyUpdateRequest>(() => new PolicyUpdateRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PolicyUpdateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[128]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PolicyUpdateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PolicyUpdateRequest(PolicyUpdateRequest other) : this() {
      baseFeeMsat_ = other.baseFeeMsat_;
      feeRate_ = other.feeRate_;
      timeLockDelta_ = other.timeLockDelta_;
      maxHtlcMsat_ = other.maxHtlcMsat_;
      minHtlcMsat_ = other.minHtlcMsat_;
      minHtlcMsatSpecified_ = other.minHtlcMsatSpecified_;
      switch (other.ScopeCase) {
        case ScopeOneofCase.Global:
          Global = other.Global;
          break;
        case ScopeOneofCase.ChanPoint:
          ChanPoint = other.ChanPoint.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PolicyUpdateRequest Clone() {
      return new PolicyUpdateRequest(this);
    }

    /// <summary>Field number for the "global" field.</summary>
    public const int GlobalFieldNumber = 1;
    /// <summary>
    //// If set, then this update applies to all currently active channels.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Global {
      get { return scopeCase_ == ScopeOneofCase.Global ? (bool) scope_ : false; }
      set {
        scope_ = value;
        scopeCase_ = ScopeOneofCase.Global;
      }
    }

    /// <summary>Field number for the "chan_point" field.</summary>
    public const int ChanPointFieldNumber = 2;
    /// <summary>
    //// If set, this update will target a specific channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.ChannelPoint ChanPoint {
      get { return scopeCase_ == ScopeOneofCase.ChanPoint ? (global::Lnrpc.ChannelPoint) scope_ : null; }
      set {
        scope_ = value;
        scopeCase_ = value == null ? ScopeOneofCase.None : ScopeOneofCase.ChanPoint;
      }
    }

    /// <summary>Field number for the "base_fee_msat" field.</summary>
    public const int BaseFeeMsatFieldNumber = 3;
    private long baseFeeMsat_;
    /// <summary>
    //// The base fee charged regardless of the number of milli-satoshis sent.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BaseFeeMsat {
      get { return baseFeeMsat_; }
      set {
        baseFeeMsat_ = value;
      }
    }

    /// <summary>Field number for the "fee_rate" field.</summary>
    public const int FeeRateFieldNumber = 4;
    private double feeRate_;
    /// <summary>
    //// The effective fee rate in milli-satoshis. The precision of this value goes up to 6 decimal places, so 1e-6.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double FeeRate {
      get { return feeRate_; }
      set {
        feeRate_ = value;
      }
    }

    /// <summary>Field number for the "time_lock_delta" field.</summary>
    public const int TimeLockDeltaFieldNumber = 5;
    private uint timeLockDelta_;
    /// <summary>
    //// The required timelock delta for HTLCs forwarded over the channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeLockDelta {
      get { return timeLockDelta_; }
      set {
        timeLockDelta_ = value;
      }
    }

    /// <summary>Field number for the "max_htlc_msat" field.</summary>
    public const int MaxHtlcMsatFieldNumber = 6;
    private ulong maxHtlcMsat_;
    /// <summary>
    //// If set, the maximum HTLC size in milli-satoshis. If unset, the maximum HTLC will be unchanged.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MaxHtlcMsat {
      get { return maxHtlcMsat_; }
      set {
        maxHtlcMsat_ = value;
      }
    }

    /// <summary>Field number for the "min_htlc_msat" field.</summary>
    public const int MinHtlcMsatFieldNumber = 7;
    private ulong minHtlcMsat_;
    /// <summary>
    //// The minimum HTLC size in milli-satoshis. Only applied if min_htlc_msat_specified is true.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong MinHtlcMsat {
      get { return minHtlcMsat_; }
      set {
        minHtlcMsat_ = value;
      }
    }

    /// <summary>Field number for the "min_htlc_msat_specified" field.</summary>
    public const int MinHtlcMsatSpecifiedFieldNumber = 8;
    private bool minHtlcMsatSpecified_;
    /// <summary>
    //// If true, min_htlc_msat is applied.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MinHtlcMsatSpecified {
      get { return minHtlcMsatSpecified_; }
      set {
        minHtlcMsatSpecified_ = value;
      }
    }

    private object scope_;
    /// <summary>Enum of possible cases for the "scope" oneof.</summary>
    public enum ScopeOneofCase {
      None = 0,
      Global = 1,
      ChanPoint = 2,
    }
    private ScopeOneofCase scopeCase_ = ScopeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScopeOneofCase ScopeCase {
      get { return scopeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearScope() {
      scopeCase_ = ScopeOneofCase.None;
      scope_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PolicyUpdateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PolicyUpdateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Global != other.Global) return false;
      if (!object.Equals(ChanPoint, other.ChanPoint)) return false;
      if (BaseFeeMsat != other.BaseFeeMsat) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FeeRate, other.FeeRate)) return false;
      if (TimeLockDelta != other.TimeLockDelta) return false;
      if (MaxHtlcMsat != other.MaxHtlcMsat) return false;
      if (MinHtlcMsat != other.MinHtlcMsat) return false;
      if (MinHtlcMsatSpecified != other.MinHtlcMsatSpecified) return false;
      if (ScopeCase != other.ScopeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (scopeCase_ == ScopeOneofCase.Global) hash ^= Global.GetHashCode();
      if (scopeCase_ == ScopeOneofCase.ChanPoint) hash ^= ChanPoint.GetHashCode();
      if (BaseFeeMsat != 0L) hash ^= BaseFeeMsat.GetHashCode();
      if (FeeRate != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FeeRate);
      if (TimeLockDelta != 0) hash ^= TimeLockDelta.GetHashCode();
      if (MaxHtlcMsat != 0UL) hash ^= MaxHtlcMsat.GetHashCode();
      if (MinHtlcMsat != 0UL) hash ^= MinHtlcMsat.GetHashCode();
      if (MinHtlcMsatSpecified != false) hash ^= MinHtlcMsatSpecified.GetHashCode();
      hash ^= (int) scopeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (scopeCase_ == ScopeOneofCase.Global) {
        output.WriteRawTag(8);
        output.WriteBool(Global);
      }
      if (scopeCase_ == ScopeOneofCase.ChanPoint) {
        output.WriteRawTag(18);
        output.WriteMessage(ChanPoint);
      }
      if (BaseFeeMsat != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(BaseFeeMsat);
      }
      if (FeeRate != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(FeeRate);
      }
      if (TimeLockDelta != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(TimeLockDelta);
      }
      if (MaxHtlcMsat != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(MaxHtlcMsat);
      }
      if (MinHtlcMsat != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(MinHtlcMsat);
      }
      if (MinHtlcMsatSpecified != false) {
        output.WriteRawTag(64);
        output.WriteBool(MinHtlcMsatSpecified);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (scopeCase_ == ScopeOneofCase.Global) {
        size += 1 + 1;
      }
      if (scopeCase_ == ScopeOneofCase.ChanPoint) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChanPoint);
      }
      if (BaseFeeMsat != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BaseFeeMsat);
      }
      if (FeeRate != 0D) {
        size += 1 + 8;
      }
      if (TimeLockDelta != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeLockDelta);
      }
      if (MaxHtlcMsat != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MaxHtlcMsat);
      }
      if (MinHtlcMsat != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(MinHtlcMsat);
      }
      if (MinHtlcMsatSpecified != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PolicyUpdateRequest other) {
      if (other == null) {
        return;
      }
      if (other.BaseFeeMsat != 0L) {
        BaseFeeMsat = other.BaseFeeMsat;
      }
      if (other.FeeRate != 0D) {
        FeeRate = other.FeeRate;
      }
      if (other.TimeLockDelta != 0) {
        TimeLockDelta = other.TimeLockDelta;
      }
      if (other.MaxHtlcMsat != 0UL) {
        MaxHtlcMsat = other.MaxHtlcMsat;
      }
      if (other.MinHtlcMsat != 0UL) {
        MinHtlcMsat = other.MinHtlcMsat;
      }
      if (other.MinHtlcMsatSpecified != false) {
        MinHtlcMsatSpecified = other.MinHtlcMsatSpecified;
      }
      switch (other.ScopeCase) {
        case ScopeOneofCase.Global:
          Global = other.Global;
          break;
        case ScopeOneofCase.ChanPoint:
          if (ChanPoint == null) {
            ChanPoint = new global::Lnrpc.ChannelPoint();
          }
          ChanPoint.MergeFrom(other.ChanPoint);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Global = input.ReadBool();
            break;
          }
          case 18: {
            global::Lnrpc.ChannelPoint subBuilder = new global::Lnrpc.ChannelPoint();
            if (scopeCase_ == ScopeOneofCase.ChanPoint) {
              subBuilder.MergeFrom(ChanPoint);
            }
            input.ReadMessage(subBuilder);
            ChanPoint = subBuilder;
            break;
          }
          case 24: {
            BaseFeeMsat = input.ReadInt64();
            break;
          }
          case 33: {
            FeeRate = input.ReadDouble();
            break;
          }
          case 40: {
            TimeLockDelta = input.ReadUInt32();
            break;
          }
          case 48: {
            MaxHtlcMsat = input.ReadUInt64();
            break;
          }
          case 56: {
            MinHtlcMsat = input.ReadUInt64();
            break;
          }
          case 64: {
            MinHtlcMsatSpecified = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PolicyUpdateResponse : pb::IMessage<PolicyUpdateResponse> {
    private static readonly pb::MessageParser<PolicyUpdateResponse> _parser = new pb::MessageParser<PolicyUpdateResponse>(() => new PolicyUpdateResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PolicyUpdateResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[129]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PolicyUpdateResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PolicyUpdateResponse(PolicyUpdateResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PolicyUpdateResponse Clone() {
      return new PolicyUpdateResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PolicyUpdateResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PolicyUpdateResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PolicyUpdateResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class ForwardingHistoryRequest : pb::IMessage<ForwardingHistoryRequest> {
    private static readonly pb::MessageParser<ForwardingHistoryRequest> _parser = new pb::MessageParser<ForwardingHistoryRequest>(() => new ForwardingHistoryRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ForwardingHistoryRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[130]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForwardingHistoryRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForwardingHistoryRequest(ForwardingHistoryRequest other) : this() {
      startTime_ = other.startTime_;
      endTime_ = other.endTime_;
      indexOffset_ = other.indexOffset_;
      numMaxEvents_ = other.numMaxEvents_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForwardingHistoryRequest Clone() {
      return new ForwardingHistoryRequest(this);
    }

    /// <summary>Field number for the "start_time" field.</summary>
    public const int StartTimeFieldNumber = 1;
    private ulong startTime_;
    /// <summary>
    //// Start time is the starting point of the forwarding history request. All records beyond this point will be included, respecting the end time, and the index offset.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "end_time" field.</summary>
    public const int EndTimeFieldNumber = 2;
    private ulong endTime_;
    /// <summary>
    //// End time is the end point of the forwarding history request. The response will carry at most 50k records between the start time and the end time. The index offset can be used to implement pagination.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "index_offset" field.</summary>
    public const int IndexOffsetFieldNumber = 3;
    private uint indexOffset_;
    /// <summary>
    //// Index offset is the offset in the time series to start at. As each response can only contain 50k records, callers can use this to skip around within a packed time series.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IndexOffset {
      get { return indexOffset_; }
      set {
        indexOffset_ = value;
      }
    }

    /// <summary>Field number for the "num_max_events" field.</summary>
    public const int NumMaxEventsFieldNumber = 4;
    private uint numMaxEvents_;
    /// <summary>
    //// The max number of events to return in the response to this query.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumMaxEvents {
      get { return numMaxEvents_; }
      set {
        numMaxEvents_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ForwardingHistoryRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ForwardingHistoryRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartTime != other.StartTime) return false;
      if (EndTime != other.EndTime) return false;
      if (IndexOffset != other.IndexOffset) return false;
      if (NumMaxEvents != other.NumMaxEvents) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StartTime != 0UL) hash ^= StartTime.GetHashCode();
      if (EndTime != 0UL) hash ^= EndTime.GetHashCode();
      if (IndexOffset != 0) hash ^= IndexOffset.GetHashCode();
      if (NumMaxEvents != 0) hash ^= NumMaxEvents.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StartTime != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(StartTime);
      }
      if (EndTime != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(EndTime);
      }
      if (IndexOffset != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(IndexOffset);
      }
      if (NumMaxEvents != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(NumMaxEvents);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StartTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StartTime);
      }
      if (EndTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EndTime);
      }
      if (IndexOffset != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IndexOffset);
      }
      if (NumMaxEvents != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumMaxEvents);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ForwardingHistoryRequest other) {
      if (other == null) {
        return;
      }
      if (other.StartTime != 0UL) {
        StartTime = other.StartTime;
      }
      if (other.EndTime != 0UL) {
        EndTime = other.EndTime;
      }
      if (other.IndexOffset != 0) {
        IndexOffset = other.IndexOffset;
      }
      if (other.NumMaxEvents != 0) {
        NumMaxEvents = other.NumMaxEvents;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StartTime = input.ReadUInt64();
            break;
          }
          case 16: {
            EndTime = input.ReadUInt64();
            break;
          }
          case 24: {
            IndexOffset = input.ReadUInt32();
            break;
          }
          case 32: {
            NumMaxEvents = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ForwardingEvent : pb::IMessage<ForwardingEvent> {
    private static readonly pb::MessageParser<ForwardingEvent> _parser = new pb::MessageParser<ForwardingEvent>(() => new ForwardingEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ForwardingEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[131]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForwardingEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForwardingEvent(ForwardingEvent other) : this() {
      timestamp_ = other.timestamp_;
      chanIdIn_ = other.chanIdIn_;
      chanIdOut_ = other.chanIdOut_;
      amtIn_ = other.amtIn_;
      amtOut_ = other.amtOut_;
      fee_ = other.fee_;
      feeMsat_ = other.feeMsat_;
      amtInMsat_ = other.amtInMsat_;
      amtOutMsat_ = other.amtOutMsat_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForwardingEvent Clone() {
      return new ForwardingEvent(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private ulong timestamp_;
    /// <summary>
    //// Timestamp is the time (unix epoch offset) that this circuit was completed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "chan_id_in" field.</summary>
    public const int ChanIdInFieldNumber = 2;
    private ulong chanIdIn_;
    /// <summary>
    //// The incoming channel ID that carried the HTLC that created the circuit.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ChanIdIn {
      get { return chanIdIn_; }
      set {
        chanIdIn_ = value;
      }
    }

    /// <summary>Field number for the "chan_id_out" field.</summary>
    public const int ChanIdOutFieldNumber = 4;
    private ulong chanIdOut_;
    /// <summary>
    //// The outgoing channel ID that carried the preimage that completed the circuit.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ChanIdOut {
      get { return chanIdOut_; }
      set {
        chanIdOut_ = value;
      }
    }

    /// <summary>Field number for the "amt_in" field.</summary>
    public const int AmtInFieldNumber = 5;
    private ulong amtIn_;
    /// <summary>
    //// The total amount (in satoshis) of the incoming HTLC that created half the circuit.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AmtIn {
      get { return amtIn_; }
      set {
        amtIn_ = value;
      }
    }

    /// <summary>Field number for the "amt_out" field.</summary>
    public const int AmtOutFieldNumber = 6;
    private ulong amtOut_;
    /// <summary>
    //// The total amount (in satoshis) of the outgoing HTLC that created the second half of the circuit.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AmtOut {
      get { return amtOut_; }
      set {
        amtOut_ = value;
      }
    }

    /// <summary>Field number for the "fee" field.</summary>
    public const int FeeFieldNumber = 7;
    private ulong fee_;
    /// <summary>
    //// The total fee (in satoshis) that this payment circuit carried.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Fee {
      get { return fee_; }
      set {
        fee_ = value;
      }
    }

    /// <summary>Field number for the "fee_msat" field.</summary>
    public const int FeeMsatFieldNumber = 8;
    private ulong feeMsat_;
    /// <summary>
    //// The total fee (in milli-satoshis) that this payment circuit carried.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong FeeMsat {
      get { return feeMsat_; }
      set {
        feeMsat_ = value;
      }
    }

    /// <summary>Field number for the "amt_in_msat" field.</summary>
    public const int AmtInMsatFieldNumber = 9;
    private ulong amtInMsat_;
    /// <summary>
    //// The total amount (in milli-satoshis) of the incoming HTLC that created half the circuit.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AmtInMsat {
      get { return amtInMsat_; }
      set {
        amtInMsat_ = value;
      }
    }

    /// <summary>Field number for the "amt_out_msat" field.</summary>
    public const int AmtOutMsatFieldNumber = 10;
    private ulong amtOutMsat_;
    /// <summary>
    //// The total amount (in milli-satoshis) of the outgoing HTLC that created the second half of the circuit.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AmtOutMsat {
      get { return amtOutMsat_; }
      set {
        amtOutMsat_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ForwardingEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ForwardingEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      if (ChanIdIn != other.ChanIdIn) return false;
      if (ChanIdOut != other.ChanIdOut) return false;
      if (AmtIn != other.AmtIn) return false;
      if (AmtOut != other.AmtOut) return false;
      if (Fee != other.Fee) return false;
      if (FeeMsat != other.FeeMsat) return false;
      if (AmtInMsat != other.AmtInMsat) return false;
      if (AmtOutMsat != other.AmtOutMsat) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
      if (ChanIdIn != 0UL) hash ^= ChanIdIn.GetHashCode();
      if (ChanIdOut != 0UL) hash ^= ChanIdOut.GetHashCode();
      if (AmtIn != 0UL) hash ^= AmtIn.GetHashCode();
      if (AmtOut != 0UL) hash ^= AmtOut.GetHashCode();
      if (Fee != 0UL) hash ^= Fee.GetHashCode();
      if (FeeMsat != 0UL) hash ^= FeeMsat.GetHashCode();
      if (AmtInMsat != 0UL) hash ^= AmtInMsat.GetHashCode();
      if (AmtOutMsat != 0UL) hash ^= AmtOutMsat.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Timestamp != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Timestamp);
      }
      if (ChanIdIn != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ChanIdIn);
      }
      if (ChanIdOut != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(ChanIdOut);
      }
      if (AmtIn != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(AmtIn);
      }
      if (AmtOut != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(AmtOut);
      }
      if (Fee != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(Fee);
      }
      if (FeeMsat != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(FeeMsat);
      }
      if (AmtInMsat != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(AmtInMsat);
      }
      if (AmtOutMsat != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(AmtOutMsat);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
      }
      if (ChanIdIn != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ChanIdIn);
      }
      if (ChanIdOut != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ChanIdOut);
      }
      if (AmtIn != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AmtIn);
      }
      if (AmtOut != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AmtOut);
      }
      if (Fee != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Fee);
      }
      if (FeeMsat != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FeeMsat);
      }
      if (AmtInMsat != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AmtInMsat);
      }
      if (AmtOutMsat != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AmtOutMsat);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ForwardingEvent other) {
      if (other == null) {
        return;
      }
      if (other.Timestamp != 0UL) {
        Timestamp = other.Timestamp;
      }
      if (other.ChanIdIn != 0UL) {
        ChanIdIn = other.ChanIdIn;
      }
      if (other.ChanIdOut != 0UL) {
        ChanIdOut = other.ChanIdOut;
      }
      if (other.AmtIn != 0UL) {
        AmtIn = other.AmtIn;
      }
      if (other.AmtOut != 0UL) {
        AmtOut = other.AmtOut;
      }
      if (other.Fee != 0UL) {
        Fee = other.Fee;
      }
      if (other.FeeMsat != 0UL) {
        FeeMsat = other.FeeMsat;
      }
      if (other.AmtInMsat != 0UL) {
        AmtInMsat = other.AmtInMsat;
      }
      if (other.AmtOutMsat != 0UL) {
        AmtOutMsat = other.AmtOutMsat;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Timestamp = input.ReadUInt64();
            break;
          }
          case 16: {
            ChanIdIn = input.ReadUInt64();
            break;
          }
          case 32: {
            ChanIdOut = input.ReadUInt64();
            break;
          }
          case 40: {
            AmtIn = input.ReadUInt64();
            break;
          }
          case 48: {
            AmtOut = input.ReadUInt64();
            break;
          }
          case 56: {
            Fee = input.ReadUInt64();
            break;
          }
          case 64: {
            FeeMsat = input.ReadUInt64();
            break;
          }
          case 72: {
            AmtInMsat = input.ReadUInt64();
            break;
          }
          case 80: {
            AmtOutMsat = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ForwardingHistoryResponse : pb::IMessage<ForwardingHistoryResponse> {
    private static readonly pb::MessageParser<ForwardingHistoryResponse> _parser = new pb::MessageParser<ForwardingHistoryResponse>(() => new ForwardingHistoryResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ForwardingHistoryResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[132]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForwardingHistoryResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForwardingHistoryResponse(ForwardingHistoryResponse other) : this() {
      forwardingEvents_ = other.forwardingEvents_.Clone();
      lastOffsetIndex_ = other.lastOffsetIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ForwardingHistoryResponse Clone() {
      return new ForwardingHistoryResponse(this);
    }

    /// <summary>Field number for the "forwarding_events" field.</summary>
    public const int ForwardingEventsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Lnrpc.ForwardingEvent> _repeated_forwardingEvents_codec
        = pb::FieldCodec.ForMessage(10, global::Lnrpc.ForwardingEvent.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.ForwardingEvent> forwardingEvents_ = new pbc::RepeatedField<global::Lnrpc.ForwardingEvent>();
    /// <summary>
    //// A list of forwarding events from the time slice of the time series specified in the request.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.ForwardingEvent> ForwardingEvents {
      get { return forwardingEvents_; }
    }

    /// <summary>Field number for the "last_offset_index" field.</summary>
    public const int LastOffsetIndexFieldNumber = 2;
    private uint lastOffsetIndex_;
    /// <summary>
    //// The index of the last time in the set of returned forwarding events. Can be used to seek further, pagination style.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastOffsetIndex {
      get { return lastOffsetIndex_; }
      set {
        lastOffsetIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ForwardingHistoryResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ForwardingHistoryResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!forwardingEvents_.Equals(other.forwardingEvents_)) return false;
      if (LastOffsetIndex != other.LastOffsetIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= forwardingEvents_.GetHashCode();
      if (LastOffsetIndex != 0) hash ^= LastOffsetIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      forwardingEvents_.WriteTo(output, _repeated_forwardingEvents_codec);
      if (LastOffsetIndex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(LastOffsetIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += forwardingEvents_.CalculateSize(_repeated_forwardingEvents_codec);
      if (LastOffsetIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastOffsetIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ForwardingHistoryResponse other) {
      if (other == null) {
        return;
      }
      forwardingEvents_.Add(other.forwardingEvents_);
      if (other.LastOffsetIndex != 0) {
        LastOffsetIndex = other.LastOffsetIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            forwardingEvents_.AddEntriesFrom(input, _repeated_forwardingEvents_codec);
            break;
          }
          case 16: {
            LastOffsetIndex = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ExportChannelBackupRequest : pb::IMessage<ExportChannelBackupRequest> {
    private static readonly pb::MessageParser<ExportChannelBackupRequest> _parser = new pb::MessageParser<ExportChannelBackupRequest>(() => new ExportChannelBackupRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExportChannelBackupRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[133]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExportChannelBackupRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExportChannelBackupRequest(ExportChannelBackupRequest other) : this() {
      chanPoint_ = other.chanPoint_ != null ? other.chanPoint_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExportChannelBackupRequest Clone() {
      return new ExportChannelBackupRequest(this);
    }

    /// <summary>Field number for the "chan_point" field.</summary>
    public const int ChanPointFieldNumber = 1;
    private global::Lnrpc.ChannelPoint chanPoint_;
    /// <summary>
    //// The target channel point to obtain a back up for.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.ChannelPoint ChanPoint {
      get { return chanPoint_; }
      set {
        chanPoint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExportChannelBackupRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExportChannelBackupRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ChanPoint, other.ChanPoint)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (chanPoint_ != null) hash ^= ChanPoint.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (chanPoint_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ChanPoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (chanPoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChanPoint);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExportChannelBackupRequest other) {
      if (other == null) {
        return;
      }
      if (other.chanPoint_ != null) {
        if (chanPoint_ == null) {
          ChanPoint = new global::Lnrpc.ChannelPoint();
        }
        ChanPoint.MergeFrom(other.ChanPoint);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (chanPoint_ == null) {
              ChanPoint = new global::Lnrpc.ChannelPoint();
            }
            input.ReadMessage(ChanPoint);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChannelBackup : pb::IMessage<ChannelBackup> {
    private static readonly pb::MessageParser<ChannelBackup> _parser = new pb::MessageParser<ChannelBackup>(() => new ChannelBackup());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelBackup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[134]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelBackup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelBackup(ChannelBackup other) : this() {
      chanPoint_ = other.chanPoint_ != null ? other.chanPoint_.Clone() : null;
      chanBackup_ = other.chanBackup_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelBackup Clone() {
      return new ChannelBackup(this);
    }

    /// <summary>Field number for the "chan_point" field.</summary>
    public const int ChanPointFieldNumber = 1;
    private global::Lnrpc.ChannelPoint chanPoint_;
    /// <summary>
    ///*
    ///Identifies the channel that this backup belongs to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.ChannelPoint ChanPoint {
      get { return chanPoint_; }
      set {
        chanPoint_ = value;
      }
    }

    /// <summary>Field number for the "chan_backup" field.</summary>
    public const int ChanBackupFieldNumber = 2;
    private pb::ByteString chanBackup_ = pb::ByteString.Empty;
    /// <summary>
    ///*
    ///Is an encrypted single-chan backup. this can be passed to
    ///RestoreChannelBackups, or the WalletUnlocker Init and Unlock methods in
    ///order to trigger the recovery protocol. When using REST, this field must be
    ///encoded as base64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ChanBackup {
      get { return chanBackup_; }
      set {
        chanBackup_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelBackup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelBackup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ChanPoint, other.ChanPoint)) return false;
      if (ChanBackup != other.ChanBackup) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (chanPoint_ != null) hash ^= ChanPoint.GetHashCode();
      if (ChanBackup.Length != 0) hash ^= ChanBackup.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (chanPoint_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ChanPoint);
      }
      if (ChanBackup.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(ChanBackup);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (chanPoint_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChanPoint);
      }
      if (ChanBackup.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ChanBackup);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelBackup other) {
      if (other == null) {
        return;
      }
      if (other.chanPoint_ != null) {
        if (chanPoint_ == null) {
          ChanPoint = new global::Lnrpc.ChannelPoint();
        }
        ChanPoint.MergeFrom(other.ChanPoint);
      }
      if (other.ChanBackup.Length != 0) {
        ChanBackup = other.ChanBackup;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (chanPoint_ == null) {
              ChanPoint = new global::Lnrpc.ChannelPoint();
            }
            input.ReadMessage(ChanPoint);
            break;
          }
          case 18: {
            ChanBackup = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MultiChanBackup : pb::IMessage<MultiChanBackup> {
    private static readonly pb::MessageParser<MultiChanBackup> _parser = new pb::MessageParser<MultiChanBackup>(() => new MultiChanBackup());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MultiChanBackup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[135]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiChanBackup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiChanBackup(MultiChanBackup other) : this() {
      chanPoints_ = other.chanPoints_.Clone();
      multiChanBackup_ = other.multiChanBackup_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultiChanBackup Clone() {
      return new MultiChanBackup(this);
    }

    /// <summary>Field number for the "chan_points" field.</summary>
    public const int ChanPointsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Lnrpc.ChannelPoint> _repeated_chanPoints_codec
        = pb::FieldCodec.ForMessage(10, global::Lnrpc.ChannelPoint.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.ChannelPoint> chanPoints_ = new pbc::RepeatedField<global::Lnrpc.ChannelPoint>();
    /// <summary>
    ///*
    ///Is the set of all channels that are included in this multi-channel backup.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.ChannelPoint> ChanPoints {
      get { return chanPoints_; }
    }

    /// <summary>Field number for the "multi_chan_backup" field.</summary>
    public const int MultiChanBackup_FieldNumber = 2;
    private pb::ByteString multiChanBackup_ = pb::ByteString.Empty;
    /// <summary>
    ///*
    ///A single encrypted blob containing all the static channel backups of the
    ///channel listed above. This can be stored as a single file or blob, and
    ///safely be replaced with any prior/future versions. When using REST, this
    ///field must be encoded as base64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MultiChanBackup_ {
      get { return multiChanBackup_; }
      set {
        multiChanBackup_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MultiChanBackup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MultiChanBackup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!chanPoints_.Equals(other.chanPoints_)) return false;
      if (MultiChanBackup_ != other.MultiChanBackup_) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= chanPoints_.GetHashCode();
      if (MultiChanBackup_.Length != 0) hash ^= MultiChanBackup_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      chanPoints_.WriteTo(output, _repeated_chanPoints_codec);
      if (MultiChanBackup_.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(MultiChanBackup_);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += chanPoints_.CalculateSize(_repeated_chanPoints_codec);
      if (MultiChanBackup_.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MultiChanBackup_);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MultiChanBackup other) {
      if (other == null) {
        return;
      }
      chanPoints_.Add(other.chanPoints_);
      if (other.MultiChanBackup_.Length != 0) {
        MultiChanBackup_ = other.MultiChanBackup_;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            chanPoints_.AddEntriesFrom(input, _repeated_chanPoints_codec);
            break;
          }
          case 18: {
            MultiChanBackup_ = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChanBackupExportRequest : pb::IMessage<ChanBackupExportRequest> {
    private static readonly pb::MessageParser<ChanBackupExportRequest> _parser = new pb::MessageParser<ChanBackupExportRequest>(() => new ChanBackupExportRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChanBackupExportRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[136]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChanBackupExportRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChanBackupExportRequest(ChanBackupExportRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChanBackupExportRequest Clone() {
      return new ChanBackupExportRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChanBackupExportRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChanBackupExportRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChanBackupExportRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class ChanBackupSnapshot : pb::IMessage<ChanBackupSnapshot> {
    private static readonly pb::MessageParser<ChanBackupSnapshot> _parser = new pb::MessageParser<ChanBackupSnapshot>(() => new ChanBackupSnapshot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChanBackupSnapshot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[137]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChanBackupSnapshot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChanBackupSnapshot(ChanBackupSnapshot other) : this() {
      singleChanBackups_ = other.singleChanBackups_ != null ? other.singleChanBackups_.Clone() : null;
      multiChanBackup_ = other.multiChanBackup_ != null ? other.multiChanBackup_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChanBackupSnapshot Clone() {
      return new ChanBackupSnapshot(this);
    }

    /// <summary>Field number for the "single_chan_backups" field.</summary>
    public const int SingleChanBackupsFieldNumber = 1;
    private global::Lnrpc.ChannelBackups singleChanBackups_;
    /// <summary>
    ///*
    ///The set of new channels that have been added since the last channel backup
    ///snapshot was requested.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.ChannelBackups SingleChanBackups {
      get { return singleChanBackups_; }
      set {
        singleChanBackups_ = value;
      }
    }

    /// <summary>Field number for the "multi_chan_backup" field.</summary>
    public const int MultiChanBackupFieldNumber = 2;
    private global::Lnrpc.MultiChanBackup multiChanBackup_;
    /// <summary>
    ///*
    ///A multi-channel backup that covers all open channels currently known to
    ///lnd.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.MultiChanBackup MultiChanBackup {
      get { return multiChanBackup_; }
      set {
        multiChanBackup_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChanBackupSnapshot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChanBackupSnapshot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SingleChanBackups, other.SingleChanBackups)) return false;
      if (!object.Equals(MultiChanBackup, other.MultiChanBackup)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (singleChanBackups_ != null) hash ^= SingleChanBackups.GetHashCode();
      if (multiChanBackup_ != null) hash ^= MultiChanBackup.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (singleChanBackups_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SingleChanBackups);
      }
      if (multiChanBackup_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MultiChanBackup);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (singleChanBackups_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SingleChanBackups);
      }
      if (multiChanBackup_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MultiChanBackup);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChanBackupSnapshot other) {
      if (other == null) {
        return;
      }
      if (other.singleChanBackups_ != null) {
        if (singleChanBackups_ == null) {
          SingleChanBackups = new global::Lnrpc.ChannelBackups();
        }
        SingleChanBackups.MergeFrom(other.SingleChanBackups);
      }
      if (other.multiChanBackup_ != null) {
        if (multiChanBackup_ == null) {
          MultiChanBackup = new global::Lnrpc.MultiChanBackup();
        }
        MultiChanBackup.MergeFrom(other.MultiChanBackup);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (singleChanBackups_ == null) {
              SingleChanBackups = new global::Lnrpc.ChannelBackups();
            }
            input.ReadMessage(SingleChanBackups);
            break;
          }
          case 18: {
            if (multiChanBackup_ == null) {
              MultiChanBackup = new global::Lnrpc.MultiChanBackup();
            }
            input.ReadMessage(MultiChanBackup);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChannelBackups : pb::IMessage<ChannelBackups> {
    private static readonly pb::MessageParser<ChannelBackups> _parser = new pb::MessageParser<ChannelBackups>(() => new ChannelBackups());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelBackups> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[138]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelBackups() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelBackups(ChannelBackups other) : this() {
      chanBackups_ = other.chanBackups_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelBackups Clone() {
      return new ChannelBackups(this);
    }

    /// <summary>Field number for the "chan_backups" field.</summary>
    public const int ChanBackupsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Lnrpc.ChannelBackup> _repeated_chanBackups_codec
        = pb::FieldCodec.ForMessage(10, global::Lnrpc.ChannelBackup.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.ChannelBackup> chanBackups_ = new pbc::RepeatedField<global::Lnrpc.ChannelBackup>();
    /// <summary>
    ///*
    ///A set of single-chan static channel backups.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.ChannelBackup> ChanBackups {
      get { return chanBackups_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelBackups);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelBackups other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!chanBackups_.Equals(other.chanBackups_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= chanBackups_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      chanBackups_.WriteTo(output, _repeated_chanBackups_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += chanBackups_.CalculateSize(_repeated_chanBackups_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelBackups other) {
      if (other == null) {
        return;
      }
      chanBackups_.Add(other.chanBackups_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            chanBackups_.AddEntriesFrom(input, _repeated_chanBackups_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RestoreChanBackupRequest : pb::IMessage<RestoreChanBackupRequest> {
    private static readonly pb::MessageParser<RestoreChanBackupRequest> _parser = new pb::MessageParser<RestoreChanBackupRequest>(() => new RestoreChanBackupRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RestoreChanBackupRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[139]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestoreChanBackupRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestoreChanBackupRequest(RestoreChanBackupRequest other) : this() {
      switch (other.BackupCase) {
        case BackupOneofCase.ChanBackups:
          ChanBackups = other.ChanBackups.Clone();
          break;
        case BackupOneofCase.MultiChanBackup:
          MultiChanBackup = other.MultiChanBackup;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestoreChanBackupRequest Clone() {
      return new RestoreChanBackupRequest(this);
    }

    /// <summary>Field number for the "chan_backups" field.</summary>
    public const int ChanBackupsFieldNumber = 1;
    /// <summary>
    ///*
    ///The channels to restore as a list of channel/backup pairs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Lnrpc.ChannelBackups ChanBackups {
      get { return backupCase_ == BackupOneofCase.ChanBackups ? (global::Lnrpc.ChannelBackups) backup_ : null; }
      set {
        backup_ = value;
        backupCase_ = value == null ? BackupOneofCase.None : BackupOneofCase.ChanBackups;
      }
    }

    /// <summary>Field number for the "multi_chan_backup" field.</summary>
    public const int MultiChanBackupFieldNumber = 2;
    /// <summary>
    ///*
    ///The channels to restore in the packed multi backup format. When using
    ///REST, this field must be encoded as base64.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MultiChanBackup {
      get { return backupCase_ == BackupOneofCase.MultiChanBackup ? (pb::ByteString) backup_ : pb::ByteString.Empty; }
      set {
        backup_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        backupCase_ = BackupOneofCase.MultiChanBackup;
      }
    }

    private object backup_;
    /// <summary>Enum of possible cases for the "backup" oneof.</summary>
    public enum BackupOneofCase {
      None = 0,
      ChanBackups = 1,
      MultiChanBackup = 2,
    }
    private BackupOneofCase backupCase_ = BackupOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BackupOneofCase BackupCase {
      get { return backupCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBackup() {
      backupCase_ = BackupOneofCase.None;
      backup_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RestoreChanBackupRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RestoreChanBackupRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ChanBackups, other.ChanBackups)) return false;
      if (MultiChanBackup != other.MultiChanBackup) return false;
      if (BackupCase != other.BackupCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (backupCase_ == BackupOneofCase.ChanBackups) hash ^= ChanBackups.GetHashCode();
      if (backupCase_ == BackupOneofCase.MultiChanBackup) hash ^= MultiChanBackup.GetHashCode();
      hash ^= (int) backupCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (backupCase_ == BackupOneofCase.ChanBackups) {
        output.WriteRawTag(10);
        output.WriteMessage(ChanBackups);
      }
      if (backupCase_ == BackupOneofCase.MultiChanBackup) {
        output.WriteRawTag(18);
        output.WriteBytes(MultiChanBackup);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (backupCase_ == BackupOneofCase.ChanBackups) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChanBackups);
      }
      if (backupCase_ == BackupOneofCase.MultiChanBackup) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MultiChanBackup);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RestoreChanBackupRequest other) {
      if (other == null) {
        return;
      }
      switch (other.BackupCase) {
        case BackupOneofCase.ChanBackups:
          if (ChanBackups == null) {
            ChanBackups = new global::Lnrpc.ChannelBackups();
          }
          ChanBackups.MergeFrom(other.ChanBackups);
          break;
        case BackupOneofCase.MultiChanBackup:
          MultiChanBackup = other.MultiChanBackup;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Lnrpc.ChannelBackups subBuilder = new global::Lnrpc.ChannelBackups();
            if (backupCase_ == BackupOneofCase.ChanBackups) {
              subBuilder.MergeFrom(ChanBackups);
            }
            input.ReadMessage(subBuilder);
            ChanBackups = subBuilder;
            break;
          }
          case 18: {
            MultiChanBackup = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RestoreBackupResponse : pb::IMessage<RestoreBackupResponse> {
    private static readonly pb::MessageParser<RestoreBackupResponse> _parser = new pb::MessageParser<RestoreBackupResponse>(() => new RestoreBackupResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RestoreBackupResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[140]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestoreBackupResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestoreBackupResponse(RestoreBackupResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestoreBackupResponse Clone() {
      return new RestoreBackupResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RestoreBackupResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RestoreBackupResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RestoreBackupResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class ChannelBackupSubscription : pb::IMessage<ChannelBackupSubscription> {
    private static readonly pb::MessageParser<ChannelBackupSubscription> _parser = new pb::MessageParser<ChannelBackupSubscription>(() => new ChannelBackupSubscription());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChannelBackupSubscription> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[141]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelBackupSubscription() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelBackupSubscription(ChannelBackupSubscription other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChannelBackupSubscription Clone() {
      return new ChannelBackupSubscription(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChannelBackupSubscription);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChannelBackupSubscription other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChannelBackupSubscription other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class VerifyChanBackupResponse : pb::IMessage<VerifyChanBackupResponse> {
    private static readonly pb::MessageParser<VerifyChanBackupResponse> _parser = new pb::MessageParser<VerifyChanBackupResponse>(() => new VerifyChanBackupResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VerifyChanBackupResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[142]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyChanBackupResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyChanBackupResponse(VerifyChanBackupResponse other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyChanBackupResponse Clone() {
      return new VerifyChanBackupResponse(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VerifyChanBackupResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VerifyChanBackupResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VerifyChanBackupResponse other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class MacaroonPermission : pb::IMessage<MacaroonPermission> {
    private static readonly pb::MessageParser<MacaroonPermission> _parser = new pb::MessageParser<MacaroonPermission>(() => new MacaroonPermission());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MacaroonPermission> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[143]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MacaroonPermission() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MacaroonPermission(MacaroonPermission other) : this() {
      entity_ = other.entity_;
      action_ = other.action_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MacaroonPermission Clone() {
      return new MacaroonPermission(this);
    }

    /// <summary>Field number for the "entity" field.</summary>
    public const int EntityFieldNumber = 1;
    private string entity_ = "";
    /// <summary>
    //// The entity a permission grants access to.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Entity {
      get { return entity_; }
      set {
        entity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 2;
    private string action_ = "";
    /// <summary>
    //// The action that is granted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Action {
      get { return action_; }
      set {
        action_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MacaroonPermission);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MacaroonPermission other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Entity != other.Entity) return false;
      if (Action != other.Action) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Entity.Length != 0) hash ^= Entity.GetHashCode();
      if (Action.Length != 0) hash ^= Action.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Entity.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Entity);
      }
      if (Action.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Action);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Entity.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Entity);
      }
      if (Action.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Action);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MacaroonPermission other) {
      if (other == null) {
        return;
      }
      if (other.Entity.Length != 0) {
        Entity = other.Entity;
      }
      if (other.Action.Length != 0) {
        Action = other.Action;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Entity = input.ReadString();
            break;
          }
          case 18: {
            Action = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BakeMacaroonRequest : pb::IMessage<BakeMacaroonRequest> {
    private static readonly pb::MessageParser<BakeMacaroonRequest> _parser = new pb::MessageParser<BakeMacaroonRequest>(() => new BakeMacaroonRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BakeMacaroonRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[144]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BakeMacaroonRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BakeMacaroonRequest(BakeMacaroonRequest other) : this() {
      permissions_ = other.permissions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BakeMacaroonRequest Clone() {
      return new BakeMacaroonRequest(this);
    }

    /// <summary>Field number for the "permissions" field.</summary>
    public const int PermissionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Lnrpc.MacaroonPermission> _repeated_permissions_codec
        = pb::FieldCodec.ForMessage(10, global::Lnrpc.MacaroonPermission.Parser);
    private readonly pbc::RepeatedField<global::Lnrpc.MacaroonPermission> permissions_ = new pbc::RepeatedField<global::Lnrpc.MacaroonPermission>();
    /// <summary>
    //// The list of permissions the new macaroon should grant.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Lnrpc.MacaroonPermission> Permissions {
      get { return permissions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BakeMacaroonRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BakeMacaroonRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!permissions_.Equals(other.permissions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= permissions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      permissions_.WriteTo(output, _repeated_permissions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += permissions_.CalculateSize(_repeated_permissions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BakeMacaroonRequest other) {
      if (other == null) {
        return;
      }
      permissions_.Add(other.permissions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            permissions_.AddEntriesFrom(input, _repeated_permissions_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BakeMacaroonResponse : pb::IMessage<BakeMacaroonResponse> {
    private static readonly pb::MessageParser<BakeMacaroonResponse> _parser = new pb::MessageParser<BakeMacaroonResponse>(() => new BakeMacaroonResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BakeMacaroonResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lnrpc.RpcReflection.Descriptor.MessageTypes[145]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BakeMacaroonResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BakeMacaroonResponse(BakeMacaroonResponse other) : this() {
      macaroon_ = other.macaroon_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BakeMacaroonResponse Clone() {
      return new BakeMacaroonResponse(this);
    }

    /// <summary>Field number for the "macaroon" field.</summary>
    public const int MacaroonFieldNumber = 1;
    private string macaroon_ = "";
    /// <summary>
    //// The hex encoded macaroon, serialized in binary format.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Macaroon {
      get { return macaroon_; }
      set {
        macaroon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BakeMacaroonResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BakeMacaroonResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Macaroon != other.Macaroon) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Macaroon.Length != 0) hash ^= Macaroon.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Macaroon.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Macaroon);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Macaroon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Macaroon);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BakeMacaroonResponse other) {
      if (other == null) {
        return;
      }
      if (other.Macaroon.Length != 0) {
        Macaroon = other.Macaroon;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Macaroon = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
